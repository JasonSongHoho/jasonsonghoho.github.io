{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/md5.min.js","path":"js/src/md5.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537405507328},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537405507328},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1537405507332},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537405507337},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1537405507249},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1537405507327},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1537405507327},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537405507337},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1537405507358},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1537405507230},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1537405507332},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1537405507230},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1537405507249},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1537405507327},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1537405507333},{"_id":"themes/next/_config.yml","hash":"bcd6d08ef918bba2e98c32a3bd03b81e15044c12","modified":1537546289729},{"_id":"source/about/index.md","hash":"39c79fcc89b062707af095fb090530ed8650c0c5","modified":1537457422676},{"_id":"source/categories/index.md","hash":"71c6456a5556b223de7869a40fe1da2e5957af86","modified":1537453347351},{"_id":"source/_posts/170924.md","hash":"c8d43d627685d4955a8c45fa1c5e1849e209a6ee","modified":1537457008312},{"_id":"source/_posts/170928.md","hash":"a11c90d3380f980b14ba1d1588cb4558713cc4bf","modified":1537457008336},{"_id":"source/_posts/171022.md","hash":"05210a7d38ccbe9df9fb5cae81a0bd7d4524b94d","modified":1537584328889},{"_id":"source/_posts/171023.md","hash":"f9886aca45ad88163a4a3e7986f62a76975b0f0a","modified":1537584328893},{"_id":"source/_posts/171210.md","hash":"40a9e7e03376e4daa2e723dfaed51294b9231867","modified":1537584364906},{"_id":"source/_posts/171108.md","hash":"d5255857256544be3cd79860fe4e52cdd0d5be62","modified":1537458366026},{"_id":"source/_posts/180521.md","hash":"0d58a09cf8784a122b6fb878e3e1d0be384bd2b5","modified":1537457008340},{"_id":"source/_posts/2017-06-06-doc.markdown","hash":"e10ecbb2a87a6b8af4d362ce899e119ba5da2d5f","modified":1537457078658},{"_id":"source/_posts/2017-12-18-doc.markdown","hash":"c776d6ce49a8122023655129cdd53fb8f2e5d33a","modified":1537584545202},{"_id":"source/_posts/Java-7-HashMap-源码解读.md","hash":"2d551ef1f91f5bafb77c80d883725991b45f4e7c","modified":1537583609034},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter.md","hash":"7db843287a08191e896051faad12ab676bbf7d32","modified":1540890193706},{"_id":"source/_posts/Java-8-HashMap-上-——-红黑树.md","hash":"dddbd9cf1e764e1dde1d14b423b5ce4e45191150","modified":1537721118176},{"_id":"source/_posts/Java-8-HashMap（下）—— compute.md","hash":"3733068895fdcd9c82a6116417e3b6e383d425eb","modified":1538639826137},{"_id":"source/_posts/Linux中的top命令详解.md","hash":"675bfa072b81a60306357431f226246fc00653b9","modified":1537584732563},{"_id":"source/_posts/Linux-的-Cache、Buffer、MemAvailable、Swap简介.md","hash":"2a07e4cd5199af74b9cda3937d8eb7464407aa24","modified":1537584732543},{"_id":"source/_posts/MySQL究竟如何解决“不可重复读”和“幻读”的.md","hash":"564f59b02f325d43ea8700a7031873cee0062589","modified":1537583444066},{"_id":"source/_posts/React快速入门.md","hash":"a42039cdde3fb4c5407fd550475884035c2f67f4","modified":1537584732539},{"_id":"source/_posts/Java-ArrayList-源码解读.md","hash":"bd0fd8627e5a4015312d8c8b980f6b306dab4f3d","modified":1542285067331},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介.md","hash":"a2dc2ad3330b2e6bdde9f0fa410e559338920574","modified":1543071502826},{"_id":"source/_posts/克拉丝的JVM工厂之旅（上）.md","hash":"93cea22392f939a8876783aa1adee426242d0553","modified":1537584732549},{"_id":"source/_posts/动物园管理员——ZooKeeper.md","hash":"4c341678f9ef5076c7f6afca98e8d0775a801482","modified":1537584732560},{"_id":"source/_posts/克拉丝的面试.md","hash":"8dc56600f88cb7af4f9659d6eaa89df20d73ae8f","modified":1537584766942},{"_id":"source/_posts/园丁与盆栽.md","hash":"a3b33f598eef8ba23249bf051f7dd5c2d9b39419","modified":1537584732553},{"_id":"source/_posts/工厂模式、简单工厂模式与抽象工厂模式.md","hash":"8baea783775b5cfb41791ee9a1eebb02e26f577e","modified":1537584732556},{"_id":"source/tags/index.md","hash":"4d556bf6864ee0e51bd6ee546a17d634d3dc5cba","modified":1537453347351},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1537405507336},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1537405507336},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537405507336},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537405507352},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1537405507337},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1537405507338},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537405507354},{"_id":"themes/next/.git/index","hash":"615727d7a4fbdd7a6bf6d5c938245d6921ce4a3f","modified":1537590372133},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1537405507358},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1537405507333},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537405507333},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1537405507232},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1537405507239},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1537405507232},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1537405507235},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1537405507234},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1537405507231},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1537405507234},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1537405507330},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1537405507331},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1537405507231},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1537405507328},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1537405507331},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1537405507329},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1537405507331},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1537405507330},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1537405507329},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1537405507330},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1537405507330},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1537405507329},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1537405507332},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1537405507331},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1537405507329},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1537405507331},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1537405507332},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537405507230},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537405507231},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537405507230},{"_id":"source/_posts/170924/aftgit2.png","hash":"03228507852db7be5c76acb7ea50e7f762ee152a","modified":1537453242000},{"_id":"source/_posts/170924/aftgit1.png","hash":"3c431188cacd1839e3f70f069653757197ae6745","modified":1537453242000},{"_id":"source/_posts/170924/idea1.png","hash":"317c8a5110ddf041ed293fb133d82b143acfef39","modified":1537453242000},{"_id":"source/_posts/170924/idea3.png","hash":"cbe429ea98e994e2b9b25759bae36b2cde613335","modified":1537453242000},{"_id":"source/_posts/170924/newgit1.png","hash":"9a41fd2d94590494de436fb092128ae1af1752c4","modified":1537453242000},{"_id":"source/_posts/170924/newgit2.png","hash":"2fa86306c3dd23a6b40cbf8a5cf193f3bb86c206","modified":1537453242000},{"_id":"source/_posts/170924/newgit5.png","hash":"b305a309fdddea80e2b1f2d78caa18c391d96e92","modified":1537453242000},{"_id":"source/_posts/170924/newgit4.png","hash":"0ba1a516f10d8bfde9986b964deabd8ea104769a","modified":1537453242000},{"_id":"source/_posts/170924/ruby-install.png","hash":"52f383fd18e5ade910bdfe7d382920f1fd872f13","modified":1537453242000},{"_id":"source/_posts/170928/cassandra1.png","hash":"c1cb8375e4818019c36e483afe0d62fba23da98f","modified":1537453242000},{"_id":"source/_posts/170928/free -h.png","hash":"84c6833ab00fe803e3c167c14ad2d0720236a45e","modified":1537453242000},{"_id":"source/_posts/170928/compactionstats.png","hash":"282a003a104d60c2fd2a30fceeea4e54b7081d82","modified":1537453242000},{"_id":"source/_posts/170928/system.cpu.idle 2-3 .png","hash":"3bd088e77adcf2dba1eeab52f839346278de2521","modified":1537453242000},{"_id":"source/_posts/170928/system.cpu.idle 2-3 no agg.png","hash":"252fcddee01fc097b8bf51db4f0c79f26f594539","modified":1537453242000},{"_id":"source/_posts/171022/logIn_showVersion.png","hash":"f44ed7c6e4c816b9a9451fb0d088f1ee6338deeb","modified":1537453242000},{"_id":"source/_posts/171023/invoke.png","hash":"f10045bd0df9214275ba7ae4ef278d35d2676951","modified":1537453242000},{"_id":"source/_posts/171023/login.png","hash":"b12b2435b4c62a633bc05580cd5de210b211a2bc","modified":1537453242000},{"_id":"source/_posts/171023/ps&ls.png","hash":"f281c6183736d6cdfc315d1c1708e07628ee3563","modified":1537453242000},{"_id":"source/_posts/171023/trace.png","hash":"62dd505d639ad8f1d04339d98384b125020a6f19","modified":1537453242000},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/bloom_filter.jpeg","hash":"320b8ad03a21def98b4c3677eceb6611bc5a2477","modified":1539275060000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507326},{"_id":"source/_posts/170924/idea4.png","hash":"8f85ea44beb80af0057faa61834e8316f912967d","modified":1537453242000},{"_id":"source/_posts/170924/newgit3.png","hash":"4068c22ddc61f59066a5802f82c221f7208f3ccc","modified":1537453242000},{"_id":"source/_posts/170928/cassandra2.png","hash":"ec8cf329a1cebc0b808c681d249e4a7073dc0897","modified":1537453242000},{"_id":"source/_posts/170928/load_time.png","hash":"07d254b6682b3ba6c7ca6e5a8621698a5c4136d2","modified":1537453242000},{"_id":"source/_posts/171108/19_28_49.png","hash":"f0b5bfd32129b9afda6e200ba48752d5d2e8630a","modified":1537453242000},{"_id":"source/_posts/171210/image2017-12-8_11_24_9.png","hash":"f08e149f061fc362bd38bb0a5bfd44094bdf5256","modified":1537453242000},{"_id":"source/_posts/171210/kairosdb_metric_count_70W_75W.png","hash":"b49df439c43cd9d9179b4cdc81d42e91018aae68","modified":1537453242000},{"_id":"source/_posts/171210/metric_count100W .png","hash":"666eca3bc7feb8d0703b5b24a8f3da35bd3e6979","modified":1537453242000},{"_id":"source/_posts/171210/统计局_query_sample_size.png","hash":"891e5dec69428e01403e012735cbc67fccdd4c04","modified":1537453242000},{"_id":"source/_posts/180521/database_rank.png","hash":"c5bc0347bba274565c096d8a8b912e3c3ec45648","modified":1537453242000},{"_id":"source/_posts/Java-8-HashMap-上-——-红黑树/20180923214733.png","hash":"02eca2ee6eb2f47a6ca59dbb87d92b8e3bd2567e","modified":1537710468000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537405507356},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537405507355},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537405507354},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/synchronized.png","hash":"0f1b5840cd517d921f7b04c2a2486e8357823488","modified":1543058376000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537405507355},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537405507356},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537405507356},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537405507356},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1537405507353},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537405507355},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537405507355},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537405507356},{"_id":"themes/next/.git/logs/HEAD","hash":"f62537206385cb00bcbe396a835535d7b294b578","modified":1537405507353},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1537405507334},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1537405507334},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1537405507335},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1537405507335},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1537405507335},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1537405507335},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1537405507334},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1537405507334},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1537405507334},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537405507232},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537405507248},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537405507232},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1537405507247},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1537405507248},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1537405507248},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1537405507248},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1537405507247},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1537405507233},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1537405507234},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1537405507233},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1537405507243},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1537405507241},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1537405507242},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537405507241},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537405507244},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1537405507243},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1537405507242},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db7108d11232b72454112134844ff5bfc863c6c7","modified":1537458135378},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1537405507237},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1537405507237},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1537405507235},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1537405507237},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1537405507237},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1537405507236},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1537405507270},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537405507281},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537405507283},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537405507281},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537405507284},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537405507281},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537405507282},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537405507281},{"_id":"themes/next/source/images/avatar.jpg","hash":"eaa176a1d3946741afed731579553bf2c22ae8c7","modified":1537457798000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537405507282},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537405507284},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537405507283},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537405507283},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537405507280},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537405507282},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537405507284},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537405507283},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537405507282},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537405507283},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537405507281},{"_id":"source/_posts/170924/devkit-inst.png","hash":"14efcd4591b2db68899fd49e4d168bf26380ceef","modified":1537453242000},{"_id":"source/_posts/170924/idea2.png","hash":"bf279905e0c055ede26c4397ca49b07f5449b87c","modified":1537453242000},{"_id":"source/_posts/171022/cfstats.png","hash":"11582e84884a0ac009a7dd270c926181fd88cd75","modified":1537453242000},{"_id":"source/_posts/171022/tpstats.png","hash":"71b83f1250c1fd155ae83dd24d4428d8815974d1","modified":1537453242000},{"_id":"source/_posts/171108/19_14_27.png","hash":"43d0cee523d9df522c891dd0b4dc4ad6ce03ce47","modified":1537453242000},{"_id":"source/_posts/171108/19_29_20.png","hash":"629aaa6147823fb2b47c0ebadb661dcf9265c8d3","modified":1537453242000},{"_id":"source/_posts/171210/kairosdb_metric_count.png","hash":"09b16012ed9fbdd8d1ac77114177cdb4384f5d13","modified":1537453242000},{"_id":"source/_posts/171210/统计局_query_row_count.png","hash":"26cbf492b8bd6aa1addf811c8089b839192bcb10","modified":1537453242000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507233},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507233},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507279},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507280},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507278},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507270},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537405507269},{"_id":"source/_posts/171022/count_tombstone.png","hash":"3690a391487d9caa8e8d5aeca516543512cde306","modified":1537453242000},{"_id":"source/_posts/171108/19_23_5.png","hash":"d71c057597a8fe4520b22ec883962a42b7380dc5","modified":1537453242000},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/bitset-mem.png","hash":"55ea2ad784b1adc431c7e729b9b371ad9ee80fed","modified":1539267966000},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/concurrent包.png","hash":"66fb2ca325b7471509d12f0cc56263e37f5a0d12","modified":1543051550000},{"_id":"themes/next/.git/objects/ba/00c1cc76c4b819ee312e8a84af9fc9e3fb356a","hash":"6eb6372ca3de996ed820304b7cda1d7a9db24190","modified":1537590372132},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1537405507357},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1537405507234},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537405507233},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537405507233},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537405507241},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1537405507239},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1537405507240},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1537405507239},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1537405507240},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"c3765976fff9d1ad400d3211d047fdf53ed4dc56","modified":1537548258236},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1537405507241},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1537405507240},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1537405507240},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537405507246},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"08338cba394ebef11bd9473675237fbb8ba06f04","modified":1537436811866},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537405507246},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1537405507245},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537405507245},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537405507247},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1537405507246},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1537405507245},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537405507245},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537405507246},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537405507245},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537405507246},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1537405507247},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537405507244},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537405507244},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537405507242},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537405507236},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537405507242},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1537405507243},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537405507236},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537405507236},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537405507235},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537405507235},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537405507238},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537405507238},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537405507238},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537405507238},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537405507249},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537405507278},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1537405507279},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1537405507279},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1537405507269},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537405507269},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1537405507270},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1537405507270},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1537405507287},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1537405507286},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1537405507285},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1537405507287},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1537405507285},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537405507286},{"_id":"themes/next/source/js/src/md5.min.js","hash":"222c79d6a221eb9a3ada9a75379c9e1d61a52063","modified":1537548192810},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1537405507287},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1537405507286},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1537405507286},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1537405507285},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1537405507287},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537405507291},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537405507303},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1537405507292},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1537405507298},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1537405507288},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537405507298},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1537405507288},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1537405507288},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1537405507288},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537405507316},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537405507317},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537405507315},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537405507317},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537405507316},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1537405507310},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1537405507310},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1537405507309},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1537405507310},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1537405507309},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1537405507310},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1537405507290},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1537405507290},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1537405507289},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537405507301},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1537405507299},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537405507300},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537405507300},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537405507301},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537405507302},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537405507302},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537405507302},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537405507300},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537405507301},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537405507301},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537405507300},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537405507301},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537405507302},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1537405507299},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1537405507306},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1537405507308},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1537405507306},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1537405507304},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1537405507304},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537405507303},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537405507304},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537405507303},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537405507299},{"_id":"source/_posts/171022/compaction.png","hash":"3fd6850a853280d6a863db80cd390475722e5427","modified":1537453242000},{"_id":"source/_posts/171210/统计局_query_row_count2.png","hash":"1f5ef7e600a6b3eb404cf2cc0c9ab93d0956dedc","modified":1537453242000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f62537206385cb00bcbe396a835535d7b294b578","modified":1537405507353},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537405507357},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537405507243},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1537405507243},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1537405507269},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1537405507250},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537405507251},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537405507250},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537405507251},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537405507250},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1537405507250},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537405507262},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537405507259},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537405507259},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537405507260},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537405507251},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537405507259},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537405507262},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1537405507275},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537405507278},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1537405507278},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1537405507276},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537405507277},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537405507277},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1537405507275},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1537405507272},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537405507272},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537405507271},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1537405507272},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537405507271},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1537405507271},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1537405507273},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537405507273},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1537405507274},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537405507273},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1537405507273},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1537405507273},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1537405507285},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1537405507311},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1537405507315},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1537405507311},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537405507294},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537405507294},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537405507294},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537405507293},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537405507293},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537405507294},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1537405507293},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1537405507294},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1537405507293},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1537405507289},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537405507289},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537405507316},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537405507316},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537405507316},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537405507309},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537405507308},{"_id":"source/_posts/171210/kairosdb.datastore.queries_waiting.png","hash":"126ddd1fcb159f486d6daf67c25dca5ce04ac08b","modified":1537453242000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1537405507312},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537405507305},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537405507324},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537405507320},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f62537206385cb00bcbe396a835535d7b294b578","modified":1537405507354},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537405507268},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1537405507268},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537405507268},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537405507267},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537405507268},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537405507267},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537405507267},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1537405507267},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537405507266},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537405507267},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1537405507254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1537405507253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1537405507252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537405507252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537405507252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537405507254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1537405507253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537405507252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537405507254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1537405507253},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537405507259},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537405507253},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1537405507258},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537405507259},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537405507257},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537405507257},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537405507257},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1537405507258},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1537405507255},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537405507255},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537405507255},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537405507256},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537405507258},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537405507262},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1537405507255},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1537405507260},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1537405507260},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537405507261},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537405507262},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537405507261},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537405507260},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537405507262},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537405507261},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1537405507265},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537405507264},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537405507263},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1537405507265},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537405507263},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537405507266},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537405507264},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537405507265},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537405507266},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"e6d4bdee6183fba28264d34b976dad9a92d8dfba","modified":1537541750697},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537405507277},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537405507275},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"735061227c281557bac768047b679fa079907edc","modified":1537449362886},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537405507271},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537405507312},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537405507313},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537405507314},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537405507314},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1537405507313},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537405507295},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537405507297},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1537405507297},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1537405507298},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537405507296},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1537405507296},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537405507320},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537405507326},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537405507322},{"_id":"themes/next/.git/objects/pack/pack-483e69441eebc7dbcda65cdaed376c2d7b233a33.idx","hash":"47ba91acfde23b3bc1c87674faa35b5580491963","modified":1537405507339},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1537405507291},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1537405507307},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1537405507318},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/搞笑.mp4","hash":"db4b82af627baee65a0775bf9331f3def0b38d60","modified":1543070507000},{"_id":"source/_posts/Java-8-HashMap（下）—— compute/IMG_0011.JPG","hash":"015f726d2885860a2d2b28cf07182268805d27d0","modified":1538634462000},{"_id":"source/_posts/Java-8-HashMap（下）—— compute/IMG_0007.JPG","hash":"3baa61bbcd8d1b0efa693c903cfb09675fe8c15d","modified":1538532619000},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/IMG_1753.GIF","hash":"573c9863b4ad90feb5ea8a10bf33fe7b0af2f56c","modified":1536021050000},{"_id":"source/_posts/Java-8-HashMap-上-——-红黑树/IMG_1756.GIF","hash":"e15dd4547e100b12523edcef2cc5bf048b610b62","modified":1536367870000},{"_id":"themes/next/.git/objects/pack/pack-483e69441eebc7dbcda65cdaed376c2d7b233a33.pack","hash":"d9e69c99d399b5bce1cab5f6f07ce106284673a7","modified":1537449278000},{"_id":"public/atom.xml","hash":"4a1737f6d81581afdba0cb546133b054c637909a","modified":1543071568140},{"_id":"public/about/index.html","hash":"5315f08696ed7a13362d97efb72d3980583cc29d","modified":1543070653223},{"_id":"public/categories/index.html","hash":"6ac9bbd21c1cb8f73cbbfde20164f42847384ba8","modified":1543070653224},{"_id":"public/tags/index.html","hash":"f033e320d3e2078f06b2d07d0984316443e4f45f","modified":1543070653224},{"_id":"public/2018/08/18/Java-7-HashMap-源码解读/index.html","hash":"cd156d4f58e5f7f50470bd5d4d4125f03e4d531b","modified":1543070653224},{"_id":"public/2018/06/24/React快速入门/index.html","hash":"14f433e87028085160e5adb07ef070494dfa3361","modified":1543070653225},{"_id":"public/2018/06/05/动物园管理员——ZooKeeper/index.html","hash":"6a5f48d30cac30fbc1b424908c45f9f558f2f4e7","modified":1543070653225},{"_id":"public/2018/05/27/MySQL究竟如何解决“不可重复读”和“幻读”的/index.html","hash":"b730a52cb634f1c2928d156de3ace5da39eceaf3","modified":1543070653225},{"_id":"public/2018/05/20/Linux中的top命令详解/index.html","hash":"f71ab00719ac50ed31f8904939dfb29fea237633","modified":1543070653225},{"_id":"public/2018/05/20/Linux-的-Cache、Buffer、MemAvailable、Swap简介/index.html","hash":"011fae7d9a9e5bbe484ec6b462c45ba877dd51de","modified":1543070653225},{"_id":"public/2018/05/13/克拉丝的面试/index.html","hash":"057fae6097cd97b619f4085fcf8c54db01a5b24e","modified":1543070653225},{"_id":"public/2018/05/10/工厂模式、简单工厂模式与抽象工厂模式/index.html","hash":"4b2ef0abf8cd06fcd74ed5e0fe2e19e312dccd5b","modified":1543070653225},{"_id":"public/2018/05/01/园丁与盆栽/index.html","hash":"567bb2468e48ac02653f9631189188fe82ccb35e","modified":1543070653225},{"_id":"public/2018/04/15/克拉丝的JVM工厂之旅（上）/index.html","hash":"c43d442e63ba145514f8aff11e302a3c6aa659cd","modified":1543070653225},{"_id":"public/categories/博客/index.html","hash":"4224c0867d636d5b5e688c3adbab1d73d4c12765","modified":1543070653225},{"_id":"public/categories/中间件/index.html","hash":"e511a8c051a782dbef5afb0c37c0f4e78d56920f","modified":1543070653225},{"_id":"public/categories/数据库/index.html","hash":"e135bfa3efda4a0b6fd5002ba1653ba6d391949f","modified":1543070653225},{"_id":"public/categories/Linux/index.html","hash":"a4829ae5a55d3dae329236ce70584434cd381df2","modified":1543070653225},{"_id":"public/categories/大数据/index.html","hash":"43a4dfd2f3f1f73840e70f79b91508ed466d429f","modified":1543070653225},{"_id":"public/categories/未分类/index.html","hash":"1e6db5156a35e54d3782cc813b576aa2d22275fe","modified":1543070653225},{"_id":"public/categories/前端/index.html","hash":"19270b2428504057da81a16f965af1f41ef07ac8","modified":1543070653225},{"_id":"public/categories/设计模式/index.html","hash":"c4c85d8e0899d14dd5d8b4cfd5c3dd92419759c2","modified":1543070653225},{"_id":"public/archives/2017/10/index.html","hash":"aac505b01d4cd81d2268ea377ba8f40441ea7d10","modified":1543070653225},{"_id":"public/archives/2017/09/index.html","hash":"0b2fa23c90a1684e993fd0e766f39e118878e22b","modified":1543070653225},{"_id":"public/archives/2017/11/index.html","hash":"3edf4fb8595232590f3c9940986c33486b59db7e","modified":1543070653225},{"_id":"public/archives/2017/12/index.html","hash":"fcf55f73b78fbc2e0d414409644b238db64829f3","modified":1543070653225},{"_id":"public/archives/page/3/index.html","hash":"a1fcbd59370864c7545c04bdfa70ab1e013b7f9c","modified":1543070653225},{"_id":"public/archives/2017/06/index.html","hash":"460fddbfc17fbaa4580590ca801bd743a4b4e488","modified":1543070653226},{"_id":"public/archives/2018/page/2/index.html","hash":"a9992628c18214583727ec6b7a17eb5fefb323b9","modified":1543070653226},{"_id":"public/archives/2018/06/index.html","hash":"d37c47a5a649a792df72cbab99c6075651ef7bbb","modified":1543070653226},{"_id":"public/archives/2018/08/index.html","hash":"4046cc32ea089c184ccbe2eb5f1885c1f3efa237","modified":1543070653226},{"_id":"public/archives/2018/04/index.html","hash":"9a5744f3f7e2570baf6f36bbe9b850c489c0d05f","modified":1543070653226},{"_id":"public/archives/2018/09/index.html","hash":"33a988775f3be65c0e87841783d9422fa5cac2fd","modified":1543070653226},{"_id":"public/public/tags/jekyll/index.html","hash":"5ab47ae372c53fcfc9245ab805e6e07c013b21e3","modified":1543070653226},{"_id":"public/archives/2018/11/index.html","hash":"f9582684b61fdee4f6fbeb04d6da4d002d13f66c","modified":1543070653226},{"_id":"public/archives/2018/10/index.html","hash":"03be0d7230a4f815581dd88c267942ad74e76fde","modified":1543070653226},{"_id":"public/public/tags/gitgub-page/index.html","hash":"cc95661bf209d84fc2278de65fec4bdbbaa44538","modified":1543070653226},{"_id":"public/public/tags/github/index.html","hash":"2aaea8bb17beb71669cc77e0b51c4ce7901d3d99","modified":1543070653226},{"_id":"public/public/tags/cassandra/index.html","hash":"26a59fbddfc8beda4bef79535ae3cbe0b359f06b","modified":1543070653226},{"_id":"public/public/tags/TScached/index.html","hash":"8dc8971ece67ed6f017e723a4904173cf10db56b","modified":1543070653226},{"_id":"public/public/tags/linux/index.html","hash":"0d842286030b2bf177047a3d838752346de693a6","modified":1543070653226},{"_id":"public/public/tags/cql/index.html","hash":"7464ea5bdfcc5e6bba6e1f7de7f04ce0b4580a71","modified":1543070653226},{"_id":"public/public/tags/dubbo/index.html","hash":"1e3e5c1a04d8dc508ed66efd626fc66abfe0bdac","modified":1543070653226},{"_id":"public/public/tags/踩坑记/index.html","hash":"1a377ac8bc9ba9aff215674941fbf9ad83d88ab9","modified":1543070653226},{"_id":"public/public/tags/jmeter/index.html","hash":"a05052fc71ea7aa72a29e73b32e2091af9b0fa7f","modified":1543070653226},{"_id":"public/public/tags/大数据/index.html","hash":"c2c4682dabf7e2589164b1b542579e91651ca421","modified":1543070653226},{"_id":"public/public/tags/java/index.html","hash":"140239da8fef781c9edc03b51d96afd1e829668c","modified":1543070653226},{"_id":"public/public/tags/spark/index.html","hash":"29a2babbafb9d33263471933f3b5ccb796d05039","modified":1543070653226},{"_id":"public/public/tags/Metric/index.html","hash":"78cc39fd15d6f1901e9a1e6779f463ea776f5c66","modified":1543070653226},{"_id":"public/public/tags/Java/index.html","hash":"022fe27c14b5b600c596000c167ae9b720a6cef3","modified":1543070653226},{"_id":"public/public/tags/HashMap/index.html","hash":"6e72bf502fb94dfab8d6025e2ef7469cf922abbd","modified":1543070653227},{"_id":"public/public/tags/kairosdb/index.html","hash":"abc0a2bc4ef9dcbfea9687e87802b12467e7dfba","modified":1543070653227},{"_id":"public/public/tags/BitMap/index.html","hash":"52ee2f11a9e59634543ba0ea93b4d13b5609103a","modified":1543070653227},{"_id":"public/public/tags/公众号文章/page/2/index.html","hash":"762cb4f93af67c87b1dedcc9dbecb94c040630dd","modified":1543070653227},{"_id":"public/public/tags/布隆过滤器/index.html","hash":"c07a30d30b2ab5dd28e7c4c47e6b0f9c149d3282","modified":1543070653227},{"_id":"public/public/tags/红黑树/index.html","hash":"9543358d1d6ffa6e792b0a6596cdfb94dcba3395","modified":1543070653227},{"_id":"public/public/tags/Linux/index.html","hash":"4f73329b39cc264f96ef5bb6f65b41a60a955c52","modified":1543070653227},{"_id":"public/public/tags/mysql/index.html","hash":"d6f6f4d2702fd767f7d6929e794b30753a03c599","modified":1543070653227},{"_id":"public/public/tags/Bloom-Filter/index.html","hash":"f3db17407bd5583953be149947f85a263c061c83","modified":1543070653227},{"_id":"public/public/tags/React/index.html","hash":"aeef6f8d0a87f657408dc81a1a63ac7b13418114","modified":1543070653227},{"_id":"public/public/tags/JVM/index.html","hash":"58f27b10c631148b5975186c8b893a9ed5a27060","modified":1543070653227},{"_id":"public/public/tags/ArrayList/index.html","hash":"ed98470077680370c0a72dec7e1828c39af7f0a9","modified":1543070653227},{"_id":"public/public/tags/类加载/index.html","hash":"bb7410bb267c0687aff39254d94adb814c53445f","modified":1543070653227},{"_id":"public/public/tags/BitSet/index.html","hash":"9d81917f13b979cd84816dd0c900c6b8ea662c62","modified":1543070653227},{"_id":"public/public/tags/ZooKeeper/index.html","hash":"f4a684d18a48dfe16101091923bc28911f5a9263","modified":1543070653227},{"_id":"public/public/tags/GC/index.html","hash":"090d50f82db8c0a982b3efc6d4ab1ba782e3b1a2","modified":1543070653227},{"_id":"public/public/tags/设计模式/index.html","hash":"287111cf92f4a50454f13fdcd7e17ab12db9fa4e","modified":1543070653227},{"_id":"public/2018/11/12/Java-ArrayList-源码解读/index.html","hash":"b8a9d352cda23fe8fdabe24d08df6013a181ed91","modified":1543070653227},{"_id":"public/2018/10/08/BitMap、BitSet与Bloom Filter/index.html","hash":"74d4a6086ec67eec91e5763d73227d73fdc3109f","modified":1543070653228},{"_id":"public/2018/09/24/Java-8-HashMap（下）—— compute/index.html","hash":"72d22df6d1a8604fac8fb38733b2fdd3016d56e1","modified":1543070653228},{"_id":"public/2018/09/24/Java-8-HashMap-上-——-红黑树/index.html","hash":"e26b29fd6280344796e673e0e9229860cb0bbb10","modified":1543070653228},{"_id":"public/2018/05/21/180521/index.html","hash":"ecc25112f70b6762b5255078ebfcdf81e0af5851","modified":1543070653228},{"_id":"public/2017/12/10/171210/index.html","hash":"ce782f26a131ca6a33932be3e956d7c73d9c0ba3","modified":1543070653228},{"_id":"public/2017/11/08/171108/index.html","hash":"6cbc8041bf2cc95d592e4cf0949ea079b5fec45c","modified":1543070653228},{"_id":"public/2017/10/22/171022/index.html","hash":"814d53c3ec615aba561d1f37392414ed24bc29d0","modified":1543070653228},{"_id":"public/2017/10/23/171023/index.html","hash":"33296f428bb6da264d2657856cd9be9a712e7cfb","modified":1543070653228},{"_id":"public/2017/09/28/170928/index.html","hash":"29df8e4a127f39ca6cc44931771816fb69d0569f","modified":1543070653228},{"_id":"public/2017/06/06/2017-06-06-doc/index.html","hash":"8b6b46ab456c2e4e4a93f5e91bb9d48c8d8309b1","modified":1543070653228},{"_id":"public/index.html","hash":"eb9d96ac5fc0e105953930b69d8c64b57707c813","modified":1543071568245},{"_id":"public/page/2/index.html","hash":"deb0ef28a5c2dcd5df9a69184eb63ad1d78a0683","modified":1543070653228},{"_id":"public/page/3/index.html","hash":"37f87601e30ce76655cfb0e68d18cbf40cf716c6","modified":1543070653228},{"_id":"public/2017/09/24/170924/index.html","hash":"29ab13a4f8374e7d1ed06072097fdc498be77aae","modified":1543070653228},{"_id":"public/2017/12/18/2017-12-18-doc/index.html","hash":"c938c0b5f485cafb47a1a1261f54d9eb2c962d4a","modified":1543070653228},{"_id":"public/archives/index.html","hash":"622b24f41afca8e52a778cbc4e7794e8ce062870","modified":1543070653228},{"_id":"public/categories/Java/index.html","hash":"e3d83fff994631941d2db212199d1fa64c10e02e","modified":1543070653228},{"_id":"public/archives/page/2/index.html","hash":"e87c91774d6e761c05304dcfae6142e8876e81ad","modified":1543070653228},{"_id":"public/archives/2017/index.html","hash":"7250ec086c3365dde15345c39a360bfe4bea6a43","modified":1543070653229},{"_id":"public/archives/2018/05/index.html","hash":"8998f493ef81d612bce73f8f7da35589995a5437","modified":1543070653229},{"_id":"public/archives/2018/index.html","hash":"a7a83163ad4bb049c6098b24bfcab2aae6674162","modified":1543070653229},{"_id":"public/public/tags/公众号文章/index.html","hash":"796d8a86c5daafc69e94aaf36df0e7fff454953d","modified":1543070653229},{"_id":"public/public/tags/volatile/index.html","hash":"111d107064be3a56cd5c90d0cf2835d828d0d196","modified":1543070653231},{"_id":"public/public/tags/多线程/index.html","hash":"d49363e0e8ed771608f780c0f86c9da5c175cae8","modified":1543070653231},{"_id":"public/public/tags/CAS/index.html","hash":"b844b8a5b2ee80884df66cfd5f2882d9e63e8638","modified":1543070653231},{"_id":"public/public/tags/ReentrantLock/index.html","hash":"652d1d0cd49127010bbba3a6fb4bc6b0e1fb3d2f","modified":1543070653231},{"_id":"public/public/tags/synchronized/index.html","hash":"1fc952418ded0766367d36dcf31918b8dd847209","modified":1543070653231},{"_id":"public/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/index.html","hash":"23dd871f2f9fdfcc5db89c466c5a82de0d097ec2","modified":1543071568245},{"_id":"public/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/synchronized.png","hash":"0f1b5840cd517d921f7b04c2a2486e8357823488","modified":1543070653236},{"_id":"public/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/concurrent包.png","hash":"66fb2ca325b7471509d12f0cc56263e37f5a0d12","modified":1543070653239},{"_id":"public/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/搞笑.mp4","hash":"db4b82af627baee65a0775bf9331f3def0b38d60","modified":1543070653304},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/img-6806f.gif","hash":"bffdc6652073b30c143a6fb5ac13fba4bde4410d","modified":1543071407000},{"_id":"public/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/img-6806f.gif","hash":"bffdc6652073b30c143a6fb5ac13fba4bde4410d","modified":1543071568255}],"Category":[{"name":"博客","_id":"cjovkdwsu0004ayqc0z4kx5v5"},{"name":"数据库","_id":"cjovkdwt3000aayqc02cnz9r0"},{"name":"中间件","_id":"cjovkdwtg000jayqcoa237zg7"},{"name":"未分类","_id":"cjovkdwtn000sayqcnpy8iy2k"},{"name":"Linux","_id":"cjovkdwtq000yayqczienuyv9"},{"name":"大数据","_id":"cjovkdwts0014ayqc0syrzz5g"},{"name":"Java","_id":"cjovkdwty001gayqcdgsu4ilk"},{"name":"前端","_id":"cjovkdwu40028ayqcfy8a2mib"},{"name":"设计模式","_id":"cjovkdwu7002payqc6nzax0zv"}],"Data":[],"Page":[{"title":"个人","date":"2014-12-22T04:39:04.000Z","type":"about","comments":0,"_content":"\n\n## 欢迎光临我的博客^_^\n\n\n##### 简介：\n\n这个博客目前主要有以下内容：\n\n1. 用来记录自己日常遇到的一些技术上的问题\n2. 读书笔记\n3. 记录生活中有趣、美好的事情\n\n##### about me:\n \n93年，在杭州\n \n \n\n##### 联系方式：\n\n邮箱: songjisong@foxmail.com\n\nfacebook: https://www.facebook.com/jisong.song.12\n\nQQ: 1185340883 \n\n**github**: https://github.com/JasonSongHoho\n","source":"about/index.md","raw":"---\ntitle: 个人\ndate: 2014-12-22 12:39:04\ntype: \"about\"\ncomments: false\n---\n\n\n## 欢迎光临我的博客^_^\n\n\n##### 简介：\n\n这个博客目前主要有以下内容：\n\n1. 用来记录自己日常遇到的一些技术上的问题\n2. 读书笔记\n3. 记录生活中有趣、美好的事情\n\n##### about me:\n \n93年，在杭州\n \n \n\n##### 联系方式：\n\n邮箱: songjisong@foxmail.com\n\nfacebook: https://www.facebook.com/jisong.song.12\n\nQQ: 1185340883 \n\n**github**: https://github.com/JasonSongHoho\n","updated":"2018-09-20T15:30:22.676Z","path":"about/index.html","layout":"page","_id":"cjovkdwso0000ayqc8oififnn","content":"<h2 id=\"欢迎光临我的博客\"><a href=\"#欢迎光临我的博客\" class=\"headerlink\" title=\"欢迎光临我的博客^_^\"></a>欢迎光临我的博客^_^</h2><h5 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h5><p>这个博客目前主要有以下内容：</p>\n<ol>\n<li>用来记录自己日常遇到的一些技术上的问题</li>\n<li>读书笔记</li>\n<li>记录生活中有趣、美好的事情</li>\n</ol>\n<h5 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me:\"></a>about me:</h5><p>93年，在杭州</p>\n<h5 id=\"联系方式：\"><a href=\"#联系方式：\" class=\"headerlink\" title=\"联系方式：\"></a>联系方式：</h5><p>邮箱: <a href=\"mailto:songjisong@foxmail.com\" target=\"_blank\" rel=\"noopener\">songjisong@foxmail.com</a></p>\n<p>facebook: <a href=\"https://www.facebook.com/jisong.song.12\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/jisong.song.12</a></p>\n<p>QQ: 1185340883 </p>\n<p><strong>github</strong>: <a href=\"https://github.com/JasonSongHoho\" target=\"_blank\" rel=\"noopener\">https://github.com/JasonSongHoho</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欢迎光临我的博客\"><a href=\"#欢迎光临我的博客\" class=\"headerlink\" title=\"欢迎光临我的博客^_^\"></a>欢迎光临我的博客^_^</h2><h5 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h5><p>这个博客目前主要有以下内容：</p>\n<ol>\n<li>用来记录自己日常遇到的一些技术上的问题</li>\n<li>读书笔记</li>\n<li>记录生活中有趣、美好的事情</li>\n</ol>\n<h5 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me:\"></a>about me:</h5><p>93年，在杭州</p>\n<h5 id=\"联系方式：\"><a href=\"#联系方式：\" class=\"headerlink\" title=\"联系方式：\"></a>联系方式：</h5><p>邮箱: <a href=\"mailto:songjisong@foxmail.com\" target=\"_blank\" rel=\"noopener\">songjisong@foxmail.com</a></p>\n<p>facebook: <a href=\"https://www.facebook.com/jisong.song.12\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/jisong.song.12</a></p>\n<p>QQ: 1185340883 </p>\n<p><strong>github</strong>: <a href=\"https://github.com/JasonSongHoho\" target=\"_blank\" rel=\"noopener\">https://github.com/JasonSongHoho</a></p>\n"},{"title":"分类","date":"2014-12-22T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-20T14:22:27.351Z","path":"categories/index.html","layout":"page","_id":"cjovkdwss0002ayqclrmmruj1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---\n","updated":"2018-09-20T14:22:27.351Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjovkdwsv0006ayqcsckv8sjr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"blogs_default","title":"使用jekyll 搭建一个github page","date":"2017-09-24T14:08:41.000Z","subtitle":"如何使用jekyll 搭建一个github page","_content":"\n **目录 (Table of Contents)**1\n------------------------------------------------\n  <div class=\"markdown-toc editormd-markdown-toc\">\n      <ul class=\"markdown-toc-list\">\n          <li><a class=\"toc-level-2\" href=\"#一-简介\" level=\"2\">一 简介:</a></li>\n          <li><a class=\"toc-level-2\" href=\"#二-GitHub page 是什么？Jekyll 是什么？\" level=\"2\">二 GitHub page 是什么？Jekyll 是什么？</a>\n          </li>\n          <li><a class=\"toc-level-2\" href=\"#三-前提\" level=\"2\">三 前提</a></li>\n          <li><a class=\"toc-level-2\" href=\"#四-GitHub page搭建\" level=\"2\">四 GitHub page搭建</a></li>\n          <li><a class=\"toc-level-2\" href=\"#五-环境搭建步骤\" level=\"2\">五 环境搭建步骤</a>\n              <ul>\n                  <li><a class=\"toc-level-4\" href=\"#安装 Ruby\" level=\"4\">安装 Ruby</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#安装 DevKit\" level=\"4\">安装 DevKit</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#安装 Jekyll\" level=\"4\">安装 Jekyll</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#启动 Jekyll\" level=\"4\">启动 Jekyll</a></li>\n              </ul>\n          </li>\n          <li><a class=\"toc-level-2\" href=\"#六-实用工具\" level=\"2\">六 实用工具</a></li>\n          <li><a class=\"toc-level-2\" href=\"#七-参考\" level=\"2\">七 参考</a>\n              <ul></ul>\n          </li>\n      </ul>\n  </div>\n\n\n## 一 简介\n\n>相信大家都有过搭建自己的技术博客的想法，但是实现起来却并不是那么容易，\n个人总结了一下，主要有两方面的原因：\n\n>1、建站需要购买域名和服务器，对于大多数人来说这应该算是一个基本没有什么收益的不大不小的支出，不太划算。 \\\n2、传统方式搭建一个自己的博客网站太繁琐。\n\n>基于以上原因，自己实现博客的过程充满阻碍。但是又不甘心于在CSDN、博客园等网站上用固定的博客模板。\n而本文介绍的方法可以完美解决上述问题，尽管功能上仍有所不足，但已足够强大。\n\n## 二 GitHub page 是什么？Jekyll 是什么？\n[Github Pages](https://pages.github.com/) 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github 上，你可以选择使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点。\n\n[Jekyll](http://jekyllcn.com/docs/home) 是一个简单的博客形态的静态站点生产机器。总之就是一个快速搭建web 网站的模板工具。而GitHub page正是基于它实现的。\n\n## 三 前提\n搭建GitHub page 首先需要注册一个[GitHub 账号](https://github.com/)，掌握git常用命令，掌握web开发基础知识，了解linux 基本命令，了解markdown基本用法。\n\n## 四 GitHub page搭建\n首先去注册一个github账号。一个简单的page demo步骤如下：\n\n- 登录到Github上，新建一个github项目\n\n{% asset_img  newgit1.png%}\n\n- **注意项目名必须与你的 github 账户名一致 **，点击create\n{% asset_img newgit2.png %}\n\n- 拷贝项目地址\n{% asset_img newgit3.png %}\n\n- 点击\"setting\"\n{% asset_img newgit4.png %}\n\n- 找到gitgub page ,检查是否为 master branch\n{% asset_img  newgit5.png%}\n\n- 此处使用idea clone git项目，没有idea可使用GitHub bash，参考命令：\n<pre><code class=\"shell\">\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/JasonSongHoho/jasonsonghoho.github.io.git\ngit push -u origin master\n </code></pre> \n\n{% asset_img  idea1.png%}\n\n- 粘贴刚才拷贝的项目地址\n{% asset_img  idea2.png%}\n\n- 新建一个html文件，命名为index，内容如图\n{% asset_img idea3.png %}\n\n- push项目代码\n{% asset_img idea4.png %}\n\n- 登录GitHub 查看 ，代码已提交\n{% asset_img  aftgit1.png%}\n\n- 访问 https://jasonsonghoho.github.io/ jasonsonghoho为你的账户名\n{% asset_img  aftgit2.png%}\n\n\n\n\n\n## 五 环境搭建步骤\nGitHub page的开发需要使用jekyll，因此，首先需要搭建好jekyll开发环境。这里介绍windows下的搭建步骤，mac 环境或者linux下搭建步骤相似，且出问题的概率更小。\n\n##### 步骤如下:\n+ 安装 Ruby \n+ 安装 DevKit \n+ 安装 Jekyll \n+ 启动 Jekyll \n\n\n\n####  安装 Ruby\nJekyll是一款基于Ruby的插件，安装Ruby是必须的. \n\n1. 前往 https://rubyinstaller.org/downloads/ , 在 “RubyInstallers” 部分，选择一个版本点击下载，“X86”代表32位机器版本，此处选择了“rubyinstaller-2.2.6-x64”版本。\n注意，**不要选择低于2.1 版本的**，我在安装jekyll时提示版本不能低于2.1。\n\n2.  执行安装包安装，考虑到win10下C盘下的文件访问可能需要管理员权限，安装目录我选择了D盘。\n注意，**不要使用带有空格的文件夹目录**，勾选 “Add Ruby executables to your PATH”，这样执行程序会被自动添加至 PATH 而避免不必要的麻烦。 \n{% asset_img  ruby-install.png%}\n\n3.  打开命令提示行 输入 `ruby -v` \n<pre><code class=\"shell\">\n    C:\\Users\\JasonSong\\Desktop>ruby -v\n    ruby 2.2.6p396 (2016-11-15 revision 56800) [x64-mingw32]\n </code></pre> \n\n#### 安装 DevKit\nDevKit 是一个在 Windows 上帮助简化安装及使用 Ruby C/C++ 扩展如 RDiscount 和 RedCloth 的工具箱。 详细的安装指南可以在程序的wiki 页面 阅读。\n\n1. 前往 https://rubyinstaller.org/downloads/ ,  下载DevKit 安装包。\n{% asset_img  devkit-inst.png%}\n\n2. 运行安装包并解压缩至某文件夹，如 D:\\DevKit\n   \n   通过初始化来创建 config.yml 文件。在命令行窗口内，输入下列命令：\n<pre><code class=\"shell\">\n    cd “DevKit”\n    ruby dk.rb init\n    ruby dk.rb review\n    ruby dk.rb install\n </code></pre> \n \n#### 安装 Jekyll\n确保 gem 已经正确安装\n<pre><code class=\"shell\">\ngem -v\ngem install jekyll\n </code></pre> \n \n#### 启动 Jekyll\n\n按照官方的 Jekyll 快速开始手册 的步骤， 一个新的 Jekyll 博客可以被建立并在localhost:4000浏览。\n<pre><code class=\"shell\">\njekyll new myblog\ncd myblog\njekyll serve\n </code></pre> \n可能会遇到服务器没有响应或者 443 等错误，这些都无需担心，多尝试几次就可以。\n\n\n## 六 实用工具\n- [Editor.md](https://pandao.github.io/editor.md/) 一个开源在线 Markdown 编辑器 \n- [Jekyll 使用参考](http://jekyllcn.com/docs/home/) \n- [Jekyll 主题](http://jekyllthemes.org/page2/)\n\n\n## 七 参考\n - [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n - [Windows 上安装 Jekyll](http://blog.csdn.net/rainloving/article/details/45745491)\n\n","source":"_posts/170924.md","raw":"---\nlayout: blogs_default\ntitle: 使用jekyll 搭建一个github page\ndate: 2017-09-24 22:08:41\nsubtitle: 如何使用jekyll 搭建一个github page\ntags:\n    - jekyll\n    - github\n    - gitgub page\ncategories:              \n- 博客 \n---\n\n **目录 (Table of Contents)**1\n------------------------------------------------\n  <div class=\"markdown-toc editormd-markdown-toc\">\n      <ul class=\"markdown-toc-list\">\n          <li><a class=\"toc-level-2\" href=\"#一-简介\" level=\"2\">一 简介:</a></li>\n          <li><a class=\"toc-level-2\" href=\"#二-GitHub page 是什么？Jekyll 是什么？\" level=\"2\">二 GitHub page 是什么？Jekyll 是什么？</a>\n          </li>\n          <li><a class=\"toc-level-2\" href=\"#三-前提\" level=\"2\">三 前提</a></li>\n          <li><a class=\"toc-level-2\" href=\"#四-GitHub page搭建\" level=\"2\">四 GitHub page搭建</a></li>\n          <li><a class=\"toc-level-2\" href=\"#五-环境搭建步骤\" level=\"2\">五 环境搭建步骤</a>\n              <ul>\n                  <li><a class=\"toc-level-4\" href=\"#安装 Ruby\" level=\"4\">安装 Ruby</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#安装 DevKit\" level=\"4\">安装 DevKit</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#安装 Jekyll\" level=\"4\">安装 Jekyll</a></li>\n                  <li><a class=\"toc-level-4\" href=\"#启动 Jekyll\" level=\"4\">启动 Jekyll</a></li>\n              </ul>\n          </li>\n          <li><a class=\"toc-level-2\" href=\"#六-实用工具\" level=\"2\">六 实用工具</a></li>\n          <li><a class=\"toc-level-2\" href=\"#七-参考\" level=\"2\">七 参考</a>\n              <ul></ul>\n          </li>\n      </ul>\n  </div>\n\n\n## 一 简介\n\n>相信大家都有过搭建自己的技术博客的想法，但是实现起来却并不是那么容易，\n个人总结了一下，主要有两方面的原因：\n\n>1、建站需要购买域名和服务器，对于大多数人来说这应该算是一个基本没有什么收益的不大不小的支出，不太划算。 \\\n2、传统方式搭建一个自己的博客网站太繁琐。\n\n>基于以上原因，自己实现博客的过程充满阻碍。但是又不甘心于在CSDN、博客园等网站上用固定的博客模板。\n而本文介绍的方法可以完美解决上述问题，尽管功能上仍有所不足，但已足够强大。\n\n## 二 GitHub page 是什么？Jekyll 是什么？\n[Github Pages](https://pages.github.com/) 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github 上，你可以选择使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点。\n\n[Jekyll](http://jekyllcn.com/docs/home) 是一个简单的博客形态的静态站点生产机器。总之就是一个快速搭建web 网站的模板工具。而GitHub page正是基于它实现的。\n\n## 三 前提\n搭建GitHub page 首先需要注册一个[GitHub 账号](https://github.com/)，掌握git常用命令，掌握web开发基础知识，了解linux 基本命令，了解markdown基本用法。\n\n## 四 GitHub page搭建\n首先去注册一个github账号。一个简单的page demo步骤如下：\n\n- 登录到Github上，新建一个github项目\n\n{% asset_img  newgit1.png%}\n\n- **注意项目名必须与你的 github 账户名一致 **，点击create\n{% asset_img newgit2.png %}\n\n- 拷贝项目地址\n{% asset_img newgit3.png %}\n\n- 点击\"setting\"\n{% asset_img newgit4.png %}\n\n- 找到gitgub page ,检查是否为 master branch\n{% asset_img  newgit5.png%}\n\n- 此处使用idea clone git项目，没有idea可使用GitHub bash，参考命令：\n<pre><code class=\"shell\">\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/JasonSongHoho/jasonsonghoho.github.io.git\ngit push -u origin master\n </code></pre> \n\n{% asset_img  idea1.png%}\n\n- 粘贴刚才拷贝的项目地址\n{% asset_img  idea2.png%}\n\n- 新建一个html文件，命名为index，内容如图\n{% asset_img idea3.png %}\n\n- push项目代码\n{% asset_img idea4.png %}\n\n- 登录GitHub 查看 ，代码已提交\n{% asset_img  aftgit1.png%}\n\n- 访问 https://jasonsonghoho.github.io/ jasonsonghoho为你的账户名\n{% asset_img  aftgit2.png%}\n\n\n\n\n\n## 五 环境搭建步骤\nGitHub page的开发需要使用jekyll，因此，首先需要搭建好jekyll开发环境。这里介绍windows下的搭建步骤，mac 环境或者linux下搭建步骤相似，且出问题的概率更小。\n\n##### 步骤如下:\n+ 安装 Ruby \n+ 安装 DevKit \n+ 安装 Jekyll \n+ 启动 Jekyll \n\n\n\n####  安装 Ruby\nJekyll是一款基于Ruby的插件，安装Ruby是必须的. \n\n1. 前往 https://rubyinstaller.org/downloads/ , 在 “RubyInstallers” 部分，选择一个版本点击下载，“X86”代表32位机器版本，此处选择了“rubyinstaller-2.2.6-x64”版本。\n注意，**不要选择低于2.1 版本的**，我在安装jekyll时提示版本不能低于2.1。\n\n2.  执行安装包安装，考虑到win10下C盘下的文件访问可能需要管理员权限，安装目录我选择了D盘。\n注意，**不要使用带有空格的文件夹目录**，勾选 “Add Ruby executables to your PATH”，这样执行程序会被自动添加至 PATH 而避免不必要的麻烦。 \n{% asset_img  ruby-install.png%}\n\n3.  打开命令提示行 输入 `ruby -v` \n<pre><code class=\"shell\">\n    C:\\Users\\JasonSong\\Desktop>ruby -v\n    ruby 2.2.6p396 (2016-11-15 revision 56800) [x64-mingw32]\n </code></pre> \n\n#### 安装 DevKit\nDevKit 是一个在 Windows 上帮助简化安装及使用 Ruby C/C++ 扩展如 RDiscount 和 RedCloth 的工具箱。 详细的安装指南可以在程序的wiki 页面 阅读。\n\n1. 前往 https://rubyinstaller.org/downloads/ ,  下载DevKit 安装包。\n{% asset_img  devkit-inst.png%}\n\n2. 运行安装包并解压缩至某文件夹，如 D:\\DevKit\n   \n   通过初始化来创建 config.yml 文件。在命令行窗口内，输入下列命令：\n<pre><code class=\"shell\">\n    cd “DevKit”\n    ruby dk.rb init\n    ruby dk.rb review\n    ruby dk.rb install\n </code></pre> \n \n#### 安装 Jekyll\n确保 gem 已经正确安装\n<pre><code class=\"shell\">\ngem -v\ngem install jekyll\n </code></pre> \n \n#### 启动 Jekyll\n\n按照官方的 Jekyll 快速开始手册 的步骤， 一个新的 Jekyll 博客可以被建立并在localhost:4000浏览。\n<pre><code class=\"shell\">\njekyll new myblog\ncd myblog\njekyll serve\n </code></pre> \n可能会遇到服务器没有响应或者 443 等错误，这些都无需担心，多尝试几次就可以。\n\n\n## 六 实用工具\n- [Editor.md](https://pandao.github.io/editor.md/) 一个开源在线 Markdown 编辑器 \n- [Jekyll 使用参考](http://jekyllcn.com/docs/home/) \n- [Jekyll 主题](http://jekyllthemes.org/page2/)\n\n\n## 七 参考\n - [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n - [Windows 上安装 Jekyll](http://blog.csdn.net/rainloving/article/details/45745491)\n\n","slug":"170924","published":1,"updated":"2018-09-20T15:23:28.312Z","comments":1,"photos":[],"link":"","_id":"cjovkdwsp0001ayqcalmfr45m","content":"<h2 id=\"目录-Table-of-Contents-1\"><a href=\"#目录-Table-of-Contents-1\" class=\"headerlink\" title=\" 目录 (Table of Contents)1\"></a> <strong>目录 (Table of Contents)</strong>1</h2>  <div class=\"markdown-toc editormd-markdown-toc\"><br>      <ul class=\"markdown-toc-list\"><br>          <li><a class=\"toc-level-2\" href=\"#一-简介\" level=\"2\">一 简介:</a></li><br>          <li><a class=\"toc-level-2\" href=\"#二-GitHub page 是什么？Jekyll 是什么？\" level=\"2\">二 GitHub page 是什么？Jekyll 是什么？</a><br>          </li><br>          <li><a class=\"toc-level-2\" href=\"#三-前提\" level=\"2\">三 前提</a></li><br>          <li><a class=\"toc-level-2\" href=\"#四-GitHub page搭建\" level=\"2\">四 GitHub page搭建</a></li><br>          <li><a class=\"toc-level-2\" href=\"#五-环境搭建步骤\" level=\"2\">五 环境搭建步骤</a><br>              <ul><br>                  <li><a class=\"toc-level-4\" href=\"#安装 Ruby\" level=\"4\">安装 Ruby</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#安装 DevKit\" level=\"4\">安装 DevKit</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#安装 Jekyll\" level=\"4\">安装 Jekyll</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#启动 Jekyll\" level=\"4\">启动 Jekyll</a></li><br>              </ul><br>          </li><br>          <li><a class=\"toc-level-2\" href=\"#六-实用工具\" level=\"2\">六 实用工具</a></li><br>          <li><a class=\"toc-level-2\" href=\"#七-参考\" level=\"2\">七 参考</a><br>              <ul></ul><br>          </li><br>      </ul><br>  </div>\n\n\n<h2 id=\"一-简介\"><a href=\"#一-简介\" class=\"headerlink\" title=\"一 简介\"></a>一 简介</h2><blockquote>\n<p>相信大家都有过搭建自己的技术博客的想法，但是实现起来却并不是那么容易，<br>个人总结了一下，主要有两方面的原因：</p>\n</blockquote>\n<blockquote>\n<p>1、建站需要购买域名和服务器，对于大多数人来说这应该算是一个基本没有什么收益的不大不小的支出，不太划算。 \\<br>2、传统方式搭建一个自己的博客网站太繁琐。</p>\n</blockquote>\n<blockquote>\n<p>基于以上原因，自己实现博客的过程充满阻碍。但是又不甘心于在CSDN、博客园等网站上用固定的博客模板。<br>而本文介绍的方法可以完美解决上述问题，尽管功能上仍有所不足，但已足够强大。</p>\n</blockquote>\n<h2 id=\"二-GitHub-page-是什么？Jekyll-是什么？\"><a href=\"#二-GitHub-page-是什么？Jekyll-是什么？\" class=\"headerlink\" title=\"二 GitHub page 是什么？Jekyll 是什么？\"></a>二 GitHub page 是什么？Jekyll 是什么？</h2><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github 上，你可以选择使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点。</p>\n<p><a href=\"http://jekyllcn.com/docs/home\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 是一个简单的博客形态的静态站点生产机器。总之就是一个快速搭建web 网站的模板工具。而GitHub page正是基于它实现的。</p>\n<h2 id=\"三-前提\"><a href=\"#三-前提\" class=\"headerlink\" title=\"三 前提\"></a>三 前提</h2><p>搭建GitHub page 首先需要注册一个<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub 账号</a>，掌握git常用命令，掌握web开发基础知识，了解linux 基本命令，了解markdown基本用法。</p>\n<h2 id=\"四-GitHub-page搭建\"><a href=\"#四-GitHub-page搭建\" class=\"headerlink\" title=\"四 GitHub page搭建\"></a>四 GitHub page搭建</h2><p>首先去注册一个github账号。一个简单的page demo步骤如下：</p>\n<ul>\n<li>登录到Github上，新建一个github项目</li>\n</ul>\n<img src=\"/2017/09/24/170924/newgit1.png\">\n<ul>\n<li><p><strong>注意项目名必须与你的 github 账户名一致 </strong>，点击create</p>\n<img src=\"/2017/09/24/170924/newgit2.png\">\n</li>\n<li><p>拷贝项目地址</p>\n<img src=\"/2017/09/24/170924/newgit3.png\">\n</li>\n<li><p>点击”setting”</p>\n<img src=\"/2017/09/24/170924/newgit4.png\">\n</li>\n<li><p>找到gitgub page ,检查是否为 master branch</p>\n<img src=\"/2017/09/24/170924/newgit5.png\">\n</li>\n<li><p>此处使用idea clone git项目，没有idea可使用GitHub bash，参考命令：</p>\n<pre><code class=\"shell\">\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/JasonSongHoho/jasonsonghoho.github.io.git\ngit push -u origin master\n</code></pre> \n\n</li>\n</ul>\n<img src=\"/2017/09/24/170924/idea1.png\">\n<ul>\n<li><p>粘贴刚才拷贝的项目地址</p>\n<img src=\"/2017/09/24/170924/idea2.png\">\n</li>\n<li><p>新建一个html文件，命名为index，内容如图</p>\n<img src=\"/2017/09/24/170924/idea3.png\">\n</li>\n<li><p>push项目代码</p>\n<img src=\"/2017/09/24/170924/idea4.png\">\n</li>\n<li><p>登录GitHub 查看 ，代码已提交</p>\n<img src=\"/2017/09/24/170924/aftgit1.png\">\n</li>\n<li><p>访问 <a href=\"https://jasonsonghoho.github.io/\">https://jasonsonghoho.github.io/</a> jasonsonghoho为你的账户名</p>\n<img src=\"/2017/09/24/170924/aftgit2.png\">\n</li>\n</ul>\n<h2 id=\"五-环境搭建步骤\"><a href=\"#五-环境搭建步骤\" class=\"headerlink\" title=\"五 环境搭建步骤\"></a>五 环境搭建步骤</h2><p>GitHub page的开发需要使用jekyll，因此，首先需要搭建好jekyll开发环境。这里介绍windows下的搭建步骤，mac 环境或者linux下搭建步骤相似，且出问题的概率更小。</p>\n<h5 id=\"步骤如下\"><a href=\"#步骤如下\" class=\"headerlink\" title=\"步骤如下:\"></a>步骤如下:</h5><ul>\n<li>安装 Ruby </li>\n<li>安装 DevKit </li>\n<li>安装 Jekyll </li>\n<li>启动 Jekyll </li>\n</ul>\n<h4 id=\"安装-Ruby\"><a href=\"#安装-Ruby\" class=\"headerlink\" title=\"安装 Ruby\"></a>安装 Ruby</h4><p>Jekyll是一款基于Ruby的插件，安装Ruby是必须的. </p>\n<ol>\n<li><p>前往 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://rubyinstaller.org/downloads/</a> , 在 “RubyInstallers” 部分，选择一个版本点击下载，“X86”代表32位机器版本，此处选择了“rubyinstaller-2.2.6-x64”版本。<br>注意，<strong>不要选择低于2.1 版本的</strong>，我在安装jekyll时提示版本不能低于2.1。</p>\n</li>\n<li><p>执行安装包安装，考虑到win10下C盘下的文件访问可能需要管理员权限，安装目录我选择了D盘。<br>注意，<strong>不要使用带有空格的文件夹目录</strong>，勾选 “Add Ruby executables to your PATH”，这样执行程序会被自动添加至 PATH 而避免不必要的麻烦。 </p>\n<img src=\"/2017/09/24/170924/ruby-install.png\">\n</li>\n<li><p>打开命令提示行 输入 <code>ruby -v</code> </p>\n<pre><code class=\"shell\">\nC:\\Users\\JasonSong\\Desktop>ruby -v\nruby 2.2.6p396 (2016-11-15 revision 56800) [x64-mingw32]\n</code></pre> \n\n</li>\n</ol>\n<h4 id=\"安装-DevKit\"><a href=\"#安装-DevKit\" class=\"headerlink\" title=\"安装 DevKit\"></a>安装 DevKit</h4><p>DevKit 是一个在 Windows 上帮助简化安装及使用 Ruby C/C++ 扩展如 RDiscount 和 RedCloth 的工具箱。 详细的安装指南可以在程序的wiki 页面 阅读。</p>\n<ol>\n<li><p>前往 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://rubyinstaller.org/downloads/</a> ,  下载DevKit 安装包。</p>\n<img src=\"/2017/09/24/170924/devkit-inst.png\">\n</li>\n<li><p>运行安装包并解压缩至某文件夹，如 D:\\DevKit</p>\n<p>通过初始化来创建 config.yml 文件。在命令行窗口内，输入下列命令：</p>\n<pre><code class=\"shell\">\n cd “DevKit”\n ruby dk.rb init\n ruby dk.rb review\n ruby dk.rb install\n</code></pre> \n\n</li>\n</ol>\n<h4 id=\"安装-Jekyll\"><a href=\"#安装-Jekyll\" class=\"headerlink\" title=\"安装 Jekyll\"></a>安装 Jekyll</h4><p>确保 gem 已经正确安装</p>\n<pre><code class=\"shell\">\ngem -v\ngem install jekyll\n </code></pre> \n\n<h4 id=\"启动-Jekyll\"><a href=\"#启动-Jekyll\" class=\"headerlink\" title=\"启动 Jekyll\"></a>启动 Jekyll</h4><p>按照官方的 Jekyll 快速开始手册 的步骤， 一个新的 Jekyll 博客可以被建立并在localhost:4000浏览。</p>\n<p><pre><code class=\"shell\"><br>jekyll new myblog<br>cd myblog<br>jekyll serve<br> </code></pre><br>可能会遇到服务器没有响应或者 443 等错误，这些都无需担心，多尝试几次就可以。</p>\n<h2 id=\"六-实用工具\"><a href=\"#六-实用工具\" class=\"headerlink\" title=\"六 实用工具\"></a>六 实用工具</h2><ul>\n<li><a href=\"https://pandao.github.io/editor.md/\" target=\"_blank\" rel=\"noopener\">Editor.md</a> 一个开源在线 Markdown 编辑器 </li>\n<li><a href=\"http://jekyllcn.com/docs/home/\" target=\"_blank\" rel=\"noopener\">Jekyll 使用参考</a> </li>\n<li><a href=\"http://jekyllthemes.org/page2/\" target=\"_blank\" rel=\"noopener\">Jekyll 主题</a></li>\n</ul>\n<h2 id=\"七-参考\"><a href=\"#七-参考\" class=\"headerlink\" title=\"七 参考\"></a>七 参考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></li>\n<li><a href=\"http://blog.csdn.net/rainloving/article/details/45745491\" target=\"_blank\" rel=\"noopener\">Windows 上安装 Jekyll</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents-1\"><a href=\"#目录-Table-of-Contents-1\" class=\"headerlink\" title=\" 目录 (Table of Contents)1\"></a> <strong>目录 (Table of Contents)</strong>1</h2>  <div class=\"markdown-toc editormd-markdown-toc\"><br>      <ul class=\"markdown-toc-list\"><br>          <li><a class=\"toc-level-2\" href=\"#一-简介\" level=\"2\">一 简介:</a></li><br>          <li><a class=\"toc-level-2\" href=\"#二-GitHub page 是什么？Jekyll 是什么？\" level=\"2\">二 GitHub page 是什么？Jekyll 是什么？</a><br>          </li><br>          <li><a class=\"toc-level-2\" href=\"#三-前提\" level=\"2\">三 前提</a></li><br>          <li><a class=\"toc-level-2\" href=\"#四-GitHub page搭建\" level=\"2\">四 GitHub page搭建</a></li><br>          <li><a class=\"toc-level-2\" href=\"#五-环境搭建步骤\" level=\"2\">五 环境搭建步骤</a><br>              <ul><br>                  <li><a class=\"toc-level-4\" href=\"#安装 Ruby\" level=\"4\">安装 Ruby</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#安装 DevKit\" level=\"4\">安装 DevKit</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#安装 Jekyll\" level=\"4\">安装 Jekyll</a></li><br>                  <li><a class=\"toc-level-4\" href=\"#启动 Jekyll\" level=\"4\">启动 Jekyll</a></li><br>              </ul><br>          </li><br>          <li><a class=\"toc-level-2\" href=\"#六-实用工具\" level=\"2\">六 实用工具</a></li><br>          <li><a class=\"toc-level-2\" href=\"#七-参考\" level=\"2\">七 参考</a><br>              <ul></ul><br>          </li><br>      </ul><br>  </div>\n\n\n<h2 id=\"一-简介\"><a href=\"#一-简介\" class=\"headerlink\" title=\"一 简介\"></a>一 简介</h2><blockquote>\n<p>相信大家都有过搭建自己的技术博客的想法，但是实现起来却并不是那么容易，<br>个人总结了一下，主要有两方面的原因：</p>\n</blockquote>\n<blockquote>\n<p>1、建站需要购买域名和服务器，对于大多数人来说这应该算是一个基本没有什么收益的不大不小的支出，不太划算。 \\<br>2、传统方式搭建一个自己的博客网站太繁琐。</p>\n</blockquote>\n<blockquote>\n<p>基于以上原因，自己实现博客的过程充满阻碍。但是又不甘心于在CSDN、博客园等网站上用固定的博客模板。<br>而本文介绍的方法可以完美解决上述问题，尽管功能上仍有所不足，但已足够强大。</p>\n</blockquote>\n<h2 id=\"二-GitHub-page-是什么？Jekyll-是什么？\"><a href=\"#二-GitHub-page-是什么？Jekyll-是什么？\" class=\"headerlink\" title=\"二 GitHub page 是什么？Jekyll 是什么？\"></a>二 GitHub page 是什么？Jekyll 是什么？</h2><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github 上，你可以选择使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点。</p>\n<p><a href=\"http://jekyllcn.com/docs/home\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 是一个简单的博客形态的静态站点生产机器。总之就是一个快速搭建web 网站的模板工具。而GitHub page正是基于它实现的。</p>\n<h2 id=\"三-前提\"><a href=\"#三-前提\" class=\"headerlink\" title=\"三 前提\"></a>三 前提</h2><p>搭建GitHub page 首先需要注册一个<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub 账号</a>，掌握git常用命令，掌握web开发基础知识，了解linux 基本命令，了解markdown基本用法。</p>\n<h2 id=\"四-GitHub-page搭建\"><a href=\"#四-GitHub-page搭建\" class=\"headerlink\" title=\"四 GitHub page搭建\"></a>四 GitHub page搭建</h2><p>首先去注册一个github账号。一个简单的page demo步骤如下：</p>\n<ul>\n<li>登录到Github上，新建一个github项目</li>\n</ul>\n<img src=\"/2017/09/24/170924/newgit1.png\">\n<ul>\n<li><p><strong>注意项目名必须与你的 github 账户名一致 </strong>，点击create</p>\n<img src=\"/2017/09/24/170924/newgit2.png\">\n</li>\n<li><p>拷贝项目地址</p>\n<img src=\"/2017/09/24/170924/newgit3.png\">\n</li>\n<li><p>点击”setting”</p>\n<img src=\"/2017/09/24/170924/newgit4.png\">\n</li>\n<li><p>找到gitgub page ,检查是否为 master branch</p>\n<img src=\"/2017/09/24/170924/newgit5.png\">\n</li>\n<li><p>此处使用idea clone git项目，没有idea可使用GitHub bash，参考命令：</p>\n<pre><code class=\"shell\">\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/JasonSongHoho/jasonsonghoho.github.io.git\ngit push -u origin master\n</code></pre> \n\n</li>\n</ul>\n<img src=\"/2017/09/24/170924/idea1.png\">\n<ul>\n<li><p>粘贴刚才拷贝的项目地址</p>\n<img src=\"/2017/09/24/170924/idea2.png\">\n</li>\n<li><p>新建一个html文件，命名为index，内容如图</p>\n<img src=\"/2017/09/24/170924/idea3.png\">\n</li>\n<li><p>push项目代码</p>\n<img src=\"/2017/09/24/170924/idea4.png\">\n</li>\n<li><p>登录GitHub 查看 ，代码已提交</p>\n<img src=\"/2017/09/24/170924/aftgit1.png\">\n</li>\n<li><p>访问 <a href=\"https://jasonsonghoho.github.io/\">https://jasonsonghoho.github.io/</a> jasonsonghoho为你的账户名</p>\n<img src=\"/2017/09/24/170924/aftgit2.png\">\n</li>\n</ul>\n<h2 id=\"五-环境搭建步骤\"><a href=\"#五-环境搭建步骤\" class=\"headerlink\" title=\"五 环境搭建步骤\"></a>五 环境搭建步骤</h2><p>GitHub page的开发需要使用jekyll，因此，首先需要搭建好jekyll开发环境。这里介绍windows下的搭建步骤，mac 环境或者linux下搭建步骤相似，且出问题的概率更小。</p>\n<h5 id=\"步骤如下\"><a href=\"#步骤如下\" class=\"headerlink\" title=\"步骤如下:\"></a>步骤如下:</h5><ul>\n<li>安装 Ruby </li>\n<li>安装 DevKit </li>\n<li>安装 Jekyll </li>\n<li>启动 Jekyll </li>\n</ul>\n<h4 id=\"安装-Ruby\"><a href=\"#安装-Ruby\" class=\"headerlink\" title=\"安装 Ruby\"></a>安装 Ruby</h4><p>Jekyll是一款基于Ruby的插件，安装Ruby是必须的. </p>\n<ol>\n<li><p>前往 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://rubyinstaller.org/downloads/</a> , 在 “RubyInstallers” 部分，选择一个版本点击下载，“X86”代表32位机器版本，此处选择了“rubyinstaller-2.2.6-x64”版本。<br>注意，<strong>不要选择低于2.1 版本的</strong>，我在安装jekyll时提示版本不能低于2.1。</p>\n</li>\n<li><p>执行安装包安装，考虑到win10下C盘下的文件访问可能需要管理员权限，安装目录我选择了D盘。<br>注意，<strong>不要使用带有空格的文件夹目录</strong>，勾选 “Add Ruby executables to your PATH”，这样执行程序会被自动添加至 PATH 而避免不必要的麻烦。 </p>\n<img src=\"/2017/09/24/170924/ruby-install.png\">\n</li>\n<li><p>打开命令提示行 输入 <code>ruby -v</code> </p>\n<pre><code class=\"shell\">\nC:\\Users\\JasonSong\\Desktop>ruby -v\nruby 2.2.6p396 (2016-11-15 revision 56800) [x64-mingw32]\n</code></pre> \n\n</li>\n</ol>\n<h4 id=\"安装-DevKit\"><a href=\"#安装-DevKit\" class=\"headerlink\" title=\"安装 DevKit\"></a>安装 DevKit</h4><p>DevKit 是一个在 Windows 上帮助简化安装及使用 Ruby C/C++ 扩展如 RDiscount 和 RedCloth 的工具箱。 详细的安装指南可以在程序的wiki 页面 阅读。</p>\n<ol>\n<li><p>前往 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://rubyinstaller.org/downloads/</a> ,  下载DevKit 安装包。</p>\n<img src=\"/2017/09/24/170924/devkit-inst.png\">\n</li>\n<li><p>运行安装包并解压缩至某文件夹，如 D:\\DevKit</p>\n<p>通过初始化来创建 config.yml 文件。在命令行窗口内，输入下列命令：</p>\n<pre><code class=\"shell\">\n cd “DevKit”\n ruby dk.rb init\n ruby dk.rb review\n ruby dk.rb install\n</code></pre> \n\n</li>\n</ol>\n<h4 id=\"安装-Jekyll\"><a href=\"#安装-Jekyll\" class=\"headerlink\" title=\"安装 Jekyll\"></a>安装 Jekyll</h4><p>确保 gem 已经正确安装</p>\n<pre><code class=\"shell\">\ngem -v\ngem install jekyll\n </code></pre> \n\n<h4 id=\"启动-Jekyll\"><a href=\"#启动-Jekyll\" class=\"headerlink\" title=\"启动 Jekyll\"></a>启动 Jekyll</h4><p>按照官方的 Jekyll 快速开始手册 的步骤， 一个新的 Jekyll 博客可以被建立并在localhost:4000浏览。</p>\n<p><pre><code class=\"shell\"><br>jekyll new myblog<br>cd myblog<br>jekyll serve<br> </code></pre><br>可能会遇到服务器没有响应或者 443 等错误，这些都无需担心，多尝试几次就可以。</p>\n<h2 id=\"六-实用工具\"><a href=\"#六-实用工具\" class=\"headerlink\" title=\"六 实用工具\"></a>六 实用工具</h2><ul>\n<li><a href=\"https://pandao.github.io/editor.md/\" target=\"_blank\" rel=\"noopener\">Editor.md</a> 一个开源在线 Markdown 编辑器 </li>\n<li><a href=\"http://jekyllcn.com/docs/home/\" target=\"_blank\" rel=\"noopener\">Jekyll 使用参考</a> </li>\n<li><a href=\"http://jekyllthemes.org/page2/\" target=\"_blank\" rel=\"noopener\">Jekyll 主题</a></li>\n</ul>\n<h2 id=\"七-参考\"><a href=\"#七-参考\" class=\"headerlink\" title=\"七 参考\"></a>七 参考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></li>\n<li><a href=\"http://blog.csdn.net/rainloving/article/details/45745491\" target=\"_blank\" rel=\"noopener\">Windows 上安装 Jekyll</a></li>\n</ul>\n"},{"layout":"blogs_default","title":"记一次store 指标库 线上故障的排查","subtitle":"cassandra 数据压实与TScached 使用","date":"2017-09-28T14:08:41.000Z","_content":"\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#环境\" level=\"2\">环境</a></li><li><a class=\"toc-level-2\" href=\"#问题&amp;分析&amp;解决\" level=\"2\">问题&amp;分析&amp;解决</a><ul><li><a class=\"toc-level-4\" href=\"#问题1\" level=\"4\">问题1</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#问题2\" level=\"4\">问题2</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#其他问题\" level=\"4\">其他问题</a></li><li><a class=\"toc-level-4\" href=\"#分析&amp;解决\" level=\"4\">分析&amp;解决</a></li></ul></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a></li><li><a class=\"toc-level-2\" href=\"#资料\" level=\"2\">资料</a><ul></ul></li></ul></div>\n\n\n## 环境\n统计局，三个节点配置一样：\n   - 内存：500+G\n   - CPU：4*13 core\n\nCassandra 、kaiorsdb  、指标库都是以集群模式部署在三台机器上。\n\n\n## 问题&分析&解决\n\n#### 问题1\n统计局 monitor线上环境 统计报表和仪表盘部分加载缓慢，加载时间在8秒左右。\n\n{% asset_img load_time.png 加载时间1 %}\n\n#### 分析\n\n首先看了指标库的reader 模块日志，发现query 大量timeout异常。\n\n```\n17-09-22 14:12:29.208 WARN  [DubboServerHandler-10.6.143.124:7513-thread-576] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryarguments: [e10adc3949ba59abbe56e057f20f88dd, DatapointQuery{metric='system.mem.pct_usage', time=DatapointQueryTime{start=1506060435275, end=1506060735275, interval=1, interval_unit='seconds', aggregator=AVG, align_start_time=false, align_sampling=false}, tags={tenantId=e10adc3949ba59abbe56e057f20f88dd}, groupBy=DatapointQueryGroupBy{tagKeys=[object]}, useCache=false}] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&application=indian-reader&default.accepts=1000&default.threadpool=cached&default.threads=500&default.timeout=5000&dubbo=2.8.4.170831&generic=false&interface=uyun.indian.reader.api.ReaderService&methods=queryByResId,query,queryAllMetrics,queryTags&pid=20707&revision=api&serialization=kryo&side=provider&timestamp=1505982696415, invoke elapsed 6361 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124\n17-09-22 14:13:00.201 WARN  [DubboServerHandler-10.6.143.124:7513-thread-568] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryAllMetricsarguments: [e10adc3949ba59abbe56e057f20f88dd] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&application=indian-reader&default.accepts=1000&default.threadpool=cached&default.threads=500&default.timeout=5000&dubbo=2.8.4.170831&generic=false&interface=uyun.indian.reader.api.ReaderService&methods=queryByResId,query,queryAllMetrics,queryTags&pid=20707&revision=api&serialization=kryo&side=provider&timestamp=1505982696415, invoke elapsed 6939 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124\n```\n\n#### 解决\n\nquery 使用的 kairosdb的读方法。[kairosdb wiki](https://github.com/kairosdb/kairosdb/wiki/Query-Performance)上指出，当指标的 tag/value 组合太大时，查询时将变得非常缓慢。\n而monitor报表 每次查询需要汇聚一天的数据。一天的指标数据量和读取时间如下：\n\n{% asset_img system.cpu.idle 2-3 no agg.png kairosdb query %}\n\n一种解决方法是使用[TScached](https://github.com/zachm/tscached)进行读取，tscached 是kairosdb 的一个缓存代理，加载速度可以是kairosdb的100倍（这是它自己说的，感觉有点夸张了）。\n指标库之前已经配置过 TScached，后来停用了。重新启用后，报表的加载速度明显加快，不再报超时。 \n\n```\n17-09-28 10:01:26.123 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* start report 2017-09-28 09:56:26 to 2017-09-28 10:01:26 *********************\n17-09-28 10:01:26.131 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.KairosdbReader, count=320, min=16ms, max=1496ms, avg=116.33ms, median=66.00ms, p75=156.00ms, p95=278.95ms, p99=889.79ms\n17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.query, count=592, min=16ms, max=1732ms, avg=105.24ms, median=62.00ms, p75=105.00ms, p95=276.05ms, p99=936.27ms\n17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryAllMetrics, count=1, min=4ms, max=4ms, avg=4.00ms, median=4.00ms, p75=4.00ms, p95=4.00ms, p99=4.00ms\n17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryByResId, count=2, min=2ms, max=40ms, avg=21.00ms, median=21.00ms, p75=40.00ms, p95=40.00ms, p99=40.00ms\n17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryTags, count=4, min=37ms, max=38ms, avg=37.50ms, median=37.50ms, p75=38.00ms, p95=38.00ms, p99=38.00ms\n17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.TScachedReader, count=272, min=22ms, max=1732ms, avg=91.88ms, median=57.00ms, p75=75.75ms, p95=241.05ms, p99=1092.88ms\n17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* end report *********************\n```\n\n#### 问题2\n\nquery 方法速度上来之后，发现queryAllMetrics 方法出现超时现象，按问题1的解决办法处理后，发现仍有问题，后改用读redis 缓存的方式后，暂时解决。\n但Cassandra的资源消耗仍比较大\n\n{% asset_img cassandra1.png Cassandra 资源消耗 %}\n\n{% asset_img cassandra2.png Cassandra 资源消耗 %}\n\n\n#### 分析\n\n查看Cassandra system日志后发现 kairosdb.data_points 表中存在大量[tombstone](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html)(墓碑)数据警告，严重影响了Cassandra性能。需对Cassandra 进行数据[compact](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)(压实)操作，以清除墓碑数据。\n在对数据进行压实操作之前，需要先[repair](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsRepairNodesManualRepair.html)(修复)。\n\n```\nWARN  [SharedPool-Worker-30] 2017-09-26 15:48:50,818 ReadCommand.java:481 - Read 1024 live rows and 22072 tombstone cells for query SELECT value FROM kairosdb.data_points WHERE key = 65313061646333393439626135396162626535366530353766323066383864647e73797374656d2e6e65742e62797465735f72637664000000015dc970d000000d6b6169726f735f646f75626c656465766963653d6962313a686f73743d646d3031646261646d30342e73746174732e676f762e636e3a69703d31302e362e3133342e38303a6f626a6563743d3539383763643931633633396438613830633433653631383a74656e616e7449643d65313061646333393439626135396162626535366530353766323066383864643a AND column1 >= 00000000 AND column1 <= 9dd94 (see tombstone_warn_threshold)\n```\n>在Cassandra中，一切都是写入，包括逻辑删除数据，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。 \n\n关于Cassandra 如何维护数据，可参考  [Cassandra 数据维护官方文档](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n#### 解决\n\n具体压实步骤如下：\n1.  cassandra 默认压缩周期为10天，首先将压缩周期设为1天，设置 gc_grace_seconds 参数，\n\n登录Cassandra:\n\n```\n./cqlsh host -u user -p pswd\n```\n\n设置kairosdb的表的压缩周期设为 一天（86400 s）: \n\n```\nalter table kairosdb.string_index with gc_grace_seconds = 86400;alter table kairosdb.data_points with GC_GRACE_SECONDS = 86400;alter table kairosdb.row_key_index with GC_GRACE_SECONDS = 86400;\n\n``` \n\n设置完后 ，运行`DESC kairosdb;`，可以看到 **gc_grace_seconds**已被设为86400；\n\n```\nCREATE TABLE kairosdb.string_index (\n    key blob,\n    column1 text,\n    value blob,\n    PRIMARY KEY (key, column1)\n) WITH COMPACT STORAGE\n    AND CLUSTERING ORDER BY (column1 ASC)\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND dclocal_read_repair_chance = 0.1\n    AND default_time_to_live = 0\n     AND gc_grace_seconds = 86400\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair_chance = 1.0\n    AND speculative_retry = 'NONE';\n\n```\n\n\n2.  为了统一各个节点的墓碑数据，需在各个节点上分别运行修复kairosdb下各个表，防止已删除数据重生;\n\n```\nnodetool  repair kairosdb row_key_index\nnodetool  repair kairosdb string_index\nnodetool  repair kairosdb data_points\n``` \n\n*此处运行修复时，三个节点的data_points表由于数据太大，一直没有完全修复成功（some repair failed ）。由于数据量较大，且接受删掉的数据再次恢复，此处采取的措施是忽略该表。\n\n3.  修复完后再分别进行压实操作:\n\n```\nnodetool  compact  kairosdb row_key_index\nnodetool  compact  kairosdb string_index\nnodetool  compact  kairosdb data_points\n```\n \n压实操作可用`nodetool  compactionstats` 和 `nodetool  compactionhistory`分别查看当前和历史的压实造作;\n\n{% asset_img compactionstats.png 压实状态 %}\n\n4.  开启自动压实操作（默认已开启）：`nodetool enableautocompaction` \n\n操作完后，Cassandra 会自动压缩一些其他表的数据。结束后，Cassandra 日志中data_points表 墓碑警告记录墓碑数量大幅变小，可以发现Cassandra对资源的占用变到正常水平。 \n\n\n#### 其他问题\n\n1.  cassandra 日志报：\n\n``\n INFO  [IndexSummaryManager:1] 2017-09-28 08:16:56,278 IndexSummaryRedistribution.java:74 - Redistributing index summaries\n INFO  [SharedPool-Worker-1] 2017-09-28 08:19:46,973 NoSpamLogger.java:91 - Maximum memory usage reached (536870912 bytes), cannot allocate chunk of 1048576 bytes\n``\n\n2.  Dubbo 消费者报：No provider available for the service。\n\n\n#### 分析&解决\n\n1.  调查得知，原因是file_cache_size_in_mb较小，文档中描述该参数是用来读[SSTables](https://stackoverflow.com/questions/2576012/what-is-an-sstable)(Sorted Strings Table , is a file of key/value string pairs, sorted by keys)的缓冲区：\n>file_cache_size_in_mb :(Default: Smaller of 1/4 heap or 512) Total memory to use for SSTable-reading buffers.\n\n调到1024 （M）后，不再报该问题\n\n2.  服务注册不到zookeeper 上，猜测可能是机器IO负载太大。\n执行`netstat -nat | awk '{print $6}' | sort | uniq -c | sort -n` ，可以看到 CLOSE_WAIT 连接太多：\n\n```\n[root@Uyun-DB2 logs]# netstat -nat | awk '{print $6}' | sort | uniq -c | sort -n\n      1 established)\n      1 Foreign\n      2 TIME_WAIT\n     47 LISTEN\n   1088 ESTABLISHED\n   3314 CLOSE_WAIT\n```\n\n`netstat -nat | grep CLOSE_WAIT` 后，发现是kairosdb 造成的（猜测是之前Cassandra负载太大造成 ），强行重启kairosdb 后，再启动指标库，服务正常。\n\n\n## 其他\n\n1.  kairosDB 作者建议采用[DateTieredCompactionStrategy](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction) (DTCS)压实策略，参考 [kairosDB Issue 23][1]。需要进一步研究。\n\n2.  还是会有 Cassandra 占CPU较高的现象，但日志正常，需要进一步研究。\n\n## 资料\n\n[Cassandra--How is data maintained](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n[操作Cassandra（3）-合并、压实](http://blog.csdn.net/nangongyanya/article/details/54018104)\n\n[Cassandra 的压缩策略STCS，LCS 和 DTCS](http://www.cnblogs.com/didda/p/4728588.html)\n\n[1]: https://github.com/kairosdb/kairosdb/issues/23 ","source":"_posts/170928.md","raw":"---\nlayout: blogs_default\ntitle: 记一次store 指标库 线上故障的排查\nsubtitle: cassandra 数据压实与TScached 使用\ndate: 2017-09-28 22:08:41\ntags:\n    - cassandra\n    - kairosdb\n    - TScached\n    - linux\ncategories:              \n- 数据库 \n---\n\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#环境\" level=\"2\">环境</a></li><li><a class=\"toc-level-2\" href=\"#问题&amp;分析&amp;解决\" level=\"2\">问题&amp;分析&amp;解决</a><ul><li><a class=\"toc-level-4\" href=\"#问题1\" level=\"4\">问题1</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#问题2\" level=\"4\">问题2</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#其他问题\" level=\"4\">其他问题</a></li><li><a class=\"toc-level-4\" href=\"#分析&amp;解决\" level=\"4\">分析&amp;解决</a></li></ul></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a></li><li><a class=\"toc-level-2\" href=\"#资料\" level=\"2\">资料</a><ul></ul></li></ul></div>\n\n\n## 环境\n统计局，三个节点配置一样：\n   - 内存：500+G\n   - CPU：4*13 core\n\nCassandra 、kaiorsdb  、指标库都是以集群模式部署在三台机器上。\n\n\n## 问题&分析&解决\n\n#### 问题1\n统计局 monitor线上环境 统计报表和仪表盘部分加载缓慢，加载时间在8秒左右。\n\n{% asset_img load_time.png 加载时间1 %}\n\n#### 分析\n\n首先看了指标库的reader 模块日志，发现query 大量timeout异常。\n\n```\n17-09-22 14:12:29.208 WARN  [DubboServerHandler-10.6.143.124:7513-thread-576] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryarguments: [e10adc3949ba59abbe56e057f20f88dd, DatapointQuery{metric='system.mem.pct_usage', time=DatapointQueryTime{start=1506060435275, end=1506060735275, interval=1, interval_unit='seconds', aggregator=AVG, align_start_time=false, align_sampling=false}, tags={tenantId=e10adc3949ba59abbe56e057f20f88dd}, groupBy=DatapointQueryGroupBy{tagKeys=[object]}, useCache=false}] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&application=indian-reader&default.accepts=1000&default.threadpool=cached&default.threads=500&default.timeout=5000&dubbo=2.8.4.170831&generic=false&interface=uyun.indian.reader.api.ReaderService&methods=queryByResId,query,queryAllMetrics,queryTags&pid=20707&revision=api&serialization=kryo&side=provider&timestamp=1505982696415, invoke elapsed 6361 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124\n17-09-22 14:13:00.201 WARN  [DubboServerHandler-10.6.143.124:7513-thread-568] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryAllMetricsarguments: [e10adc3949ba59abbe56e057f20f88dd] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&application=indian-reader&default.accepts=1000&default.threadpool=cached&default.threads=500&default.timeout=5000&dubbo=2.8.4.170831&generic=false&interface=uyun.indian.reader.api.ReaderService&methods=queryByResId,query,queryAllMetrics,queryTags&pid=20707&revision=api&serialization=kryo&side=provider&timestamp=1505982696415, invoke elapsed 6939 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124\n```\n\n#### 解决\n\nquery 使用的 kairosdb的读方法。[kairosdb wiki](https://github.com/kairosdb/kairosdb/wiki/Query-Performance)上指出，当指标的 tag/value 组合太大时，查询时将变得非常缓慢。\n而monitor报表 每次查询需要汇聚一天的数据。一天的指标数据量和读取时间如下：\n\n{% asset_img system.cpu.idle 2-3 no agg.png kairosdb query %}\n\n一种解决方法是使用[TScached](https://github.com/zachm/tscached)进行读取，tscached 是kairosdb 的一个缓存代理，加载速度可以是kairosdb的100倍（这是它自己说的，感觉有点夸张了）。\n指标库之前已经配置过 TScached，后来停用了。重新启用后，报表的加载速度明显加快，不再报超时。 \n\n```\n17-09-28 10:01:26.123 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* start report 2017-09-28 09:56:26 to 2017-09-28 10:01:26 *********************\n17-09-28 10:01:26.131 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.KairosdbReader, count=320, min=16ms, max=1496ms, avg=116.33ms, median=66.00ms, p75=156.00ms, p95=278.95ms, p99=889.79ms\n17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.query, count=592, min=16ms, max=1732ms, avg=105.24ms, median=62.00ms, p75=105.00ms, p95=276.05ms, p99=936.27ms\n17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryAllMetrics, count=1, min=4ms, max=4ms, avg=4.00ms, median=4.00ms, p75=4.00ms, p95=4.00ms, p99=4.00ms\n17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryByResId, count=2, min=2ms, max=40ms, avg=21.00ms, median=21.00ms, p75=40.00ms, p95=40.00ms, p99=40.00ms\n17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryTags, count=4, min=37ms, max=38ms, avg=37.50ms, median=37.50ms, p75=38.00ms, p95=38.00ms, p99=38.00ms\n17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.TScachedReader, count=272, min=22ms, max=1732ms, avg=91.88ms, median=57.00ms, p75=75.75ms, p95=241.05ms, p99=1092.88ms\n17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* end report *********************\n```\n\n#### 问题2\n\nquery 方法速度上来之后，发现queryAllMetrics 方法出现超时现象，按问题1的解决办法处理后，发现仍有问题，后改用读redis 缓存的方式后，暂时解决。\n但Cassandra的资源消耗仍比较大\n\n{% asset_img cassandra1.png Cassandra 资源消耗 %}\n\n{% asset_img cassandra2.png Cassandra 资源消耗 %}\n\n\n#### 分析\n\n查看Cassandra system日志后发现 kairosdb.data_points 表中存在大量[tombstone](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html)(墓碑)数据警告，严重影响了Cassandra性能。需对Cassandra 进行数据[compact](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)(压实)操作，以清除墓碑数据。\n在对数据进行压实操作之前，需要先[repair](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsRepairNodesManualRepair.html)(修复)。\n\n```\nWARN  [SharedPool-Worker-30] 2017-09-26 15:48:50,818 ReadCommand.java:481 - Read 1024 live rows and 22072 tombstone cells for query SELECT value FROM kairosdb.data_points WHERE key = 65313061646333393439626135396162626535366530353766323066383864647e73797374656d2e6e65742e62797465735f72637664000000015dc970d000000d6b6169726f735f646f75626c656465766963653d6962313a686f73743d646d3031646261646d30342e73746174732e676f762e636e3a69703d31302e362e3133342e38303a6f626a6563743d3539383763643931633633396438613830633433653631383a74656e616e7449643d65313061646333393439626135396162626535366530353766323066383864643a AND column1 >= 00000000 AND column1 <= 9dd94 (see tombstone_warn_threshold)\n```\n>在Cassandra中，一切都是写入，包括逻辑删除数据，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。 \n\n关于Cassandra 如何维护数据，可参考  [Cassandra 数据维护官方文档](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n#### 解决\n\n具体压实步骤如下：\n1.  cassandra 默认压缩周期为10天，首先将压缩周期设为1天，设置 gc_grace_seconds 参数，\n\n登录Cassandra:\n\n```\n./cqlsh host -u user -p pswd\n```\n\n设置kairosdb的表的压缩周期设为 一天（86400 s）: \n\n```\nalter table kairosdb.string_index with gc_grace_seconds = 86400;alter table kairosdb.data_points with GC_GRACE_SECONDS = 86400;alter table kairosdb.row_key_index with GC_GRACE_SECONDS = 86400;\n\n``` \n\n设置完后 ，运行`DESC kairosdb;`，可以看到 **gc_grace_seconds**已被设为86400；\n\n```\nCREATE TABLE kairosdb.string_index (\n    key blob,\n    column1 text,\n    value blob,\n    PRIMARY KEY (key, column1)\n) WITH COMPACT STORAGE\n    AND CLUSTERING ORDER BY (column1 ASC)\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND dclocal_read_repair_chance = 0.1\n    AND default_time_to_live = 0\n     AND gc_grace_seconds = 86400\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair_chance = 1.0\n    AND speculative_retry = 'NONE';\n\n```\n\n\n2.  为了统一各个节点的墓碑数据，需在各个节点上分别运行修复kairosdb下各个表，防止已删除数据重生;\n\n```\nnodetool  repair kairosdb row_key_index\nnodetool  repair kairosdb string_index\nnodetool  repair kairosdb data_points\n``` \n\n*此处运行修复时，三个节点的data_points表由于数据太大，一直没有完全修复成功（some repair failed ）。由于数据量较大，且接受删掉的数据再次恢复，此处采取的措施是忽略该表。\n\n3.  修复完后再分别进行压实操作:\n\n```\nnodetool  compact  kairosdb row_key_index\nnodetool  compact  kairosdb string_index\nnodetool  compact  kairosdb data_points\n```\n \n压实操作可用`nodetool  compactionstats` 和 `nodetool  compactionhistory`分别查看当前和历史的压实造作;\n\n{% asset_img compactionstats.png 压实状态 %}\n\n4.  开启自动压实操作（默认已开启）：`nodetool enableautocompaction` \n\n操作完后，Cassandra 会自动压缩一些其他表的数据。结束后，Cassandra 日志中data_points表 墓碑警告记录墓碑数量大幅变小，可以发现Cassandra对资源的占用变到正常水平。 \n\n\n#### 其他问题\n\n1.  cassandra 日志报：\n\n``\n INFO  [IndexSummaryManager:1] 2017-09-28 08:16:56,278 IndexSummaryRedistribution.java:74 - Redistributing index summaries\n INFO  [SharedPool-Worker-1] 2017-09-28 08:19:46,973 NoSpamLogger.java:91 - Maximum memory usage reached (536870912 bytes), cannot allocate chunk of 1048576 bytes\n``\n\n2.  Dubbo 消费者报：No provider available for the service。\n\n\n#### 分析&解决\n\n1.  调查得知，原因是file_cache_size_in_mb较小，文档中描述该参数是用来读[SSTables](https://stackoverflow.com/questions/2576012/what-is-an-sstable)(Sorted Strings Table , is a file of key/value string pairs, sorted by keys)的缓冲区：\n>file_cache_size_in_mb :(Default: Smaller of 1/4 heap or 512) Total memory to use for SSTable-reading buffers.\n\n调到1024 （M）后，不再报该问题\n\n2.  服务注册不到zookeeper 上，猜测可能是机器IO负载太大。\n执行`netstat -nat | awk '{print $6}' | sort | uniq -c | sort -n` ，可以看到 CLOSE_WAIT 连接太多：\n\n```\n[root@Uyun-DB2 logs]# netstat -nat | awk '{print $6}' | sort | uniq -c | sort -n\n      1 established)\n      1 Foreign\n      2 TIME_WAIT\n     47 LISTEN\n   1088 ESTABLISHED\n   3314 CLOSE_WAIT\n```\n\n`netstat -nat | grep CLOSE_WAIT` 后，发现是kairosdb 造成的（猜测是之前Cassandra负载太大造成 ），强行重启kairosdb 后，再启动指标库，服务正常。\n\n\n## 其他\n\n1.  kairosDB 作者建议采用[DateTieredCompactionStrategy](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction) (DTCS)压实策略，参考 [kairosDB Issue 23][1]。需要进一步研究。\n\n2.  还是会有 Cassandra 占CPU较高的现象，但日志正常，需要进一步研究。\n\n## 资料\n\n[Cassandra--How is data maintained](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n[操作Cassandra（3）-合并、压实](http://blog.csdn.net/nangongyanya/article/details/54018104)\n\n[Cassandra 的压缩策略STCS，LCS 和 DTCS](http://www.cnblogs.com/didda/p/4728588.html)\n\n[1]: https://github.com/kairosdb/kairosdb/issues/23 ","slug":"170928","published":1,"updated":"2018-09-20T15:23:28.336Z","comments":1,"photos":[],"link":"","_id":"cjovkdwss0003ayqcdxdvup8w","content":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#环境\" level=\"2\">环境</a></li><li><a class=\"toc-level-2\" href=\"#问题&amp;分析&amp;解决\" level=\"2\">问题&amp;分析&amp;解决</a><ul><li><a class=\"toc-level-4\" href=\"#问题1\" level=\"4\">问题1</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#问题2\" level=\"4\">问题2</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#其他问题\" level=\"4\">其他问题</a></li><li><a class=\"toc-level-4\" href=\"#分析&amp;解决\" level=\"4\">分析&amp;解决</a></li></ul></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a></li><li><a class=\"toc-level-2\" href=\"#资料\" level=\"2\">资料</a><ul></ul></li></ul></div>\n\n\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>统计局，三个节点配置一样：</p>\n<ul>\n<li>内存：500+G</li>\n<li>CPU：4*13 core</li>\n</ul>\n<p>Cassandra 、kaiorsdb  、指标库都是以集群模式部署在三台机器上。</p>\n<h2 id=\"问题-amp-分析-amp-解决\"><a href=\"#问题-amp-分析-amp-解决\" class=\"headerlink\" title=\"问题&amp;分析&amp;解决\"></a>问题&amp;分析&amp;解决</h2><h4 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h4><p>统计局 monitor线上环境 统计报表和仪表盘部分加载缓慢，加载时间在8秒左右。</p>\n<img src=\"/2017/09/28/170928/load_time.png\" title=\"加载时间1\">\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>首先看了指标库的reader 模块日志，发现query 大量timeout异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17-09-22 14:12:29.208 WARN  [DubboServerHandler-10.6.143.124:7513-thread-576] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryarguments: [e10adc3949ba59abbe56e057f20f88dd, DatapointQuery&#123;metric=&apos;system.mem.pct_usage&apos;, time=DatapointQueryTime&#123;start=1506060435275, end=1506060735275, interval=1, interval_unit=&apos;seconds&apos;, aggregator=AVG, align_start_time=false, align_sampling=false&#125;, tags=&#123;tenantId=e10adc3949ba59abbe56e057f20f88dd&#125;, groupBy=DatapointQueryGroupBy&#123;tagKeys=[object]&#125;, useCache=false&#125;] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&amp;application=indian-reader&amp;default.accepts=1000&amp;default.threadpool=cached&amp;default.threads=500&amp;default.timeout=5000&amp;dubbo=2.8.4.170831&amp;generic=false&amp;interface=uyun.indian.reader.api.ReaderService&amp;methods=queryByResId,query,queryAllMetrics,queryTags&amp;pid=20707&amp;revision=api&amp;serialization=kryo&amp;side=provider&amp;timestamp=1505982696415, invoke elapsed 6361 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124</span><br><span class=\"line\">17-09-22 14:13:00.201 WARN  [DubboServerHandler-10.6.143.124:7513-thread-568] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryAllMetricsarguments: [e10adc3949ba59abbe56e057f20f88dd] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&amp;application=indian-reader&amp;default.accepts=1000&amp;default.threadpool=cached&amp;default.threads=500&amp;default.timeout=5000&amp;dubbo=2.8.4.170831&amp;generic=false&amp;interface=uyun.indian.reader.api.ReaderService&amp;methods=queryByResId,query,queryAllMetrics,queryTags&amp;pid=20707&amp;revision=api&amp;serialization=kryo&amp;side=provider&amp;timestamp=1505982696415, invoke elapsed 6939 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>query 使用的 kairosdb的读方法。<a href=\"https://github.com/kairosdb/kairosdb/wiki/Query-Performance\" target=\"_blank\" rel=\"noopener\">kairosdb wiki</a>上指出，当指标的 tag/value 组合太大时，查询时将变得非常缓慢。<br>而monitor报表 每次查询需要汇聚一天的数据。一天的指标数据量和读取时间如下：</p>\n\n<p>一种解决方法是使用<a href=\"https://github.com/zachm/tscached\" target=\"_blank\" rel=\"noopener\">TScached</a>进行读取，tscached 是kairosdb 的一个缓存代理，加载速度可以是kairosdb的100倍（这是它自己说的，感觉有点夸张了）。<br>指标库之前已经配置过 TScached，后来停用了。重新启用后，报表的加载速度明显加快，不再报超时。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17-09-28 10:01:26.123 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* start report 2017-09-28 09:56:26 to 2017-09-28 10:01:26 *********************</span><br><span class=\"line\">17-09-28 10:01:26.131 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.KairosdbReader, count=320, min=16ms, max=1496ms, avg=116.33ms, median=66.00ms, p75=156.00ms, p95=278.95ms, p99=889.79ms</span><br><span class=\"line\">17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.query, count=592, min=16ms, max=1732ms, avg=105.24ms, median=62.00ms, p75=105.00ms, p95=276.05ms, p99=936.27ms</span><br><span class=\"line\">17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryAllMetrics, count=1, min=4ms, max=4ms, avg=4.00ms, median=4.00ms, p75=4.00ms, p95=4.00ms, p99=4.00ms</span><br><span class=\"line\">17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryByResId, count=2, min=2ms, max=40ms, avg=21.00ms, median=21.00ms, p75=40.00ms, p95=40.00ms, p99=40.00ms</span><br><span class=\"line\">17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryTags, count=4, min=37ms, max=38ms, avg=37.50ms, median=37.50ms, p75=38.00ms, p95=38.00ms, p99=38.00ms</span><br><span class=\"line\">17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.TScachedReader, count=272, min=22ms, max=1732ms, avg=91.88ms, median=57.00ms, p75=75.75ms, p95=241.05ms, p99=1092.88ms</span><br><span class=\"line\">17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* end report *********************</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p>query 方法速度上来之后，发现queryAllMetrics 方法出现超时现象，按问题1的解决办法处理后，发现仍有问题，后改用读redis 缓存的方式后，暂时解决。<br>但Cassandra的资源消耗仍比较大</p>\n<img src=\"/2017/09/28/170928/cassandra1.png\" title=\"Cassandra 资源消耗\">\n<img src=\"/2017/09/28/170928/cassandra2.png\" title=\"Cassandra 资源消耗\">\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>查看Cassandra system日志后发现 kairosdb.data_points 表中存在大量<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html\" target=\"_blank\" rel=\"noopener\">tombstone</a>(墓碑)数据警告，严重影响了Cassandra性能。需对Cassandra 进行数据<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">compact</a>(压实)操作，以清除墓碑数据。<br>在对数据进行压实操作之前，需要先<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsRepairNodesManualRepair.html\" target=\"_blank\" rel=\"noopener\">repair</a>(修复)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  [SharedPool-Worker-30] 2017-09-26 15:48:50,818 ReadCommand.java:481 - Read 1024 live rows and 22072 tombstone cells for query SELECT value FROM kairosdb.data_points WHERE key = 65313061646333393439626135396162626535366530353766323066383864647e73797374656d2e6e65742e62797465735f72637664000000015dc970d000000d6b6169726f735f646f75626c656465766963653d6962313a686f73743d646d3031646261646d30342e73746174732e676f762e636e3a69703d31302e362e3133342e38303a6f626a6563743d3539383763643931633633396438613830633433653631383a74656e616e7449643d65313061646333393439626135396162626535366530353766323066383864643a AND column1 &gt;= 00000000 AND column1 &lt;= 9dd94 (see tombstone_warn_threshold)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Cassandra中，一切都是写入，包括逻辑删除数据，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。 </p>\n</blockquote>\n<p>关于Cassandra 如何维护数据，可参考  <a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra 数据维护官方文档</a></p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>具体压实步骤如下：</p>\n<ol>\n<li>cassandra 默认压缩周期为10天，首先将压缩周期设为1天，设置 gc_grace_seconds 参数，</li>\n</ol>\n<p>登录Cassandra:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cqlsh host -u user -p pswd</span><br></pre></td></tr></table></figure>\n<p>设置kairosdb的表的压缩周期设为 一天（86400 s）: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table kairosdb.string_index with gc_grace_seconds = 86400;alter table kairosdb.data_points with GC_GRACE_SECONDS = 86400;alter table kairosdb.row_key_index with GC_GRACE_SECONDS = 86400;</span><br><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">设置完后 ，运行`DESC kairosdb;`，可以看到 **gc_grace_seconds**已被设为86400；</span><br></pre></td></tr></table></figure>\n<p>CREATE TABLE kairosdb.string_index (<br>    key blob,<br>    column1 text,<br>    value blob,<br>    PRIMARY KEY (key, column1)<br>) WITH COMPACT STORAGE<br>    AND CLUSTERING ORDER BY (column1 ASC)<br>    AND bloom_filter_fp_chance = 0.01<br>    AND caching = {‘keys’: ‘ALL’, ‘rows_per_partition’: ‘NONE’}<br>    AND comment = ‘’<br>    AND compaction = {‘class’: ‘org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy’, ‘max_threshold’: ‘32’, ‘min_threshold’: ‘4’}<br>    AND compression = {‘chunk_length_in_kb’: ‘64’, ‘class’: ‘org.apache.cassandra.io.compress.LZ4Compressor’}<br>    AND crc_check_chance = 1.0<br>    AND dclocal_read_repair_chance = 0.1<br>    AND default_time_to_live = 0<br>     AND gc_grace_seconds = 86400<br>    AND max_index_interval = 2048<br>    AND memtable_flush_period_in_ms = 0<br>    AND min_index_interval = 128<br>    AND read_repair_chance = 1.0<br>    AND speculative_retry = ‘NONE’;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.  为了统一各个节点的墓碑数据，需在各个节点上分别运行修复kairosdb下各个表，防止已删除数据重生;</span><br></pre></td></tr></table></figure>\n<p>nodetool  repair kairosdb row_key_index<br>nodetool  repair kairosdb string_index<br>nodetool  repair kairosdb data_points<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*此处运行修复时，三个节点的data_points表由于数据太大，一直没有完全修复成功（some repair failed ）。由于数据量较大，且接受删掉的数据再次恢复，此处采取的措施是忽略该表。</span><br><span class=\"line\"></span><br><span class=\"line\">3.  修复完后再分别进行压实操作:</span><br></pre></td></tr></table></figure></p>\n<p>nodetool  compact  kairosdb row_key_index<br>nodetool  compact  kairosdb string_index<br>nodetool  compact  kairosdb data_points<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">压实操作可用`nodetool  compactionstats` 和 `nodetool  compactionhistory`分别查看当前和历史的压实造作;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% asset_img compactionstats.png 压实状态 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4.  开启自动压实操作（默认已开启）：`nodetool enableautocompaction` </span><br><span class=\"line\"></span><br><span class=\"line\">操作完后，Cassandra 会自动压缩一些其他表的数据。结束后，Cassandra 日志中data_points表 墓碑警告记录墓碑数量大幅变小，可以发现Cassandra对资源的占用变到正常水平。 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 其他问题</span><br><span class=\"line\"></span><br><span class=\"line\">1.  cassandra 日志报：</span><br><span class=\"line\"></span><br><span class=\"line\">``</span><br><span class=\"line\"> INFO  [IndexSummaryManager:1] 2017-09-28 08:16:56,278 IndexSummaryRedistribution.java:74 - Redistributing index summaries</span><br><span class=\"line\"> INFO  [SharedPool-Worker-1] 2017-09-28 08:19:46,973 NoSpamLogger.java:91 - Maximum memory usage reached (536870912 bytes), cannot allocate chunk of 1048576 bytes</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">2.  Dubbo 消费者报：No provider available for the service。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 分析&amp;解决</span><br><span class=\"line\"></span><br><span class=\"line\">1.  调查得知，原因是file_cache_size_in_mb较小，文档中描述该参数是用来读[SSTables](https://stackoverflow.com/questions/2576012/what-is-an-sstable)(Sorted Strings Table , is a file of key/value string pairs, sorted by keys)的缓冲区：</span><br><span class=\"line\">&gt;file_cache_size_in_mb :(Default: Smaller of 1/4 heap or 512) Total memory to use for SSTable-reading buffers.</span><br><span class=\"line\"></span><br><span class=\"line\">调到1024 （M）后，不再报该问题</span><br><span class=\"line\"></span><br><span class=\"line\">2.  服务注册不到zookeeper 上，猜测可能是机器IO负载太大。</span><br><span class=\"line\">执行`netstat -nat | awk &apos;&#123;print $6&#125;&apos; | sort | uniq -c | sort -n` ，可以看到 CLOSE_WAIT 连接太多：</span><br></pre></td></tr></table></figure></p>\n<p>[root@Uyun-DB2 logs]# netstat -nat | awk ‘{print $6}’ | sort | uniq -c | sort -n<br>      1 established)<br>      1 Foreign<br>      2 TIME_WAIT<br>     47 LISTEN<br>   1088 ESTABLISHED<br>   3314 CLOSE_WAIT<br><code>`</code></p>\n<p><code>netstat -nat | grep CLOSE_WAIT</code> 后，发现是kairosdb 造成的（猜测是之前Cassandra负载太大造成 ），强行重启kairosdb 后，再启动指标库，服务正常。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>kairosDB 作者建议采用<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction\" target=\"_blank\" rel=\"noopener\">DateTieredCompactionStrategy</a> (DTCS)压实策略，参考 <a href=\"https://github.com/kairosdb/kairosdb/issues/23\" target=\"_blank\" rel=\"noopener\">kairosDB Issue 23</a>。需要进一步研究。</p>\n</li>\n<li><p>还是会有 Cassandra 占CPU较高的现象，但日志正常，需要进一步研究。</p>\n</li>\n</ol>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><p><a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra–How is data maintained</a></p>\n<p><a href=\"http://blog.csdn.net/nangongyanya/article/details/54018104\" target=\"_blank\" rel=\"noopener\">操作Cassandra（3）-合并、压实</a></p>\n<p><a href=\"http://www.cnblogs.com/didda/p/4728588.html\" target=\"_blank\" rel=\"noopener\">Cassandra 的压缩策略STCS，LCS 和 DTCS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#环境\" level=\"2\">环境</a></li><li><a class=\"toc-level-2\" href=\"#问题&amp;分析&amp;解决\" level=\"2\">问题&amp;分析&amp;解决</a><ul><li><a class=\"toc-level-4\" href=\"#问题1\" level=\"4\">问题1</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#问题2\" level=\"4\">问题2</a></li><li><a class=\"toc-level-4\" href=\"#分析\" level=\"4\">分析</a></li><li><a class=\"toc-level-4\" href=\"#解决\" level=\"4\">解决</a></li><li><a class=\"toc-level-4\" href=\"#其他问题\" level=\"4\">其他问题</a></li><li><a class=\"toc-level-4\" href=\"#分析&amp;解决\" level=\"4\">分析&amp;解决</a></li></ul></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a></li><li><a class=\"toc-level-2\" href=\"#资料\" level=\"2\">资料</a><ul></ul></li></ul></div>\n\n\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>统计局，三个节点配置一样：</p>\n<ul>\n<li>内存：500+G</li>\n<li>CPU：4*13 core</li>\n</ul>\n<p>Cassandra 、kaiorsdb  、指标库都是以集群模式部署在三台机器上。</p>\n<h2 id=\"问题-amp-分析-amp-解决\"><a href=\"#问题-amp-分析-amp-解决\" class=\"headerlink\" title=\"问题&amp;分析&amp;解决\"></a>问题&amp;分析&amp;解决</h2><h4 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h4><p>统计局 monitor线上环境 统计报表和仪表盘部分加载缓慢，加载时间在8秒左右。</p>\n<img src=\"/2017/09/28/170928/load_time.png\" title=\"加载时间1\">\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>首先看了指标库的reader 模块日志，发现query 大量timeout异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17-09-22 14:12:29.208 WARN  [DubboServerHandler-10.6.143.124:7513-thread-576] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryarguments: [e10adc3949ba59abbe56e057f20f88dd, DatapointQuery&#123;metric=&apos;system.mem.pct_usage&apos;, time=DatapointQueryTime&#123;start=1506060435275, end=1506060735275, interval=1, interval_unit=&apos;seconds&apos;, aggregator=AVG, align_start_time=false, align_sampling=false&#125;, tags=&#123;tenantId=e10adc3949ba59abbe56e057f20f88dd&#125;, groupBy=DatapointQueryGroupBy&#123;tagKeys=[object]&#125;, useCache=false&#125;] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&amp;application=indian-reader&amp;default.accepts=1000&amp;default.threadpool=cached&amp;default.threads=500&amp;default.timeout=5000&amp;dubbo=2.8.4.170831&amp;generic=false&amp;interface=uyun.indian.reader.api.ReaderService&amp;methods=queryByResId,query,queryAllMetrics,queryTags&amp;pid=20707&amp;revision=api&amp;serialization=kryo&amp;side=provider&amp;timestamp=1505982696415, invoke elapsed 6361 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124</span><br><span class=\"line\">17-09-22 14:13:00.201 WARN  [DubboServerHandler-10.6.143.124:7513-thread-568] [c.a.d.rpc.filter.TimeoutFilter]  [DUBBO] invoke time out. method: queryAllMetricsarguments: [e10adc3949ba59abbe56e057f20f88dd] , url is dubbo://10.6.143.124:7513/uyun.indian.reader.api.ReaderService?anyhost=true&amp;application=indian-reader&amp;default.accepts=1000&amp;default.threadpool=cached&amp;default.threads=500&amp;default.timeout=5000&amp;dubbo=2.8.4.170831&amp;generic=false&amp;interface=uyun.indian.reader.api.ReaderService&amp;methods=queryByResId,query,queryAllMetrics,queryTags&amp;pid=20707&amp;revision=api&amp;serialization=kryo&amp;side=provider&amp;timestamp=1505982696415, invoke elapsed 6939 ms., dubbo version: 2.8.4.170831, current host: 10.6.143.124</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>query 使用的 kairosdb的读方法。<a href=\"https://github.com/kairosdb/kairosdb/wiki/Query-Performance\" target=\"_blank\" rel=\"noopener\">kairosdb wiki</a>上指出，当指标的 tag/value 组合太大时，查询时将变得非常缓慢。<br>而monitor报表 每次查询需要汇聚一天的数据。一天的指标数据量和读取时间如下：</p>\n\n<p>一种解决方法是使用<a href=\"https://github.com/zachm/tscached\" target=\"_blank\" rel=\"noopener\">TScached</a>进行读取，tscached 是kairosdb 的一个缓存代理，加载速度可以是kairosdb的100倍（这是它自己说的，感觉有点夸张了）。<br>指标库之前已经配置过 TScached，后来停用了。重新启用后，报表的加载速度明显加快，不再报超时。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17-09-28 10:01:26.123 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* start report 2017-09-28 09:56:26 to 2017-09-28 10:01:26 *********************</span><br><span class=\"line\">17-09-28 10:01:26.131 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.KairosdbReader, count=320, min=16ms, max=1496ms, avg=116.33ms, median=66.00ms, p75=156.00ms, p95=278.95ms, p99=889.79ms</span><br><span class=\"line\">17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.query, count=592, min=16ms, max=1732ms, avg=105.24ms, median=62.00ms, p75=105.00ms, p95=276.05ms, p99=936.27ms</span><br><span class=\"line\">17-09-28 10:01:26.133 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryAllMetrics, count=1, min=4ms, max=4ms, avg=4.00ms, median=4.00ms, p75=4.00ms, p95=4.00ms, p99=4.00ms</span><br><span class=\"line\">17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryByResId, count=2, min=2ms, max=40ms, avg=21.00ms, median=21.00ms, p75=40.00ms, p95=40.00ms, p99=40.00ms</span><br><span class=\"line\">17-09-28 10:01:26.134 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.ReaderServiceImpl.queryTags, count=4, min=37ms, max=38ms, avg=37.50ms, median=37.50ms, p75=38.00ms, p95=38.00ms, p99=38.00ms</span><br><span class=\"line\">17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] methodName=uyun.indian.reader.impl.TScachedReader, count=272, min=22ms, max=1732ms, avg=91.88ms, median=57.00ms, p75=75.75ms, p95=241.05ms, p99=1092.88ms</span><br><span class=\"line\">17-09-28 10:01:26.135 INFO  [reporter-thread-1   ] [u.i.method.elapsedtime.report ] ********************* end report *********************</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p>query 方法速度上来之后，发现queryAllMetrics 方法出现超时现象，按问题1的解决办法处理后，发现仍有问题，后改用读redis 缓存的方式后，暂时解决。<br>但Cassandra的资源消耗仍比较大</p>\n<img src=\"/2017/09/28/170928/cassandra1.png\" title=\"Cassandra 资源消耗\">\n<img src=\"/2017/09/28/170928/cassandra2.png\" title=\"Cassandra 资源消耗\">\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>查看Cassandra system日志后发现 kairosdb.data_points 表中存在大量<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html\" target=\"_blank\" rel=\"noopener\">tombstone</a>(墓碑)数据警告，严重影响了Cassandra性能。需对Cassandra 进行数据<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">compact</a>(压实)操作，以清除墓碑数据。<br>在对数据进行压实操作之前，需要先<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsRepairNodesManualRepair.html\" target=\"_blank\" rel=\"noopener\">repair</a>(修复)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  [SharedPool-Worker-30] 2017-09-26 15:48:50,818 ReadCommand.java:481 - Read 1024 live rows and 22072 tombstone cells for query SELECT value FROM kairosdb.data_points WHERE key = 65313061646333393439626135396162626535366530353766323066383864647e73797374656d2e6e65742e62797465735f72637664000000015dc970d000000d6b6169726f735f646f75626c656465766963653d6962313a686f73743d646d3031646261646d30342e73746174732e676f762e636e3a69703d31302e362e3133342e38303a6f626a6563743d3539383763643931633633396438613830633433653631383a74656e616e7449643d65313061646333393439626135396162626535366530353766323066383864643a AND column1 &gt;= 00000000 AND column1 &lt;= 9dd94 (see tombstone_warn_threshold)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Cassandra中，一切都是写入，包括逻辑删除数据，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。 </p>\n</blockquote>\n<p>关于Cassandra 如何维护数据，可参考  <a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra 数据维护官方文档</a></p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>具体压实步骤如下：</p>\n<ol>\n<li>cassandra 默认压缩周期为10天，首先将压缩周期设为1天，设置 gc_grace_seconds 参数，</li>\n</ol>\n<p>登录Cassandra:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cqlsh host -u user -p pswd</span><br></pre></td></tr></table></figure>\n<p>设置kairosdb的表的压缩周期设为 一天（86400 s）: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table kairosdb.string_index with gc_grace_seconds = 86400;alter table kairosdb.data_points with GC_GRACE_SECONDS = 86400;alter table kairosdb.row_key_index with GC_GRACE_SECONDS = 86400;</span><br><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">设置完后 ，运行`DESC kairosdb;`，可以看到 **gc_grace_seconds**已被设为86400；</span><br></pre></td></tr></table></figure>\n<p>CREATE TABLE kairosdb.string_index (<br>    key blob,<br>    column1 text,<br>    value blob,<br>    PRIMARY KEY (key, column1)<br>) WITH COMPACT STORAGE<br>    AND CLUSTERING ORDER BY (column1 ASC)<br>    AND bloom_filter_fp_chance = 0.01<br>    AND caching = {‘keys’: ‘ALL’, ‘rows_per_partition’: ‘NONE’}<br>    AND comment = ‘’<br>    AND compaction = {‘class’: ‘org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy’, ‘max_threshold’: ‘32’, ‘min_threshold’: ‘4’}<br>    AND compression = {‘chunk_length_in_kb’: ‘64’, ‘class’: ‘org.apache.cassandra.io.compress.LZ4Compressor’}<br>    AND crc_check_chance = 1.0<br>    AND dclocal_read_repair_chance = 0.1<br>    AND default_time_to_live = 0<br>     AND gc_grace_seconds = 86400<br>    AND max_index_interval = 2048<br>    AND memtable_flush_period_in_ms = 0<br>    AND min_index_interval = 128<br>    AND read_repair_chance = 1.0<br>    AND speculative_retry = ‘NONE’;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.  为了统一各个节点的墓碑数据，需在各个节点上分别运行修复kairosdb下各个表，防止已删除数据重生;</span><br></pre></td></tr></table></figure>\n<p>nodetool  repair kairosdb row_key_index<br>nodetool  repair kairosdb string_index<br>nodetool  repair kairosdb data_points<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*此处运行修复时，三个节点的data_points表由于数据太大，一直没有完全修复成功（some repair failed ）。由于数据量较大，且接受删掉的数据再次恢复，此处采取的措施是忽略该表。</span><br><span class=\"line\"></span><br><span class=\"line\">3.  修复完后再分别进行压实操作:</span><br></pre></td></tr></table></figure></p>\n<p>nodetool  compact  kairosdb row_key_index<br>nodetool  compact  kairosdb string_index<br>nodetool  compact  kairosdb data_points<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">压实操作可用`nodetool  compactionstats` 和 `nodetool  compactionhistory`分别查看当前和历史的压实造作;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% asset_img compactionstats.png 压实状态 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4.  开启自动压实操作（默认已开启）：`nodetool enableautocompaction` </span><br><span class=\"line\"></span><br><span class=\"line\">操作完后，Cassandra 会自动压缩一些其他表的数据。结束后，Cassandra 日志中data_points表 墓碑警告记录墓碑数量大幅变小，可以发现Cassandra对资源的占用变到正常水平。 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 其他问题</span><br><span class=\"line\"></span><br><span class=\"line\">1.  cassandra 日志报：</span><br><span class=\"line\"></span><br><span class=\"line\">``</span><br><span class=\"line\"> INFO  [IndexSummaryManager:1] 2017-09-28 08:16:56,278 IndexSummaryRedistribution.java:74 - Redistributing index summaries</span><br><span class=\"line\"> INFO  [SharedPool-Worker-1] 2017-09-28 08:19:46,973 NoSpamLogger.java:91 - Maximum memory usage reached (536870912 bytes), cannot allocate chunk of 1048576 bytes</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">2.  Dubbo 消费者报：No provider available for the service。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 分析&amp;解决</span><br><span class=\"line\"></span><br><span class=\"line\">1.  调查得知，原因是file_cache_size_in_mb较小，文档中描述该参数是用来读[SSTables](https://stackoverflow.com/questions/2576012/what-is-an-sstable)(Sorted Strings Table , is a file of key/value string pairs, sorted by keys)的缓冲区：</span><br><span class=\"line\">&gt;file_cache_size_in_mb :(Default: Smaller of 1/4 heap or 512) Total memory to use for SSTable-reading buffers.</span><br><span class=\"line\"></span><br><span class=\"line\">调到1024 （M）后，不再报该问题</span><br><span class=\"line\"></span><br><span class=\"line\">2.  服务注册不到zookeeper 上，猜测可能是机器IO负载太大。</span><br><span class=\"line\">执行`netstat -nat | awk &apos;&#123;print $6&#125;&apos; | sort | uniq -c | sort -n` ，可以看到 CLOSE_WAIT 连接太多：</span><br></pre></td></tr></table></figure></p>\n<p>[root@Uyun-DB2 logs]# netstat -nat | awk ‘{print $6}’ | sort | uniq -c | sort -n<br>      1 established)<br>      1 Foreign<br>      2 TIME_WAIT<br>     47 LISTEN<br>   1088 ESTABLISHED<br>   3314 CLOSE_WAIT<br><code>`</code></p>\n<p><code>netstat -nat | grep CLOSE_WAIT</code> 后，发现是kairosdb 造成的（猜测是之前Cassandra负载太大造成 ），强行重启kairosdb 后，再启动指标库，服务正常。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>kairosDB 作者建议采用<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction\" target=\"_blank\" rel=\"noopener\">DateTieredCompactionStrategy</a> (DTCS)压实策略，参考 <a href=\"https://github.com/kairosdb/kairosdb/issues/23\" target=\"_blank\" rel=\"noopener\">kairosDB Issue 23</a>。需要进一步研究。</p>\n</li>\n<li><p>还是会有 Cassandra 占CPU较高的现象，但日志正常，需要进一步研究。</p>\n</li>\n</ol>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><p><a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra–How is data maintained</a></p>\n<p><a href=\"http://blog.csdn.net/nangongyanya/article/details/54018104\" target=\"_blank\" rel=\"noopener\">操作Cassandra（3）-合并、压实</a></p>\n<p><a href=\"http://www.cnblogs.com/didda/p/4728588.html\" target=\"_blank\" rel=\"noopener\">Cassandra 的压缩策略STCS，LCS 和 DTCS</a></p>\n"},{"layout":"blogs_default","title":"Cassandra 常用命令合集","subtitle":"Cassandra 常用命令合集","date":"2017-10-22T14:08:41.000Z","_content":"\n\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#修改Cassandra 最大可用内存大小\" level=\"2\">修改Cassandra 最大可用内存大小</a></li><li><a class=\"toc-level-2\" href=\"#登录CQL\" level=\"2\">登录CQL</a></li><li><a class=\"toc-level-2\" href=\"#查看墓碑数据总量\" level=\"2\">查看墓碑数据总量</a></li><li><a class=\"toc-level-2\" href=\"#修复表\" level=\"2\">修复表</a></li><li><a class=\"toc-level-2\" href=\"#压实数据\" level=\"2\">压实数据</a></li><li><a class=\"toc-level-2\" href=\"#查看当前压实操作状态和历史压实纪录\" level=\"2\">查看当前压实操作状态和历史压实纪录</a></li><li><a class=\"toc-level-2\" href=\"#查看表的状态\" level=\"2\">查看表的状态</a></li><li><a class=\"toc-level-2\" href=\"#Cassandra 线程池的使用统计信息\" level=\"2\">Cassandra 线程池的使用统计信息</a></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a><ul></ul></li></ul></div>\n\n>文中Cassandra 安装在/opt 目录下，具体执行命令需根据自己的Cassandra安装目录进行调整。\nCassandra 版本为 3.5。\n\n## 修改Cassandra 最大可用内存大小\n\nCassandra 默认最大可用内存和初始内存大小(-Xmx 、-Xms )为 4G ，通常情况下偏小。\n\n修改最大内存大小可直接修改 cassandra/conf/cassandra-env.sh 中 MAX_HEAP_SIZE 参数：`MAX_HEAP_SIZE=\"4G\"`\n\ncassandra 有两种GC策略，系统内存在14G以上，推荐使用 G1策略。默认使用的是CMS策略。参阅[Tuning Java resources ](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsTuneJVM.html )\n\n## 登录CQL、查看版本 \n\n登录：\n`/opt/cassandra/bin/cqlsh [ip] -u [username] -p [passwd]`\n\n查看版本：\n`cqlsh>show version`\n\n{% asset_img logIn_showVersion.png 登录CQL、查看版本 %}\n\n## 查看墓碑数据总量\n\n没有直接查看墓碑数量的好方法，可在CQL 中开启tracing，执行查询时，会提示具体表含有多少墓碑数据：\n\n{% asset_img count_tombstone.png 墓碑数据总量 %}\n\n## 修复表\n修复表可以手动同步各个节点的数据（包括墓碑数据），需在各个节点分别执行\n\n`` /opt/cassandra/bin/nodetool  repair kairosdb string_index;``\n\n## 压实数据 \n墓碑数据过多会影响Cassandra性能。压实数据，可消除墓碑数据。压实前，需进行表数据的修复，以防删除数据恢复。\n\n1. 手动压实：\n\n``/opt/cassandra/bin/nodetool  compact  kairosdb string_index``\n\n2. 开启自动压实(默认已开启)：`/opt/cassandra/bin/nodetool enableautocompaction`\n\n3. 修改表的压实策略：\n\n``ALTER TABLE kairosdb.string_index   WITH compaction =   {'class' : 'SizeTieredCompactionStrategy', 'min_threshold' : 6 };``\n\n4. 修改自动压实周期：\n\n默认压实时间为864000，即10天，修改为一天：`alter table kairosdb.string_index with GC_GRACE_SECONDS = 86400;`\n\n关于压实策略，请参阅：[How is data maintained](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n## 查看当前压实操作状态和历史压实纪录\n\n\n``\n/opt/cassandra/bin/nodetool  compactionstats;\n/opt/cassandra/bin/nodetool  compactionhistory;\n``\n\n{% asset_img compaction.png compaction %}\n\n\n## 查看表的状态\n\n\n``\n/opt/cassandra/bin/nodetool  cfstats kairosdb.data_points  或\n/opt/cassandra/bin/nodetool  tablestats kairosdb.data_points;\n``\n\n\n{% asset_img cfstats.png cfstats %}\n\n\n## Cassandra 线程池的使用统计信息\n\nCassandra基于分阶段事件驱动架构（SEDA）。Cassandra将不同的任务分成由消息服务连接的很多阶段。每个阶段都有一个队列和一个线程池。如果下一个阶段太忙，Cassandra会备份队列，并将导致性能瓶颈。\n\n\n``\n/opt/cassandra/bin/nodetool tpstats;\n``\n\n{% asset_img tpstats.png tpstats %}\n\n\n## 其他\n\n更多 cassandra命令请参阅：[The nodetool utility](https://docs.datastax.com/en/cassandra/3.0/cassandra/tools/toolsNodetool.html) 、[Apache Cassandra](https://docs.datastax.com/en/cassandra/3.0/index.html)\n\n\n","source":"_posts/171022.md","raw":"---\nlayout: blogs_default\ntitle: Cassandra 常用命令合集\nsubtitle:  Cassandra 常用命令合集\ndate: 2017-10-22 22:08:41\ntags:\n    - cassandra\n    - cql\ncategories:              \n- 数据库 \n---\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#修改Cassandra 最大可用内存大小\" level=\"2\">修改Cassandra 最大可用内存大小</a></li><li><a class=\"toc-level-2\" href=\"#登录CQL\" level=\"2\">登录CQL</a></li><li><a class=\"toc-level-2\" href=\"#查看墓碑数据总量\" level=\"2\">查看墓碑数据总量</a></li><li><a class=\"toc-level-2\" href=\"#修复表\" level=\"2\">修复表</a></li><li><a class=\"toc-level-2\" href=\"#压实数据\" level=\"2\">压实数据</a></li><li><a class=\"toc-level-2\" href=\"#查看当前压实操作状态和历史压实纪录\" level=\"2\">查看当前压实操作状态和历史压实纪录</a></li><li><a class=\"toc-level-2\" href=\"#查看表的状态\" level=\"2\">查看表的状态</a></li><li><a class=\"toc-level-2\" href=\"#Cassandra 线程池的使用统计信息\" level=\"2\">Cassandra 线程池的使用统计信息</a></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a><ul></ul></li></ul></div>\n\n>文中Cassandra 安装在/opt 目录下，具体执行命令需根据自己的Cassandra安装目录进行调整。\nCassandra 版本为 3.5。\n\n## 修改Cassandra 最大可用内存大小\n\nCassandra 默认最大可用内存和初始内存大小(-Xmx 、-Xms )为 4G ，通常情况下偏小。\n\n修改最大内存大小可直接修改 cassandra/conf/cassandra-env.sh 中 MAX_HEAP_SIZE 参数：`MAX_HEAP_SIZE=\"4G\"`\n\ncassandra 有两种GC策略，系统内存在14G以上，推荐使用 G1策略。默认使用的是CMS策略。参阅[Tuning Java resources ](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsTuneJVM.html )\n\n## 登录CQL、查看版本 \n\n登录：\n`/opt/cassandra/bin/cqlsh [ip] -u [username] -p [passwd]`\n\n查看版本：\n`cqlsh>show version`\n\n{% asset_img logIn_showVersion.png 登录CQL、查看版本 %}\n\n## 查看墓碑数据总量\n\n没有直接查看墓碑数量的好方法，可在CQL 中开启tracing，执行查询时，会提示具体表含有多少墓碑数据：\n\n{% asset_img count_tombstone.png 墓碑数据总量 %}\n\n## 修复表\n修复表可以手动同步各个节点的数据（包括墓碑数据），需在各个节点分别执行\n\n`` /opt/cassandra/bin/nodetool  repair kairosdb string_index;``\n\n## 压实数据 \n墓碑数据过多会影响Cassandra性能。压实数据，可消除墓碑数据。压实前，需进行表数据的修复，以防删除数据恢复。\n\n1. 手动压实：\n\n``/opt/cassandra/bin/nodetool  compact  kairosdb string_index``\n\n2. 开启自动压实(默认已开启)：`/opt/cassandra/bin/nodetool enableautocompaction`\n\n3. 修改表的压实策略：\n\n``ALTER TABLE kairosdb.string_index   WITH compaction =   {'class' : 'SizeTieredCompactionStrategy', 'min_threshold' : 6 };``\n\n4. 修改自动压实周期：\n\n默认压实时间为864000，即10天，修改为一天：`alter table kairosdb.string_index with GC_GRACE_SECONDS = 86400;`\n\n关于压实策略，请参阅：[How is data maintained](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html)\n\n## 查看当前压实操作状态和历史压实纪录\n\n\n``\n/opt/cassandra/bin/nodetool  compactionstats;\n/opt/cassandra/bin/nodetool  compactionhistory;\n``\n\n{% asset_img compaction.png compaction %}\n\n\n## 查看表的状态\n\n\n``\n/opt/cassandra/bin/nodetool  cfstats kairosdb.data_points  或\n/opt/cassandra/bin/nodetool  tablestats kairosdb.data_points;\n``\n\n\n{% asset_img cfstats.png cfstats %}\n\n\n## Cassandra 线程池的使用统计信息\n\nCassandra基于分阶段事件驱动架构（SEDA）。Cassandra将不同的任务分成由消息服务连接的很多阶段。每个阶段都有一个队列和一个线程池。如果下一个阶段太忙，Cassandra会备份队列，并将导致性能瓶颈。\n\n\n``\n/opt/cassandra/bin/nodetool tpstats;\n``\n\n{% asset_img tpstats.png tpstats %}\n\n\n## 其他\n\n更多 cassandra命令请参阅：[The nodetool utility](https://docs.datastax.com/en/cassandra/3.0/cassandra/tools/toolsNodetool.html) 、[Apache Cassandra](https://docs.datastax.com/en/cassandra/3.0/index.html)\n\n\n","slug":"171022","published":1,"updated":"2018-09-22T02:45:28.889Z","comments":1,"photos":[],"link":"","_id":"cjovkdwsw0007ayqcdddsqgad","content":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#修改Cassandra 最大可用内存大小\" level=\"2\">修改Cassandra 最大可用内存大小</a></li><li><a class=\"toc-level-2\" href=\"#登录CQL\" level=\"2\">登录CQL</a></li><li><a class=\"toc-level-2\" href=\"#查看墓碑数据总量\" level=\"2\">查看墓碑数据总量</a></li><li><a class=\"toc-level-2\" href=\"#修复表\" level=\"2\">修复表</a></li><li><a class=\"toc-level-2\" href=\"#压实数据\" level=\"2\">压实数据</a></li><li><a class=\"toc-level-2\" href=\"#查看当前压实操作状态和历史压实纪录\" level=\"2\">查看当前压实操作状态和历史压实纪录</a></li><li><a class=\"toc-level-2\" href=\"#查看表的状态\" level=\"2\">查看表的状态</a></li><li><a class=\"toc-level-2\" href=\"#Cassandra 线程池的使用统计信息\" level=\"2\">Cassandra 线程池的使用统计信息</a></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a><ul></ul></li></ul></div>\n\n<blockquote>\n<p>文中Cassandra 安装在/opt 目录下，具体执行命令需根据自己的Cassandra安装目录进行调整。<br>Cassandra 版本为 3.5。</p>\n</blockquote>\n<h2 id=\"修改Cassandra-最大可用内存大小\"><a href=\"#修改Cassandra-最大可用内存大小\" class=\"headerlink\" title=\"修改Cassandra 最大可用内存大小\"></a>修改Cassandra 最大可用内存大小</h2><p>Cassandra 默认最大可用内存和初始内存大小(-Xmx 、-Xms )为 4G ，通常情况下偏小。</p>\n<p>修改最大内存大小可直接修改 cassandra/conf/cassandra-env.sh 中 MAX_HEAP_SIZE 参数：<code>MAX_HEAP_SIZE=&quot;4G&quot;</code></p>\n<p>cassandra 有两种GC策略，系统内存在14G以上，推荐使用 G1策略。默认使用的是CMS策略。参阅<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsTuneJVM.html\" target=\"_blank\" rel=\"noopener\">Tuning Java resources </a></p>\n<h2 id=\"登录CQL、查看版本\"><a href=\"#登录CQL、查看版本\" class=\"headerlink\" title=\"登录CQL、查看版本\"></a>登录CQL、查看版本</h2><p>登录：<br><code>/opt/cassandra/bin/cqlsh [ip] -u [username] -p [passwd]</code></p>\n<p>查看版本：<br><code>cqlsh&gt;show version</code></p>\n<img src=\"/2017/10/22/171022/logIn_showVersion.png\" title=\"登录CQL、查看版本\">\n<h2 id=\"查看墓碑数据总量\"><a href=\"#查看墓碑数据总量\" class=\"headerlink\" title=\"查看墓碑数据总量\"></a>查看墓碑数据总量</h2><p>没有直接查看墓碑数量的好方法，可在CQL 中开启tracing，执行查询时，会提示具体表含有多少墓碑数据：</p>\n<img src=\"/2017/10/22/171022/count_tombstone.png\" title=\"墓碑数据总量\">\n<h2 id=\"修复表\"><a href=\"#修复表\" class=\"headerlink\" title=\"修复表\"></a>修复表</h2><p>修复表可以手动同步各个节点的数据（包括墓碑数据），需在各个节点分别执行</p>\n<p><code>/opt/cassandra/bin/nodetool  repair kairosdb string_index;</code></p>\n<h2 id=\"压实数据\"><a href=\"#压实数据\" class=\"headerlink\" title=\"压实数据\"></a>压实数据</h2><p>墓碑数据过多会影响Cassandra性能。压实数据，可消除墓碑数据。压实前，需进行表数据的修复，以防删除数据恢复。</p>\n<ol>\n<li>手动压实：</li>\n</ol>\n<p><code>/opt/cassandra/bin/nodetool  compact  kairosdb string_index</code></p>\n<ol start=\"2\">\n<li><p>开启自动压实(默认已开启)：<code>/opt/cassandra/bin/nodetool enableautocompaction</code></p>\n</li>\n<li><p>修改表的压实策略：</p>\n</li>\n</ol>\n<p><code>ALTER TABLE kairosdb.string_index   WITH compaction =   {&#39;class&#39; : &#39;SizeTieredCompactionStrategy&#39;, &#39;min_threshold&#39; : 6 };</code></p>\n<ol start=\"4\">\n<li>修改自动压实周期：</li>\n</ol>\n<p>默认压实时间为864000，即10天，修改为一天：<code>alter table kairosdb.string_index with GC_GRACE_SECONDS = 86400;</code></p>\n<p>关于压实策略，请参阅：<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">How is data maintained</a></p>\n<h2 id=\"查看当前压实操作状态和历史压实纪录\"><a href=\"#查看当前压实操作状态和历史压实纪录\" class=\"headerlink\" title=\"查看当前压实操作状态和历史压实纪录\"></a>查看当前压实操作状态和历史压实纪录</h2><p><code>/opt/cassandra/bin/nodetool  compactionstats;\n/opt/cassandra/bin/nodetool  compactionhistory;</code></p>\n<img src=\"/2017/10/22/171022/compaction.png\" title=\"compaction\">\n<h2 id=\"查看表的状态\"><a href=\"#查看表的状态\" class=\"headerlink\" title=\"查看表的状态\"></a>查看表的状态</h2><p><code>/opt/cassandra/bin/nodetool  cfstats kairosdb.data_points  或\n/opt/cassandra/bin/nodetool  tablestats kairosdb.data_points;</code></p>\n<img src=\"/2017/10/22/171022/cfstats.png\" title=\"cfstats\">\n<h2 id=\"Cassandra-线程池的使用统计信息\"><a href=\"#Cassandra-线程池的使用统计信息\" class=\"headerlink\" title=\"Cassandra 线程池的使用统计信息\"></a>Cassandra 线程池的使用统计信息</h2><p>Cassandra基于分阶段事件驱动架构（SEDA）。Cassandra将不同的任务分成由消息服务连接的很多阶段。每个阶段都有一个队列和一个线程池。如果下一个阶段太忙，Cassandra会备份队列，并将导致性能瓶颈。</p>\n<p><code>/opt/cassandra/bin/nodetool tpstats;</code></p>\n<img src=\"/2017/10/22/171022/tpstats.png\" title=\"tpstats\">\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>更多 cassandra命令请参阅：<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/tools/toolsNodetool.html\" target=\"_blank\" rel=\"noopener\">The nodetool utility</a> 、<a href=\"https://docs.datastax.com/en/cassandra/3.0/index.html\" target=\"_blank\" rel=\"noopener\">Apache Cassandra</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#修改Cassandra 最大可用内存大小\" level=\"2\">修改Cassandra 最大可用内存大小</a></li><li><a class=\"toc-level-2\" href=\"#登录CQL\" level=\"2\">登录CQL</a></li><li><a class=\"toc-level-2\" href=\"#查看墓碑数据总量\" level=\"2\">查看墓碑数据总量</a></li><li><a class=\"toc-level-2\" href=\"#修复表\" level=\"2\">修复表</a></li><li><a class=\"toc-level-2\" href=\"#压实数据\" level=\"2\">压实数据</a></li><li><a class=\"toc-level-2\" href=\"#查看当前压实操作状态和历史压实纪录\" level=\"2\">查看当前压实操作状态和历史压实纪录</a></li><li><a class=\"toc-level-2\" href=\"#查看表的状态\" level=\"2\">查看表的状态</a></li><li><a class=\"toc-level-2\" href=\"#Cassandra 线程池的使用统计信息\" level=\"2\">Cassandra 线程池的使用统计信息</a></li><li><a class=\"toc-level-2\" href=\"#其他\" level=\"2\">其他</a><ul></ul></li></ul></div>\n\n<blockquote>\n<p>文中Cassandra 安装在/opt 目录下，具体执行命令需根据自己的Cassandra安装目录进行调整。<br>Cassandra 版本为 3.5。</p>\n</blockquote>\n<h2 id=\"修改Cassandra-最大可用内存大小\"><a href=\"#修改Cassandra-最大可用内存大小\" class=\"headerlink\" title=\"修改Cassandra 最大可用内存大小\"></a>修改Cassandra 最大可用内存大小</h2><p>Cassandra 默认最大可用内存和初始内存大小(-Xmx 、-Xms )为 4G ，通常情况下偏小。</p>\n<p>修改最大内存大小可直接修改 cassandra/conf/cassandra-env.sh 中 MAX_HEAP_SIZE 参数：<code>MAX_HEAP_SIZE=&quot;4G&quot;</code></p>\n<p>cassandra 有两种GC策略，系统内存在14G以上，推荐使用 G1策略。默认使用的是CMS策略。参阅<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsTuneJVM.html\" target=\"_blank\" rel=\"noopener\">Tuning Java resources </a></p>\n<h2 id=\"登录CQL、查看版本\"><a href=\"#登录CQL、查看版本\" class=\"headerlink\" title=\"登录CQL、查看版本\"></a>登录CQL、查看版本</h2><p>登录：<br><code>/opt/cassandra/bin/cqlsh [ip] -u [username] -p [passwd]</code></p>\n<p>查看版本：<br><code>cqlsh&gt;show version</code></p>\n<img src=\"/2017/10/22/171022/logIn_showVersion.png\" title=\"登录CQL、查看版本\">\n<h2 id=\"查看墓碑数据总量\"><a href=\"#查看墓碑数据总量\" class=\"headerlink\" title=\"查看墓碑数据总量\"></a>查看墓碑数据总量</h2><p>没有直接查看墓碑数量的好方法，可在CQL 中开启tracing，执行查询时，会提示具体表含有多少墓碑数据：</p>\n<img src=\"/2017/10/22/171022/count_tombstone.png\" title=\"墓碑数据总量\">\n<h2 id=\"修复表\"><a href=\"#修复表\" class=\"headerlink\" title=\"修复表\"></a>修复表</h2><p>修复表可以手动同步各个节点的数据（包括墓碑数据），需在各个节点分别执行</p>\n<p><code>/opt/cassandra/bin/nodetool  repair kairosdb string_index;</code></p>\n<h2 id=\"压实数据\"><a href=\"#压实数据\" class=\"headerlink\" title=\"压实数据\"></a>压实数据</h2><p>墓碑数据过多会影响Cassandra性能。压实数据，可消除墓碑数据。压实前，需进行表数据的修复，以防删除数据恢复。</p>\n<ol>\n<li>手动压实：</li>\n</ol>\n<p><code>/opt/cassandra/bin/nodetool  compact  kairosdb string_index</code></p>\n<ol start=\"2\">\n<li><p>开启自动压实(默认已开启)：<code>/opt/cassandra/bin/nodetool enableautocompaction</code></p>\n</li>\n<li><p>修改表的压实策略：</p>\n</li>\n</ol>\n<p><code>ALTER TABLE kairosdb.string_index   WITH compaction =   {&#39;class&#39; : &#39;SizeTieredCompactionStrategy&#39;, &#39;min_threshold&#39; : 6 };</code></p>\n<ol start=\"4\">\n<li>修改自动压实周期：</li>\n</ol>\n<p>默认压实时间为864000，即10天，修改为一天：<code>alter table kairosdb.string_index with GC_GRACE_SECONDS = 86400;</code></p>\n<p>关于压实策略，请参阅：<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">How is data maintained</a></p>\n<h2 id=\"查看当前压实操作状态和历史压实纪录\"><a href=\"#查看当前压实操作状态和历史压实纪录\" class=\"headerlink\" title=\"查看当前压实操作状态和历史压实纪录\"></a>查看当前压实操作状态和历史压实纪录</h2><p><code>/opt/cassandra/bin/nodetool  compactionstats;\n/opt/cassandra/bin/nodetool  compactionhistory;</code></p>\n<img src=\"/2017/10/22/171022/compaction.png\" title=\"compaction\">\n<h2 id=\"查看表的状态\"><a href=\"#查看表的状态\" class=\"headerlink\" title=\"查看表的状态\"></a>查看表的状态</h2><p><code>/opt/cassandra/bin/nodetool  cfstats kairosdb.data_points  或\n/opt/cassandra/bin/nodetool  tablestats kairosdb.data_points;</code></p>\n<img src=\"/2017/10/22/171022/cfstats.png\" title=\"cfstats\">\n<h2 id=\"Cassandra-线程池的使用统计信息\"><a href=\"#Cassandra-线程池的使用统计信息\" class=\"headerlink\" title=\"Cassandra 线程池的使用统计信息\"></a>Cassandra 线程池的使用统计信息</h2><p>Cassandra基于分阶段事件驱动架构（SEDA）。Cassandra将不同的任务分成由消息服务连接的很多阶段。每个阶段都有一个队列和一个线程池。如果下一个阶段太忙，Cassandra会备份队列，并将导致性能瓶颈。</p>\n<p><code>/opt/cassandra/bin/nodetool tpstats;</code></p>\n<img src=\"/2017/10/22/171022/tpstats.png\" title=\"tpstats\">\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>更多 cassandra命令请参阅：<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/tools/toolsNodetool.html\" target=\"_blank\" rel=\"noopener\">The nodetool utility</a> 、<a href=\"https://docs.datastax.com/en/cassandra/3.0/index.html\" target=\"_blank\" rel=\"noopener\">Apache Cassandra</a></p>\n"},{"layout":"blogs_default","title":"Dubbo Telnet 命令","date":"2017-10-23T14:08:41.000Z","_content":"\n\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#login\" level=\"2\">login</a></li><li><a class=\"toc-level-2\" href=\"#status\" level=\"2\">status</a></li><li><a class=\"toc-level-2\" href=\"#ls\" level=\"2\">ls</a></li><li><a class=\"toc-level-2\" href=\"#ps\" level=\"2\">ps</a></li><li><a class=\"toc-level-2\" href=\"#trace\" level=\"2\">trace</a></li><li><a class=\"toc-level-2\" href=\"#invoke\" level=\"2\">invoke</a></li><li><a class=\"toc-level-2\" href=\"#more\" level=\"2\">more</a><ul></ul></li></ul></div>\n\n>从 2.0.5 版本开始，dubbo 开始支持通过 telnet 命令来镜像服务治理。\n\n## login\n\ntelnet localhost 20880(dubbo或服务端口)\n\n{% asset_img login.png login %}\n\n## status\n\n1. status: 显示汇总状态，该状态将汇总所有资源的状态，当全部 OK 时则显示 OK，只要有一个 ERROR 则显示 ERROR，只要有一个 WARN 则显示 WARN\n2. status -l: 显示状态列表\n\n见上图\n\n## ls\n\n显示服务列表、方法列表、参数等\n\n1. ls: 显示服务列表\n2. ls -l: 显示服务详细信息列表\n3. ls XxxService: 显示服务的方法列表\n4. ls -l XxxService: 显示服务的方法详细信息列表\n\n{% asset_img ps&ls.png ls %}\n\n## ps\n\n显示服务端口列表，可用来查看服务是否已成功注册\n\n1. ps: 显示服务端口列表\n2. ps -l: 显示服务地址列表\n3. ps 20880: 显示端口上的连接信息\n4. ps -l 20880: 显示端口上的连接详细信息\n\n见上图\n\n\n## trace\n\n跟踪服务任意方法的调用情况\n\n\n1. trace XxxService: 跟踪 1 次服务任意方法的调用情况\n2. trace XxxService 10: 跟踪 10 次服务任意方法的调用情况\n3. trace XxxService xxxMethod: 跟踪 1 次服务方法的调用情况\n4. trace XxxService xxxMethod 10: 跟踪 10 次服务方法的调用情况\n\n{% asset_img trace.png trace %}\n\n## invoke\n\n调用服务的方法，通过该命令可直接调试方法。\n\n1. invoke XxxService.xxxMethod({\"prop\": \"value\"}): 调用服务的方法\n2. invoke xxxMethod({\"prop\": \"value\"}): 调用服务的方法(自动查找包含此方法的服务)\n\n{% asset_img invoke.png invoke %}\n\n\n\n\n## more\n\n更多 Dubbo Telnet 命令请参阅：[Telnet 命令参考手册](https://dubbo.gitbooks.io/dubbo-user-book/references/telnet.html) \n\n\n","source":"_posts/171023.md","raw":"---\nlayout: blogs_default\ntitle: Dubbo Telnet 命令\ndate: 2017-10-23 22:08:41\ntags:                    \n- dubbo                   \ncategories:              \n- 中间件                  \n---\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n<div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#login\" level=\"2\">login</a></li><li><a class=\"toc-level-2\" href=\"#status\" level=\"2\">status</a></li><li><a class=\"toc-level-2\" href=\"#ls\" level=\"2\">ls</a></li><li><a class=\"toc-level-2\" href=\"#ps\" level=\"2\">ps</a></li><li><a class=\"toc-level-2\" href=\"#trace\" level=\"2\">trace</a></li><li><a class=\"toc-level-2\" href=\"#invoke\" level=\"2\">invoke</a></li><li><a class=\"toc-level-2\" href=\"#more\" level=\"2\">more</a><ul></ul></li></ul></div>\n\n>从 2.0.5 版本开始，dubbo 开始支持通过 telnet 命令来镜像服务治理。\n\n## login\n\ntelnet localhost 20880(dubbo或服务端口)\n\n{% asset_img login.png login %}\n\n## status\n\n1. status: 显示汇总状态，该状态将汇总所有资源的状态，当全部 OK 时则显示 OK，只要有一个 ERROR 则显示 ERROR，只要有一个 WARN 则显示 WARN\n2. status -l: 显示状态列表\n\n见上图\n\n## ls\n\n显示服务列表、方法列表、参数等\n\n1. ls: 显示服务列表\n2. ls -l: 显示服务详细信息列表\n3. ls XxxService: 显示服务的方法列表\n4. ls -l XxxService: 显示服务的方法详细信息列表\n\n{% asset_img ps&ls.png ls %}\n\n## ps\n\n显示服务端口列表，可用来查看服务是否已成功注册\n\n1. ps: 显示服务端口列表\n2. ps -l: 显示服务地址列表\n3. ps 20880: 显示端口上的连接信息\n4. ps -l 20880: 显示端口上的连接详细信息\n\n见上图\n\n\n## trace\n\n跟踪服务任意方法的调用情况\n\n\n1. trace XxxService: 跟踪 1 次服务任意方法的调用情况\n2. trace XxxService 10: 跟踪 10 次服务任意方法的调用情况\n3. trace XxxService xxxMethod: 跟踪 1 次服务方法的调用情况\n4. trace XxxService xxxMethod 10: 跟踪 10 次服务方法的调用情况\n\n{% asset_img trace.png trace %}\n\n## invoke\n\n调用服务的方法，通过该命令可直接调试方法。\n\n1. invoke XxxService.xxxMethod({\"prop\": \"value\"}): 调用服务的方法\n2. invoke xxxMethod({\"prop\": \"value\"}): 调用服务的方法(自动查找包含此方法的服务)\n\n{% asset_img invoke.png invoke %}\n\n\n\n\n## more\n\n更多 Dubbo Telnet 命令请参阅：[Telnet 命令参考手册](https://dubbo.gitbooks.io/dubbo-user-book/references/telnet.html) \n\n\n","slug":"171023","published":1,"updated":"2018-09-22T02:45:28.893Z","comments":1,"photos":[],"link":"","_id":"cjovkdwsz0008ayqcld96gzxc","content":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#login\" level=\"2\">login</a></li><li><a class=\"toc-level-2\" href=\"#status\" level=\"2\">status</a></li><li><a class=\"toc-level-2\" href=\"#ls\" level=\"2\">ls</a></li><li><a class=\"toc-level-2\" href=\"#ps\" level=\"2\">ps</a></li><li><a class=\"toc-level-2\" href=\"#trace\" level=\"2\">trace</a></li><li><a class=\"toc-level-2\" href=\"#invoke\" level=\"2\">invoke</a></li><li><a class=\"toc-level-2\" href=\"#more\" level=\"2\">more</a><ul></ul></li></ul></div>\n\n<blockquote>\n<p>从 2.0.5 版本开始，dubbo 开始支持通过 telnet 命令来镜像服务治理。</p>\n</blockquote>\n<h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><p>telnet localhost 20880(dubbo或服务端口)</p>\n<img src=\"/2017/10/23/171023/login.png\" title=\"login\">\n<h2 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h2><ol>\n<li>status: 显示汇总状态，该状态将汇总所有资源的状态，当全部 OK 时则显示 OK，只要有一个 ERROR 则显示 ERROR，只要有一个 WARN 则显示 WARN</li>\n<li>status -l: 显示状态列表</li>\n</ol>\n<p>见上图</p>\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><p>显示服务列表、方法列表、参数等</p>\n<ol>\n<li>ls: 显示服务列表</li>\n<li>ls -l: 显示服务详细信息列表</li>\n<li>ls XxxService: 显示服务的方法列表</li>\n<li>ls -l XxxService: 显示服务的方法详细信息列表</li>\n</ol>\n<img src=\"/2017/10/23/171023/ps&ls.png\" title=\"ls\">\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p>显示服务端口列表，可用来查看服务是否已成功注册</p>\n<ol>\n<li>ps: 显示服务端口列表</li>\n<li>ps -l: 显示服务地址列表</li>\n<li>ps 20880: 显示端口上的连接信息</li>\n<li>ps -l 20880: 显示端口上的连接详细信息</li>\n</ol>\n<p>见上图</p>\n<h2 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h2><p>跟踪服务任意方法的调用情况</p>\n<ol>\n<li>trace XxxService: 跟踪 1 次服务任意方法的调用情况</li>\n<li>trace XxxService 10: 跟踪 10 次服务任意方法的调用情况</li>\n<li>trace XxxService xxxMethod: 跟踪 1 次服务方法的调用情况</li>\n<li>trace XxxService xxxMethod 10: 跟踪 10 次服务方法的调用情况</li>\n</ol>\n<img src=\"/2017/10/23/171023/trace.png\" title=\"trace\">\n<h2 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"invoke\"></a>invoke</h2><p>调用服务的方法，通过该命令可直接调试方法。</p>\n<ol>\n<li>invoke XxxService.xxxMethod({“prop”: “value”}): 调用服务的方法</li>\n<li>invoke xxxMethod({“prop”: “value”}): 调用服务的方法(自动查找包含此方法的服务)</li>\n</ol>\n<img src=\"/2017/10/23/171023/invoke.png\" title=\"invoke\">\n<h2 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h2><p>更多 Dubbo Telnet 命令请参阅：<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/references/telnet.html\" target=\"_blank\" rel=\"noopener\">Telnet 命令参考手册</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><div class=\"markdown-toc editormd-markdown-toc\"><ul class=\"markdown-toc-list\"><li><a class=\"toc-level-2\" href=\"#login\" level=\"2\">login</a></li><li><a class=\"toc-level-2\" href=\"#status\" level=\"2\">status</a></li><li><a class=\"toc-level-2\" href=\"#ls\" level=\"2\">ls</a></li><li><a class=\"toc-level-2\" href=\"#ps\" level=\"2\">ps</a></li><li><a class=\"toc-level-2\" href=\"#trace\" level=\"2\">trace</a></li><li><a class=\"toc-level-2\" href=\"#invoke\" level=\"2\">invoke</a></li><li><a class=\"toc-level-2\" href=\"#more\" level=\"2\">more</a><ul></ul></li></ul></div>\n\n<blockquote>\n<p>从 2.0.5 版本开始，dubbo 开始支持通过 telnet 命令来镜像服务治理。</p>\n</blockquote>\n<h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><p>telnet localhost 20880(dubbo或服务端口)</p>\n<img src=\"/2017/10/23/171023/login.png\" title=\"login\">\n<h2 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h2><ol>\n<li>status: 显示汇总状态，该状态将汇总所有资源的状态，当全部 OK 时则显示 OK，只要有一个 ERROR 则显示 ERROR，只要有一个 WARN 则显示 WARN</li>\n<li>status -l: 显示状态列表</li>\n</ol>\n<p>见上图</p>\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><p>显示服务列表、方法列表、参数等</p>\n<ol>\n<li>ls: 显示服务列表</li>\n<li>ls -l: 显示服务详细信息列表</li>\n<li>ls XxxService: 显示服务的方法列表</li>\n<li>ls -l XxxService: 显示服务的方法详细信息列表</li>\n</ol>\n<img src=\"/2017/10/23/171023/ps&ls.png\" title=\"ls\">\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p>显示服务端口列表，可用来查看服务是否已成功注册</p>\n<ol>\n<li>ps: 显示服务端口列表</li>\n<li>ps -l: 显示服务地址列表</li>\n<li>ps 20880: 显示端口上的连接信息</li>\n<li>ps -l 20880: 显示端口上的连接详细信息</li>\n</ol>\n<p>见上图</p>\n<h2 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h2><p>跟踪服务任意方法的调用情况</p>\n<ol>\n<li>trace XxxService: 跟踪 1 次服务任意方法的调用情况</li>\n<li>trace XxxService 10: 跟踪 10 次服务任意方法的调用情况</li>\n<li>trace XxxService xxxMethod: 跟踪 1 次服务方法的调用情况</li>\n<li>trace XxxService xxxMethod 10: 跟踪 10 次服务方法的调用情况</li>\n</ol>\n<img src=\"/2017/10/23/171023/trace.png\" title=\"trace\">\n<h2 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"invoke\"></a>invoke</h2><p>调用服务的方法，通过该命令可直接调试方法。</p>\n<ol>\n<li>invoke XxxService.xxxMethod({“prop”: “value”}): 调用服务的方法</li>\n<li>invoke xxxMethod({“prop”: “value”}): 调用服务的方法(自动查找包含此方法的服务)</li>\n</ol>\n<img src=\"/2017/10/23/171023/invoke.png\" title=\"invoke\">\n<h2 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h2><p>更多 Dubbo Telnet 命令请参阅：<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/references/telnet.html\" target=\"_blank\" rel=\"noopener\">Telnet 命令参考手册</a> </p>\n"},{"layout":"blogs_default","title":"产品性能自测","subtitle":"对kairosdb写入、读出性能的测试","date":"2017-12-10T14:08:41.000Z","_content":"\n*本文是从公司内网KB转过来的，格式有点混乱懒得改了QAZ~~\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ FAQ\n+ 一、测试目的\n+ 二、测试环境\n+ 三、测试方法\n+ 四、测试结果\n    + 写:\n    + 读：\n+ 五、结论\n    + 1、指标库写性能：\n    + 2、指标库读性能：\n\n<h2 id=\"id-指标库性能测试-FAQ\">FAQ</h2>\n<p><strong>1.写入能力：多少个15秒监控周期的主机，或180秒监控周期的网络设备的数据写入</strong></p>\n<p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，</p>\n<p style=\"margin-left: 30.0px;\">若部署单节点Cassandra，在redis集群状况良好的情况下，每分钟可写入80W个指标，可支持800000/400=2000个资源左右;</p>\n<p style=\"margin-left: 30.0px;\">若部署Cassandra 集群，每分钟可写入110W个指标，可支持1100000/400=2750个资源左右;</p>\n<p style=\"margin-left: 30.0px;\">考虑到稳定性可酌情减少资源量或增加配置。</p>\n<p><strong>2.读出能力：每秒完成指定数据点数查询的TPS性能峰值，以便预测可以支持什么数量的仪表盘</strong></p>\n<p style=\"margin-left: 30.0px;\">在三台4C*16G的Cassandra节点的配置下，稳定查询的前提下，每分钟至少400条并发请求（每条请求至少6000条元数据，大约为15分钟的数据）。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p></p>\n<p></p>\n<p></p>\n<h2 id=\"id-指标库性能测试-一、测试目的\">一、测试目的</h2>\n<p>测试在指定硬件条件下，指标库写入能力与读取能力。</p>\n<h2 id=\"id-指标库性能测试-二、测试环境\">二、测试环境</h2>\n<div class=\"table-wrap\">\n    <table class=\"confluenceTable\">\n        <tbody>\n        <tr>\n            <th class=\"confluenceTh\">ip</th>\n            <th colspan=\"1\" class=\"confluenceTh\">cpu</th>\n            <th class=\"confluenceTh\">内存</th>\n            <th colspan=\"1\" class=\"confluenceTh\">磁盘</th>\n            <th colspan=\"1\" class=\"confluenceTh\">用途</th>\n            <th colspan=\"1\" class=\"confluenceTh\">备注</th>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\">个人电脑</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>部署jmeter</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.37</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">6<span>核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">8G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td rowspan=\"4\" class=\"confluenceTd\">部署jmeter-server</td>\n            <td rowspan=\"4\" class=\"confluenceTd\"><p><span>通过jmeter来发送测试请求，</span></p>\n                <p>这些机器同时部署着其他产品。<br/><br/></p></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.38</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.65</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>8G</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.61.10</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">24G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\">10.1.53.39</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td colspan=\"1\" class=\"confluenceTd\">指标库、ES、租户等组件</td>\n            <td colspan=\"1\" class=\"confluenceTd\">该机器主要用来部署指标库</td>\n        </tr>\n        <tr>\n            <td class=\"confluenceTd\">10.1.61.117</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">38G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">kairosdb、omp等</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>kairosdb 堆内存为默认的3g</span></td>\n        </tr>\n        <tr>\n            <td class=\"confluenceTd\">10.1.61.118</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">38G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">Cassandra</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><p><span>kairosdb 堆内存为<span>为默认的4</span>g，</span></p>\n                <p>计算公式 max(min(1/2 ram, 1024MB),min(1/4 ram, 8GB))</p></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n<p></p>\n<h2 id=\"id-指标库性能测试-三、测试方法\">三、测试方法</h2>\n<p>测试工具为Jmeter，通过调用指标库相应的openApi测试，用jconsole 监控进程占用资源变化。</p>\n<h2 id=\"id-指标库性能测试-四、测试结果\">四、测试结果</h2><h4 id=\"id-指标库性能测试-写:\">写:</h4>\n<p style=\"margin-left: 30.0px;\"><span>Ramp-up Period <span>决定多长时间启动所有线程。如果使用10个线程，ramp-up period是100秒，那么JMeter用100秒使所有10个线程启动并运行。每个线程会在上一个线程启动后10秒（100/10）启动。</span></span>\n</p>\n<p style=\"margin-left: 30.0px;\">monitor 指标上报的频率是15S一次，故此处从 以15S/s 的频率启动一个上报线程开始测试。</p>\n<p style=\"margin-left: 30.0px;\">如组1，测试逻辑为：</p>\n<p style=\"margin-left: 60.0px;\">每15秒启动一个线程，单个线程每次上报25个指标，重复上报500次，每分钟指标写入请求次数为5W条。</p>\n<p style=\"margin-left: 60.0px;\">jmeter-server为1，表示只在本机运行测试；若为4，表示在4个机器上同时对指标库发起请求测试。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p></p>\n<p></p>\n<p style=\"margin-left: 30.0px;\">1.kairosdb 自带写入统计指标：</p>\n<p style=\"margin-left: 60.0px;\">kairosdb.metric_counters - Counts the number of data points received since the last\n    report. Tags are used to separate one metric from another.（统计自上次上报后接收的数据量。标签用于区分指标。）</p>\n<p style=\"margin-left: 60.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">kairosdb 统计结果：</p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  kairosdb_metric_count.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\">“1”处为组别12的测试结果，“2”处为直接调用kairosdb restApi 写入接口，“3”处为组别14 的结果。结果与指标库的统计日志一致。\n\n<p style=\"margin-left: 30.0px;\">2.时间有限，每组测试时间间隔较短，因此可能会对CPU、内存以及Cassandra状态产生影响，使结果不够准确。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\"><strong>注：</strong></p>\n<p style=\"margin-left: 30.0px;\">【1】：指标库redis 报内存不够，异常： Can't save in background: fork: Cannot allocate memory</p>\n<p style=\"margin-left: 30.0px;\">【2】：<span style=\"background-color: transparent;\">短时间插入大量指标会导致未压实的sstable数据太多，压实进程报可用磁盘空间不足，重新压实...恶性循环。</span>\n</p>\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br/></span></p>\n<div class=\"code panel pdl\" style=\"border-width: 1px;\">\n    <div class=\"codeContent panelContent pdl\">\n    \n```\n<![CDATA[[root@localhost data_points-1e09be40c3c811e7977aa147ea7baf03]# /opt/cassandra/bin/nodetool compactionstats -H\npending tasks: 2\n- kairosdb.data_points: 2\nid                                   compaction type keyspace table       completed total    unit  progress\nef340e00-d4d8-11e7-a239-0d717928a22e Compaction      kairosdb data_points 6.23 GB   11.42 GB bytes 54.56%\nActive compaction remaining time :   0h05m32s\n]]>\n```\n\n    </div>\n</div>\n<p style=\"margin-left: 30.0px;\"><span><br/></span></p>\n<p style=\"margin-left: 30.0px;\"><span>Cassandra报异常:</span></p>\n<div class=\"code panel pdl\" style=\"border-width: 1px;\">\n    <div class=\"codeContent panelContent pdl\">\n    \n```\n<![CDATA[WARN  [CompactionExecutor:46] 2017-11-28 22:26:29,785 CompactionTask.java:91 - insufficient space to compact all requested files BigTableReader(path=&#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-216-big-Data.db&#39;), BigTableReader(path=&#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-237-big-Data.db&#39;)\nERROR [CompactionExecutor:46] 2017-11-28 22:26:29,827 CassandraDaemon.java:195 - Exception in thread Thread[CompactionExecutor:46,1,main]\njava.lang.RuntimeException: Not enough space for compaction, estimated sstables = 1, expected write size = 2395303467\n\tat org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(CompactionTask.java:278) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:126) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:82) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:60) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:264) ~[apache-cassandra-3.5.jar:3.5]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_144]\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_144]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_144]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]\n\n]]>\n```\n\n    </div>\n</div>\n<p></p>\n<p style=\"margin-left: 30.0px;\">解决方法：</p>\n<p style=\"margin-left: 60.0px;\">1、增大磁盘空间、</p>\n<p style=\"margin-left: 60.0px;\">2、直接删除同一编号的sstable 大文件</p>\n<p style=\"margin-left: 60.0px;\">3、重装Cassandra</p><h4 id=\"id-指标库性能测试-多节点写:\">多节点写:</h4>\n<p style=\"margin-left: 30.0px;\">1.通过观察发现，写的瓶颈在指标库的gateway，然后增加多节点的测试如下：</p>\n<ul>\n    <li style=\"margin-left: 30.0px;\">开启一个gateway、一个writer模块后，指标写入能力在 <strong>50W/分钟</strong>；</li>\n    <li style=\"margin-left: 30.0px;\">开启三个gateway、一个writer模块后，指标写入能力在 <strong>80W/分钟</strong>；</li>\n    <li style=\"margin-left: 30.0px;\">开启三个三个gateway、三个writer 模块后，指标写入能力在 <strong>85W/分钟</strong>。</li>\n</ul>\n\n<p>\n{% asset_img  kairosdb_metric_count_70W_75W.png %}\n\n<p style=\"margin-left: 30.0px;\">2.当部署Cassandra集群（3个节点）后，指标写入能力可以再次提升，<span style=\"background-color: transparent;\">开启三个gateway、一个writer模块，指标写入能力在 <strong>100W/分钟</strong> ，此状态下可持续写入四个小时，期间redis会报内存不够的异常。</span>\n</p>\n\n<p style=\"margin-left: 30.0px; >\n{% asset_img metric_count100W .png %}\n\n</p>\n\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\">另外，当指标库写入在满载的情况下，指标的读取能力会受到很大影响，且写入也会偶尔报连接超时现象。</span>\n</p>\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br/></span></p><h4 id=\"id-指标库性能测试-读：\">\n    读：</h4>\n<p>指标的查询，其实是kairosdb去查Cassandra中数据。因此kairosdb查Cassandra的速度才是关键因素。而查Cassandra数据的速度，跟查询的Cassandra的row数量、元数据量等因素相关。</p>\n<p>要模拟读取测试，就需要先调查现场实际查询的row和元数据大小。</p>\n<p>统计局的统计如下：</p>\n<p style=\"margin-left: 30.0px;\">上图为密集查询30分钟内指标时，从Cassandra中查询的row的行数；</p>\n<p style=\"margin-left: 30.0px;\">中图为密集查询30分钟内指标时，从Cassandra中查询的元数据的数量；</p>\n<p style=\"margin-left: 30.0px;\">下图为定时查询时row的行数。</p>\n<p>\n\n</p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_row_count2.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_sample_size.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_row_count.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">可以看出：</p>\n<p style=\"margin-left: 30.0px;\">密集查询时，row最大的在4000，大部分比较小，接近1。定时查询时，row在100行以下。</p>\n<p style=\"margin-left: 30.0px;\">现场400个设备，查询30分钟指标时，理论上应该有大约400*4*30=48000 的元数据，实际查询时，要小于该值。基本都在几百条。</p>\n<p></p>\n<p></p>\n\n<p style=\"margin-left: 30.0px;\">过程：</p>\n<ol>\n    <li>可以看到单Cassandra节点下，kairosdb查询Cassandra最短耗时已经在2S左右，而集群模式下，kairosdb查询Cassandra的最短耗时在200ms\n        左右，可以看出在低硬件配置下，Cassandra部署集群模式比单机模式的性能提升很大。\n    </li>\n    <li>Cassandra刚部署时，查询性能表现优秀，连续写入一个小时数据后，查询性能下降。</li>\n    <li>2-5组发现kairosdb 查询时间正常， 但指标库查询出现超时，经建飞排查，原因是调用kairosdb client时创建的 http连接 最大数量最2，修改为200后，情况好转。<br/>\n\n\n  {% asset_img  image2017-12-8_11_24_9.png %}\n\n    </li>\n    <li>从测试过程可以看到，部分指标库的查询耗时比kairosdb查Cassandra的耗时长很多，查询kairosdb.datastore.queries_waiting\n        指标，发现kairosdb存在大量等待线程。如下：<br/><br/>\n        \n{% asset_img  kairosdb.datastore.queries_waiting.png %}\n\n          <br/>修改\n        kairosdb 的配置：kairosdb.datastore.concurrentQueryThread ，再次查询，依然会有等待的查询线程。<br/>据此判断，当查询15个指标时，每个指标耗时在2.5S左右时，此硬件配置下的kairosdb性能已达瓶颈，影响因素为CPU核数。当更改部署kairosdb\n        机器的核数后，性能得到了提升。\n    </li>\n    <li>同样的查询条件下，CPU核数与kairosdb 的concurrentQueryThread 参数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li>\n</ol>\n<h2 id=\"id-指标库性能测试-五、结论\"><br/>五、结论</h2>\n<h3 id=\"id-指标库性能测试-1、指标库写性能：\">1、指标库写性能：</h3>\n<ol>\n    <li>由3、5、6组可知，每分钟请求总量一定的情况下，在未到达瓶颈前，并发线程越多，指标写入量越大。</li>\n    <li>由6、8组可知，本机的机器性能并未成为影响指标写入的因素。</li>\n    <li>由6、7和8、9两组可知，在4核16G单节点Cassandra 配置下，请求数在50W/min 左右时，指标库的gateway 模块接收请求已到达瓶颈，为 <strong>50W /min</strong> 左右。</li>\n    <li>由9、10、11三组可知，在指标写入能力到达瓶颈后，改变并发的线程数，不再产生影响。</li>\n    <li>由9、12组可知，待写入的指标类型量不是影响因素。</li>\n    <li>由15组可知，当指标库写入请求量每分钟到千万级时，会出现redis 内存问题。</li>\n    <li>单指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为 <strong>80W/min</strong>；<br/>多指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为\n        <strong>85W/min</strong>；<br/>单指标库、多Cassandra节点下，指标写入能力瓶颈为 <strong>100W/min</strong>；<br/>多指标库、多Cassandra节点下，指标写入能力瓶颈为<strong>\n            <strong>110W/min</strong></strong>。<br/><br/><br/></li>\n</ol>\n<p></p>\n<p>配置预估：</p>\n<p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，若采用单节点Cassandra\n    配置，在redis集群状况良好的情况下，可支持1750个资源左右，考虑到稳定性可酌情减少资源量或增加配置。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<h3 id=\"id-指标库性能测试-2、指标库读性能：\">2、指标库读性能：</h3>\n<ol>\n    <li>由1、2组可知R12版本指标库在现有配置下，最多支持每分钟30次的查询。</li>\n    <li>由2、3组可知，查询较慢时，每10S钟查询10次，比每5S钟查询5次，查询要快。</li>\n    <li>由2、4组可知，相同的请求量下，同一个指标密集查询2次，比两个指标同时各查一次要慢很多。</li>\n    <li>由1、5组可知，查询的数据量从600到7200，查询的Cassandra row从 77到740，查询耗时基本没有变化，不过Cassandra的资源消耗增加很多。</li>\n    <li>由2、7组可知，kairosdb client 创建的 http连接 最大数量与查询性能十分相关，R13中已调整该参数为200。</li>\n    <li>由6-8、14、15组可知，单Cassandra节点下，指标查询的瓶颈为 <strong>90次/分钟</strong>，且当 指标库的查询耗时 与\n        kairosdb查Cassandra的耗时相差不大时，可以维持稳定查询状态，否则指标库查询超时会越来越严重。\n    </li>\n    <li>由8-13、17-19组可知，kairosdb的concurrentQueryThread 参数值与CPU核数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li>\n    <li>由8、16组可知，指标库是否集群模式不是瓶颈。</li>\n    <li>由19、22和20、23两组可知，单kairosdb 8核的查询性能 与双kairosdb 4核基本相同，所以kairosdb 的查询性能与机器的CPU核数有关。</li>\n    <li>由19、24组可知，当前的查询瓶颈在Cassandra 处，Cassandra 集群的查询性能是单节点的10倍。</li>\n    <li>由24-29组可知，Cassandra集群下，查询性能瓶颈为<strong>1400次/分钟</strong>，当查询到1500次/分钟时，kairosdb出现瓶颈，等待查询线程不断增加。</li>\n    <li>由30、31组可知，当Cassandra写入一段时间数据后，指标查询性能下降很多。</li>\n</ol>\n\n","source":"_posts/171210.md","raw":"---\nlayout: blogs_default\ntitle: 产品性能自测\nsubtitle: 对kairosdb写入、读出性能的测试\ndate: 2017-12-10 22:08:41\ncategories:\n- 未分类\ntags:\n    - kairosdb\n    - cassandra\n    - jmeter\n\n---\n\n*本文是从公司内网KB转过来的，格式有点混乱懒得改了QAZ~~\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ FAQ\n+ 一、测试目的\n+ 二、测试环境\n+ 三、测试方法\n+ 四、测试结果\n    + 写:\n    + 读：\n+ 五、结论\n    + 1、指标库写性能：\n    + 2、指标库读性能：\n\n<h2 id=\"id-指标库性能测试-FAQ\">FAQ</h2>\n<p><strong>1.写入能力：多少个15秒监控周期的主机，或180秒监控周期的网络设备的数据写入</strong></p>\n<p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，</p>\n<p style=\"margin-left: 30.0px;\">若部署单节点Cassandra，在redis集群状况良好的情况下，每分钟可写入80W个指标，可支持800000/400=2000个资源左右;</p>\n<p style=\"margin-left: 30.0px;\">若部署Cassandra 集群，每分钟可写入110W个指标，可支持1100000/400=2750个资源左右;</p>\n<p style=\"margin-left: 30.0px;\">考虑到稳定性可酌情减少资源量或增加配置。</p>\n<p><strong>2.读出能力：每秒完成指定数据点数查询的TPS性能峰值，以便预测可以支持什么数量的仪表盘</strong></p>\n<p style=\"margin-left: 30.0px;\">在三台4C*16G的Cassandra节点的配置下，稳定查询的前提下，每分钟至少400条并发请求（每条请求至少6000条元数据，大约为15分钟的数据）。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p></p>\n<p></p>\n<p></p>\n<h2 id=\"id-指标库性能测试-一、测试目的\">一、测试目的</h2>\n<p>测试在指定硬件条件下，指标库写入能力与读取能力。</p>\n<h2 id=\"id-指标库性能测试-二、测试环境\">二、测试环境</h2>\n<div class=\"table-wrap\">\n    <table class=\"confluenceTable\">\n        <tbody>\n        <tr>\n            <th class=\"confluenceTh\">ip</th>\n            <th colspan=\"1\" class=\"confluenceTh\">cpu</th>\n            <th class=\"confluenceTh\">内存</th>\n            <th colspan=\"1\" class=\"confluenceTh\">磁盘</th>\n            <th colspan=\"1\" class=\"confluenceTh\">用途</th>\n            <th colspan=\"1\" class=\"confluenceTh\">备注</th>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\">个人电脑</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>部署jmeter</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.37</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">6<span>核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">8G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td rowspan=\"4\" class=\"confluenceTd\">部署jmeter-server</td>\n            <td rowspan=\"4\" class=\"confluenceTd\"><p><span>通过jmeter来发送测试请求，</span></p>\n                <p>这些机器同时部署着其他产品。<br/><br/></p></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.38</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.65</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>8G</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.61.10</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">24G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n        </tr>\n        <tr>\n            <td colspan=\"1\" class=\"confluenceTd\">10.1.53.39</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td>\n            <td colspan=\"1\" class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\"></td>\n            <td colspan=\"1\" class=\"confluenceTd\">指标库、ES、租户等组件</td>\n            <td colspan=\"1\" class=\"confluenceTd\">该机器主要用来部署指标库</td>\n        </tr>\n        <tr>\n            <td class=\"confluenceTd\">10.1.61.117</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">38G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">kairosdb、omp等</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><span>kairosdb 堆内存为默认的3g</span></td>\n        </tr>\n        <tr>\n            <td class=\"confluenceTd\">10.1.61.118</td>\n            <td colspan=\"1\" class=\"confluenceTd\">4核</td>\n            <td class=\"confluenceTd\">16G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">38G</td>\n            <td colspan=\"1\" class=\"confluenceTd\">Cassandra</td>\n            <td colspan=\"1\" class=\"confluenceTd\"><p><span>kairosdb 堆内存为<span>为默认的4</span>g，</span></p>\n                <p>计算公式 max(min(1/2 ram, 1024MB),min(1/4 ram, 8GB))</p></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n<p></p>\n<h2 id=\"id-指标库性能测试-三、测试方法\">三、测试方法</h2>\n<p>测试工具为Jmeter，通过调用指标库相应的openApi测试，用jconsole 监控进程占用资源变化。</p>\n<h2 id=\"id-指标库性能测试-四、测试结果\">四、测试结果</h2><h4 id=\"id-指标库性能测试-写:\">写:</h4>\n<p style=\"margin-left: 30.0px;\"><span>Ramp-up Period <span>决定多长时间启动所有线程。如果使用10个线程，ramp-up period是100秒，那么JMeter用100秒使所有10个线程启动并运行。每个线程会在上一个线程启动后10秒（100/10）启动。</span></span>\n</p>\n<p style=\"margin-left: 30.0px;\">monitor 指标上报的频率是15S一次，故此处从 以15S/s 的频率启动一个上报线程开始测试。</p>\n<p style=\"margin-left: 30.0px;\">如组1，测试逻辑为：</p>\n<p style=\"margin-left: 60.0px;\">每15秒启动一个线程，单个线程每次上报25个指标，重复上报500次，每分钟指标写入请求次数为5W条。</p>\n<p style=\"margin-left: 60.0px;\">jmeter-server为1，表示只在本机运行测试；若为4，表示在4个机器上同时对指标库发起请求测试。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p></p>\n<p></p>\n<p style=\"margin-left: 30.0px;\">1.kairosdb 自带写入统计指标：</p>\n<p style=\"margin-left: 60.0px;\">kairosdb.metric_counters - Counts the number of data points received since the last\n    report. Tags are used to separate one metric from another.（统计自上次上报后接收的数据量。标签用于区分指标。）</p>\n<p style=\"margin-left: 60.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">kairosdb 统计结果：</p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  kairosdb_metric_count.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\">“1”处为组别12的测试结果，“2”处为直接调用kairosdb restApi 写入接口，“3”处为组别14 的结果。结果与指标库的统计日志一致。\n\n<p style=\"margin-left: 30.0px;\">2.时间有限，每组测试时间间隔较短，因此可能会对CPU、内存以及Cassandra状态产生影响，使结果不够准确。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\"><strong>注：</strong></p>\n<p style=\"margin-left: 30.0px;\">【1】：指标库redis 报内存不够，异常： Can't save in background: fork: Cannot allocate memory</p>\n<p style=\"margin-left: 30.0px;\">【2】：<span style=\"background-color: transparent;\">短时间插入大量指标会导致未压实的sstable数据太多，压实进程报可用磁盘空间不足，重新压实...恶性循环。</span>\n</p>\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br/></span></p>\n<div class=\"code panel pdl\" style=\"border-width: 1px;\">\n    <div class=\"codeContent panelContent pdl\">\n    \n```\n<![CDATA[[root@localhost data_points-1e09be40c3c811e7977aa147ea7baf03]# /opt/cassandra/bin/nodetool compactionstats -H\npending tasks: 2\n- kairosdb.data_points: 2\nid                                   compaction type keyspace table       completed total    unit  progress\nef340e00-d4d8-11e7-a239-0d717928a22e Compaction      kairosdb data_points 6.23 GB   11.42 GB bytes 54.56%\nActive compaction remaining time :   0h05m32s\n]]>\n```\n\n    </div>\n</div>\n<p style=\"margin-left: 30.0px;\"><span><br/></span></p>\n<p style=\"margin-left: 30.0px;\"><span>Cassandra报异常:</span></p>\n<div class=\"code panel pdl\" style=\"border-width: 1px;\">\n    <div class=\"codeContent panelContent pdl\">\n    \n```\n<![CDATA[WARN  [CompactionExecutor:46] 2017-11-28 22:26:29,785 CompactionTask.java:91 - insufficient space to compact all requested files BigTableReader(path=&#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-216-big-Data.db&#39;), BigTableReader(path=&#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-237-big-Data.db&#39;)\nERROR [CompactionExecutor:46] 2017-11-28 22:26:29,827 CassandraDaemon.java:195 - Exception in thread Thread[CompactionExecutor:46,1,main]\njava.lang.RuntimeException: Not enough space for compaction, estimated sstables = 1, expected write size = 2395303467\n\tat org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(CompactionTask.java:278) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:126) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:82) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:60) ~[apache-cassandra-3.5.jar:3.5]\n\tat org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:264) ~[apache-cassandra-3.5.jar:3.5]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_144]\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_144]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_144]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]\n\n]]>\n```\n\n    </div>\n</div>\n<p></p>\n<p style=\"margin-left: 30.0px;\">解决方法：</p>\n<p style=\"margin-left: 60.0px;\">1、增大磁盘空间、</p>\n<p style=\"margin-left: 60.0px;\">2、直接删除同一编号的sstable 大文件</p>\n<p style=\"margin-left: 60.0px;\">3、重装Cassandra</p><h4 id=\"id-指标库性能测试-多节点写:\">多节点写:</h4>\n<p style=\"margin-left: 30.0px;\">1.通过观察发现，写的瓶颈在指标库的gateway，然后增加多节点的测试如下：</p>\n<ul>\n    <li style=\"margin-left: 30.0px;\">开启一个gateway、一个writer模块后，指标写入能力在 <strong>50W/分钟</strong>；</li>\n    <li style=\"margin-left: 30.0px;\">开启三个gateway、一个writer模块后，指标写入能力在 <strong>80W/分钟</strong>；</li>\n    <li style=\"margin-left: 30.0px;\">开启三个三个gateway、三个writer 模块后，指标写入能力在 <strong>85W/分钟</strong>。</li>\n</ul>\n\n<p>\n{% asset_img  kairosdb_metric_count_70W_75W.png %}\n\n<p style=\"margin-left: 30.0px;\">2.当部署Cassandra集群（3个节点）后，指标写入能力可以再次提升，<span style=\"background-color: transparent;\">开启三个gateway、一个writer模块，指标写入能力在 <strong>100W/分钟</strong> ，此状态下可持续写入四个小时，期间redis会报内存不够的异常。</span>\n</p>\n\n<p style=\"margin-left: 30.0px; >\n{% asset_img metric_count100W .png %}\n\n</p>\n\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\">另外，当指标库写入在满载的情况下，指标的读取能力会受到很大影响，且写入也会偶尔报连接超时现象。</span>\n</p>\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br/></span></p><h4 id=\"id-指标库性能测试-读：\">\n    读：</h4>\n<p>指标的查询，其实是kairosdb去查Cassandra中数据。因此kairosdb查Cassandra的速度才是关键因素。而查Cassandra数据的速度，跟查询的Cassandra的row数量、元数据量等因素相关。</p>\n<p>要模拟读取测试，就需要先调查现场实际查询的row和元数据大小。</p>\n<p>统计局的统计如下：</p>\n<p style=\"margin-left: 30.0px;\">上图为密集查询30分钟内指标时，从Cassandra中查询的row的行数；</p>\n<p style=\"margin-left: 30.0px;\">中图为密集查询30分钟内指标时，从Cassandra中查询的元数据的数量；</p>\n<p style=\"margin-left: 30.0px;\">下图为定时查询时row的行数。</p>\n<p>\n\n</p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_row_count2.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_sample_size.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">\n{% asset_img  统计局_query_row_count.png %}\n\n</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\"></p>\n<p style=\"margin-left: 30.0px;\">可以看出：</p>\n<p style=\"margin-left: 30.0px;\">密集查询时，row最大的在4000，大部分比较小，接近1。定时查询时，row在100行以下。</p>\n<p style=\"margin-left: 30.0px;\">现场400个设备，查询30分钟指标时，理论上应该有大约400*4*30=48000 的元数据，实际查询时，要小于该值。基本都在几百条。</p>\n<p></p>\n<p></p>\n\n<p style=\"margin-left: 30.0px;\">过程：</p>\n<ol>\n    <li>可以看到单Cassandra节点下，kairosdb查询Cassandra最短耗时已经在2S左右，而集群模式下，kairosdb查询Cassandra的最短耗时在200ms\n        左右，可以看出在低硬件配置下，Cassandra部署集群模式比单机模式的性能提升很大。\n    </li>\n    <li>Cassandra刚部署时，查询性能表现优秀，连续写入一个小时数据后，查询性能下降。</li>\n    <li>2-5组发现kairosdb 查询时间正常， 但指标库查询出现超时，经建飞排查，原因是调用kairosdb client时创建的 http连接 最大数量最2，修改为200后，情况好转。<br/>\n\n\n  {% asset_img  image2017-12-8_11_24_9.png %}\n\n    </li>\n    <li>从测试过程可以看到，部分指标库的查询耗时比kairosdb查Cassandra的耗时长很多，查询kairosdb.datastore.queries_waiting\n        指标，发现kairosdb存在大量等待线程。如下：<br/><br/>\n        \n{% asset_img  kairosdb.datastore.queries_waiting.png %}\n\n          <br/>修改\n        kairosdb 的配置：kairosdb.datastore.concurrentQueryThread ，再次查询，依然会有等待的查询线程。<br/>据此判断，当查询15个指标时，每个指标耗时在2.5S左右时，此硬件配置下的kairosdb性能已达瓶颈，影响因素为CPU核数。当更改部署kairosdb\n        机器的核数后，性能得到了提升。\n    </li>\n    <li>同样的查询条件下，CPU核数与kairosdb 的concurrentQueryThread 参数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li>\n</ol>\n<h2 id=\"id-指标库性能测试-五、结论\"><br/>五、结论</h2>\n<h3 id=\"id-指标库性能测试-1、指标库写性能：\">1、指标库写性能：</h3>\n<ol>\n    <li>由3、5、6组可知，每分钟请求总量一定的情况下，在未到达瓶颈前，并发线程越多，指标写入量越大。</li>\n    <li>由6、8组可知，本机的机器性能并未成为影响指标写入的因素。</li>\n    <li>由6、7和8、9两组可知，在4核16G单节点Cassandra 配置下，请求数在50W/min 左右时，指标库的gateway 模块接收请求已到达瓶颈，为 <strong>50W /min</strong> 左右。</li>\n    <li>由9、10、11三组可知，在指标写入能力到达瓶颈后，改变并发的线程数，不再产生影响。</li>\n    <li>由9、12组可知，待写入的指标类型量不是影响因素。</li>\n    <li>由15组可知，当指标库写入请求量每分钟到千万级时，会出现redis 内存问题。</li>\n    <li>单指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为 <strong>80W/min</strong>；<br/>多指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为\n        <strong>85W/min</strong>；<br/>单指标库、多Cassandra节点下，指标写入能力瓶颈为 <strong>100W/min</strong>；<br/>多指标库、多Cassandra节点下，指标写入能力瓶颈为<strong>\n            <strong>110W/min</strong></strong>。<br/><br/><br/></li>\n</ol>\n<p></p>\n<p>配置预估：</p>\n<p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，若采用单节点Cassandra\n    配置，在redis集群状况良好的情况下，可支持1750个资源左右，考虑到稳定性可酌情减少资源量或增加配置。</p>\n<p style=\"margin-left: 30.0px;\"></p>\n<h3 id=\"id-指标库性能测试-2、指标库读性能：\">2、指标库读性能：</h3>\n<ol>\n    <li>由1、2组可知R12版本指标库在现有配置下，最多支持每分钟30次的查询。</li>\n    <li>由2、3组可知，查询较慢时，每10S钟查询10次，比每5S钟查询5次，查询要快。</li>\n    <li>由2、4组可知，相同的请求量下，同一个指标密集查询2次，比两个指标同时各查一次要慢很多。</li>\n    <li>由1、5组可知，查询的数据量从600到7200，查询的Cassandra row从 77到740，查询耗时基本没有变化，不过Cassandra的资源消耗增加很多。</li>\n    <li>由2、7组可知，kairosdb client 创建的 http连接 最大数量与查询性能十分相关，R13中已调整该参数为200。</li>\n    <li>由6-8、14、15组可知，单Cassandra节点下，指标查询的瓶颈为 <strong>90次/分钟</strong>，且当 指标库的查询耗时 与\n        kairosdb查Cassandra的耗时相差不大时，可以维持稳定查询状态，否则指标库查询超时会越来越严重。\n    </li>\n    <li>由8-13、17-19组可知，kairosdb的concurrentQueryThread 参数值与CPU核数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li>\n    <li>由8、16组可知，指标库是否集群模式不是瓶颈。</li>\n    <li>由19、22和20、23两组可知，单kairosdb 8核的查询性能 与双kairosdb 4核基本相同，所以kairosdb 的查询性能与机器的CPU核数有关。</li>\n    <li>由19、24组可知，当前的查询瓶颈在Cassandra 处，Cassandra 集群的查询性能是单节点的10倍。</li>\n    <li>由24-29组可知，Cassandra集群下，查询性能瓶颈为<strong>1400次/分钟</strong>，当查询到1500次/分钟时，kairosdb出现瓶颈，等待查询线程不断增加。</li>\n    <li>由30、31组可知，当Cassandra写入一段时间数据后，指标查询性能下降很多。</li>\n</ol>\n\n","slug":"171210","published":1,"updated":"2018-09-22T02:46:04.906Z","comments":1,"photos":[],"link":"","_id":"cjovkdwt20009ayqc2nue4a9k","content":"<p>*本文是从公司内网KB转过来的，格式有点混乱懒得改了QAZ~~</p>\n<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>FAQ</li>\n<li>一、测试目的</li>\n<li>二、测试环境</li>\n<li>三、测试方法</li>\n<li>四、测试结果<ul>\n<li>写:</li>\n<li>读：</li>\n</ul>\n</li>\n<li>五、结论<ul>\n<li>1、指标库写性能：</li>\n<li>2、指标库读性能：</li>\n</ul>\n</li>\n</ul>\n<p></p><h2 id=\"id-指标库性能测试-FAQ\">FAQ</h2><p></p>\n<p><strong>1.写入能力：多少个15秒监控周期的主机，或180秒监控周期的网络设备的数据写入</strong></p><br><p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，</p><br><p style=\"margin-left: 30.0px;\">若部署单节点Cassandra，在redis集群状况良好的情况下，每分钟可写入80W个指标，可支持800000/400=2000个资源左右;</p><br><p style=\"margin-left: 30.0px;\">若部署Cassandra 集群，每分钟可写入110W个指标，可支持1100000/400=2750个资源左右;</p><br><p style=\"margin-left: 30.0px;\">考虑到稳定性可酌情减少资源量或增加配置。</p><br><p><strong>2.读出能力：每秒完成指定数据点数查询的TPS性能峰值，以便预测可以支持什么数量的仪表盘</strong></p><br><p style=\"margin-left: 30.0px;\">在三台4C*16G的Cassandra节点的配置下，稳定查询的前提下，每分钟至少400条并发请求（每条请求至少6000条元数据，大约为15分钟的数据）。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p></p><br><p></p><br><p></p><br><h2 id=\"id-指标库性能测试-一、测试目的\">一、测试目的</h2><br><p>测试在指定硬件条件下，指标库写入能力与读取能力。</p><br><h2 id=\"id-指标库性能测试-二、测试环境\">二、测试环境</h2><br><div class=\"table-wrap\"><br>    <table class=\"confluenceTable\"><br>        <tbody><br>        <tr><br>            <th class=\"confluenceTh\">ip</th><br>            <th colspan=\"1\" class=\"confluenceTh\">cpu</th><br>            <th class=\"confluenceTh\">内存</th><br>            <th colspan=\"1\" class=\"confluenceTh\">磁盘</th><br>            <th colspan=\"1\" class=\"confluenceTh\">用途</th><br>            <th colspan=\"1\" class=\"confluenceTh\">备注</th><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\">个人电脑</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>部署jmeter</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.37</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">6<span>核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">8G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td rowspan=\"4\" class=\"confluenceTd\">部署jmeter-server</td><br>            <td rowspan=\"4\" class=\"confluenceTd\"><p><span>通过jmeter来发送测试请求，</span></p><br>                <p>这些机器同时部署着其他产品。<br><br></p></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.38</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.65</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>8G</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.61.10</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">24G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\">10.1.53.39</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td colspan=\"1\" class=\"confluenceTd\">指标库、ES、租户等组件</td><br>            <td colspan=\"1\" class=\"confluenceTd\">该机器主要用来部署指标库</td><br>        </tr><br>        <tr><br>            <td class=\"confluenceTd\">10.1.61.117</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">38G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">kairosdb、omp等</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>kairosdb 堆内存为默认的3g</span></td><br>        </tr><br>        <tr><br>            <td class=\"confluenceTd\">10.1.61.118</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">38G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">Cassandra</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><p><span>kairosdb 堆内存为<span>为默认的4</span>g，</span></p><br>                <p>计算公式 max(min(1/2 ram, 1024MB),min(1/4 ram, 8GB))</p></td><br>        </tr><br>        </tbody><br>    </table><br></div><br><p></p><br><h2 id=\"id-指标库性能测试-三、测试方法\">三、测试方法</h2><br><p>测试工具为Jmeter，通过调用指标库相应的openApi测试，用jconsole 监控进程占用资源变化。</p><br><h2 id=\"id-指标库性能测试-四、测试结果\">四、测试结果</h2><h4 id=\"id-指标库性能测试-写:\">写:</h4><br><p style=\"margin-left: 30.0px;\"><span>Ramp-up Period <span>决定多长时间启动所有线程。如果使用10个线程，ramp-up period是100秒，那么JMeter用100秒使所有10个线程启动并运行。每个线程会在上一个线程启动后10秒（100/10）启动。</span></span><br></p><br><p style=\"margin-left: 30.0px;\">monitor 指标上报的频率是15S一次，故此处从 以15S/s 的频率启动一个上报线程开始测试。</p><br><p style=\"margin-left: 30.0px;\">如组1，测试逻辑为：</p><br><p style=\"margin-left: 60.0px;\">每15秒启动一个线程，单个线程每次上报25个指标，重复上报500次，每分钟指标写入请求次数为5W条。</p><br><p style=\"margin-left: 60.0px;\">jmeter-server为1，表示只在本机运行测试；若为4，表示在4个机器上同时对指标库发起请求测试。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p></p><br><p></p><br><p style=\"margin-left: 30.0px;\">1.kairosdb 自带写入统计指标：</p><br><p style=\"margin-left: 60.0px;\">kairosdb.metric_counters - Counts the number of data points received since the last<br>    report. Tags are used to separate one metric from another.（统计自上次上报后接收的数据量。标签用于区分指标。）</p><br><p style=\"margin-left: 60.0px;\"></p><br><p style=\"margin-left: 30.0px;\">kairosdb 统计结果：</p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/kairosdb_metric_count.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\">“1”处为组别12的测试结果，“2”处为直接调用kairosdb restApi 写入接口，“3”处为组别14 的结果。结果与指标库的统计日志一致。<br><br></p><p style=\"margin-left: 30.0px;\">2.时间有限，每组测试时间间隔较短，因此可能会对CPU、内存以及Cassandra状态产生影响，使结果不够准确。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><strong>注：</strong></p><br><p style=\"margin-left: 30.0px;\">【1】：指标库redis 报内存不够，异常： Can’t save in background: fork: Cannot allocate memory</p><br><p style=\"margin-left: 30.0px;\">【2】：<span style=\"background-color: transparent;\">短时间插入大量指标会导致未压实的sstable数据太多，压实进程报可用磁盘空间不足，重新压实…恶性循环。</span><br></p><br><p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br></span></p><br><div class=\"code panel pdl\" style=\"border-width: 1px;\"><br>    <div class=\"codeContent panelContent pdl\"><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[[root@localhost data_points-1e09be40c3c811e7977aa147ea7baf03]# /opt/cassandra/bin/nodetool compactionstats -H</span><br><span class=\"line\">pending tasks: 2</span><br><span class=\"line\">- kairosdb.data_points: 2</span><br><span class=\"line\">id                                   compaction type keyspace table       completed total    unit  progress</span><br><span class=\"line\">ef340e00-d4d8-11e7-a239-0d717928a22e Compaction      kairosdb data_points 6.23 GB   11.42 GB bytes 54.56%</span><br><span class=\"line\">Active compaction remaining time :   0h05m32s</span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure><br><br>    </div><br></div><br><p style=\"margin-left: 30.0px;\"><span><br></span></p><br><p style=\"margin-left: 30.0px;\"><span>Cassandra报异常:</span></p><br><div class=\"code panel pdl\" style=\"border-width: 1px;\"><br>    <div class=\"codeContent panelContent pdl\"><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[WARN  [CompactionExecutor:46] 2017-11-28 22:26:29,785 CompactionTask.java:91 - insufficient space to compact all requested files BigTableReader(path=&amp;#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-216-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-237-big-Data.db&amp;#39;)</span><br><span class=\"line\">ERROR [CompactionExecutor:46] 2017-11-28 22:26:29,827 CassandraDaemon.java:195 - Exception in thread Thread[CompactionExecutor:46,1,main]</span><br><span class=\"line\">java.lang.RuntimeException: Not enough space for compaction, estimated sstables = 1, expected write size = 2395303467</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(CompactionTask.java:278) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:126) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:82) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:60) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:264) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]</span><br><span class=\"line\"></span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure><br><br>    </div><br></div><br><p></p><br><p style=\"margin-left: 30.0px;\">解决方法：</p><br><p style=\"margin-left: 60.0px;\">1、增大磁盘空间、</p><br><p style=\"margin-left: 60.0px;\">2、直接删除同一编号的sstable 大文件</p><br><p style=\"margin-left: 60.0px;\">3、重装Cassandra</p><h4 id=\"id-指标库性能测试-多节点写:\">多节点写:</h4><br><p style=\"margin-left: 30.0px;\">1.通过观察发现，写的瓶颈在指标库的gateway，然后增加多节点的测试如下：</p><br><ul><br>    <li style=\"margin-left: 30.0px;\">开启一个gateway、一个writer模块后，指标写入能力在 <strong>50W/分钟</strong>；</li><br>    <li style=\"margin-left: 30.0px;\">开启三个gateway、一个writer模块后，指标写入能力在 <strong>80W/分钟</strong>；</li><br>    <li style=\"margin-left: 30.0px;\">开启三个三个gateway、三个writer 模块后，指标写入能力在 <strong>85W/分钟</strong>。</li><br></ul><br><br><p><br><img src=\"/2017/12/10/171210/kairosdb_metric_count_70W_75W.png\"><br><br></p><p style=\"margin-left: 30.0px;\">2.当部署Cassandra集群（3个节点）后，指标写入能力可以再次提升，<span style=\"background-color: transparent;\">开启三个gateway、一个writer模块，指标写入能力在 <strong>100W/分钟</strong> ，此状态下可持续写入四个小时，期间redis会报内存不够的异常。</span><br></p>\n\n&lt;p style=”margin-left: 30.0px; &gt;<br><br><br><p></p>\n\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\">另外，当指标库写入在满载的情况下，指标的读取能力会受到很大影响，且写入也会偶尔报连接超时现象。</span><br></p><br><p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br></span></p><h4 id=\"id-指标库性能测试-读：\"><br>    读：</h4><br><p>指标的查询，其实是kairosdb去查Cassandra中数据。因此kairosdb查Cassandra的速度才是关键因素。而查Cassandra数据的速度，跟查询的Cassandra的row数量、元数据量等因素相关。</p><br><p>要模拟读取测试，就需要先调查现场实际查询的row和元数据大小。</p><br><p>统计局的统计如下：</p><br><p style=\"margin-left: 30.0px;\">上图为密集查询30分钟内指标时，从Cassandra中查询的row的行数；</p><br><p style=\"margin-left: 30.0px;\">中图为密集查询30分钟内指标时，从Cassandra中查询的元数据的数量；</p><br><p style=\"margin-left: 30.0px;\">下图为定时查询时row的行数。</p><br><p><br><br></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_row_count2.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_sample_size.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_row_count.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\">可以看出：</p><br><p style=\"margin-left: 30.0px;\">密集查询时，row最大的在4000，大部分比较小，接近1。定时查询时，row在100行以下。</p><br><p style=\"margin-left: 30.0px;\">现场400个设备，查询30分钟指标时，理论上应该有大约400<em>4</em>30=48000 的元数据，实际查询时，要小于该值。基本都在几百条。</p><br><p></p><br><p></p>\n\n<p></p><p style=\"margin-left: 30.0px;\">过程：</p><p></p>\n<ol><br>    <li>可以看到单Cassandra节点下，kairosdb查询Cassandra最短耗时已经在2S左右，而集群模式下，kairosdb查询Cassandra的最短耗时在200ms<br>        左右，可以看出在低硬件配置下，Cassandra部署集群模式比单机模式的性能提升很大。<br>    </li><br>    <li>Cassandra刚部署时，查询性能表现优秀，连续写入一个小时数据后，查询性能下降。</li><br>    <li>2-5组发现kairosdb 查询时间正常， 但指标库查询出现超时，经建飞排查，原因是调用kairosdb client时创建的 http连接 最大数量最2，修改为200后，情况好转。<br><br><br><br>  <img src=\"/2017/12/10/171210/image2017-12-8_11_24_9.png\"><br><br>    </li><br>    <li>从测试过程可以看到，部分指标库的查询耗时比kairosdb查Cassandra的耗时长很多，查询kairosdb.datastore.queries_waiting<br>        指标，发现kairosdb存在大量等待线程。如下：<br><br><br><br><img src=\"/2017/12/10/171210/kairosdb.datastore.queries_waiting.png\"><br><br>          <br>修改<br>        kairosdb 的配置：kairosdb.datastore.concurrentQueryThread ，再次查询，依然会有等待的查询线程。<br>据此判断，当查询15个指标时，每个指标耗时在2.5S左右时，此硬件配置下的kairosdb性能已达瓶颈，影响因素为CPU核数。当更改部署kairosdb<br>        机器的核数后，性能得到了提升。<br>    </li><br>    <li>同样的查询条件下，CPU核数与kairosdb 的concurrentQueryThread 参数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li><br></ol><br><h2 id=\"id-指标库性能测试-五、结论\"><br>五、结论</h2><br><h3 id=\"id-指标库性能测试-1、指标库写性能：\">1、指标库写性能：</h3><br><ol><br>    <li>由3、5、6组可知，每分钟请求总量一定的情况下，在未到达瓶颈前，并发线程越多，指标写入量越大。</li><br>    <li>由6、8组可知，本机的机器性能并未成为影响指标写入的因素。</li><br>    <li>由6、7和8、9两组可知，在4核16G单节点Cassandra 配置下，请求数在50W/min 左右时，指标库的gateway 模块接收请求已到达瓶颈，为 <strong>50W /min</strong> 左右。</li><br>    <li>由9、10、11三组可知，在指标写入能力到达瓶颈后，改变并发的线程数，不再产生影响。</li><br>    <li>由9、12组可知，待写入的指标类型量不是影响因素。</li><br>    <li>由15组可知，当指标库写入请求量每分钟到千万级时，会出现redis 内存问题。</li><br>    <li>单指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为 <strong>80W/min</strong>；<br>多指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为<br>        <strong>85W/min</strong>；<br>单指标库、多Cassandra节点下，指标写入能力瓶颈为 <strong>100W/min</strong>；<br>多指标库、多Cassandra节点下，指标写入能力瓶颈为<strong><br>            <strong>110W/min</strong></strong>。<br><br><br></li><br></ol><br><p></p><br><p>配置预估：</p><br><p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，若采用单节点Cassandra<br>    配置，在redis集群状况良好的情况下，可支持1750个资源左右，考虑到稳定性可酌情减少资源量或增加配置。</p><br><p style=\"margin-left: 30.0px;\"></p><br><h3 id=\"id-指标库性能测试-2、指标库读性能：\">2、指标库读性能：</h3><br><ol><br>    <li>由1、2组可知R12版本指标库在现有配置下，最多支持每分钟30次的查询。</li><br>    <li>由2、3组可知，查询较慢时，每10S钟查询10次，比每5S钟查询5次，查询要快。</li><br>    <li>由2、4组可知，相同的请求量下，同一个指标密集查询2次，比两个指标同时各查一次要慢很多。</li><br>    <li>由1、5组可知，查询的数据量从600到7200，查询的Cassandra row从 77到740，查询耗时基本没有变化，不过Cassandra的资源消耗增加很多。</li><br>    <li>由2、7组可知，kairosdb client 创建的 http连接 最大数量与查询性能十分相关，R13中已调整该参数为200。</li><br>    <li>由6-8、14、15组可知，单Cassandra节点下，指标查询的瓶颈为 <strong>90次/分钟</strong>，且当 指标库的查询耗时 与<br>        kairosdb查Cassandra的耗时相差不大时，可以维持稳定查询状态，否则指标库查询超时会越来越严重。<br>    </li><br>    <li>由8-13、17-19组可知，kairosdb的concurrentQueryThread 参数值与CPU核数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li><br>    <li>由8、16组可知，指标库是否集群模式不是瓶颈。</li><br>    <li>由19、22和20、23两组可知，单kairosdb 8核的查询性能 与双kairosdb 4核基本相同，所以kairosdb 的查询性能与机器的CPU核数有关。</li><br>    <li>由19、24组可知，当前的查询瓶颈在Cassandra 处，Cassandra 集群的查询性能是单节点的10倍。</li><br>    <li>由24-29组可知，Cassandra集群下，查询性能瓶颈为<strong>1400次/分钟</strong>，当查询到1500次/分钟时，kairosdb出现瓶颈，等待查询线程不断增加。</li><br>    <li>由30、31组可知，当Cassandra写入一段时间数据后，指标查询性能下降很多。</li><br></ol>\n\n","site":{"data":{}},"excerpt":"","more":"<p>*本文是从公司内网KB转过来的，格式有点混乱懒得改了QAZ~~</p>\n<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>FAQ</li>\n<li>一、测试目的</li>\n<li>二、测试环境</li>\n<li>三、测试方法</li>\n<li>四、测试结果<ul>\n<li>写:</li>\n<li>读：</li>\n</ul>\n</li>\n<li>五、结论<ul>\n<li>1、指标库写性能：</li>\n<li>2、指标库读性能：</li>\n</ul>\n</li>\n</ul>\n<p></p><h2 id=\"id-指标库性能测试-FAQ\">FAQ</h2><p></p>\n<p><strong>1.写入能力：多少个15秒监控周期的主机，或180秒监控周期的网络设备的数据写入</strong></p><br><p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，</p><br><p style=\"margin-left: 30.0px;\">若部署单节点Cassandra，在redis集群状况良好的情况下，每分钟可写入80W个指标，可支持800000/400=2000个资源左右;</p><br><p style=\"margin-left: 30.0px;\">若部署Cassandra 集群，每分钟可写入110W个指标，可支持1100000/400=2750个资源左右;</p><br><p style=\"margin-left: 30.0px;\">考虑到稳定性可酌情减少资源量或增加配置。</p><br><p><strong>2.读出能力：每秒完成指定数据点数查询的TPS性能峰值，以便预测可以支持什么数量的仪表盘</strong></p><br><p style=\"margin-left: 30.0px;\">在三台4C*16G的Cassandra节点的配置下，稳定查询的前提下，每分钟至少400条并发请求（每条请求至少6000条元数据，大约为15分钟的数据）。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p></p><br><p></p><br><p></p><br><h2 id=\"id-指标库性能测试-一、测试目的\">一、测试目的</h2><br><p>测试在指定硬件条件下，指标库写入能力与读取能力。</p><br><h2 id=\"id-指标库性能测试-二、测试环境\">二、测试环境</h2><br><div class=\"table-wrap\"><br>    <table class=\"confluenceTable\"><br>        <tbody><br>        <tr><br>            <th class=\"confluenceTh\">ip</th><br>            <th colspan=\"1\" class=\"confluenceTh\">cpu</th><br>            <th class=\"confluenceTh\">内存</th><br>            <th colspan=\"1\" class=\"confluenceTh\">磁盘</th><br>            <th colspan=\"1\" class=\"confluenceTh\">用途</th><br>            <th colspan=\"1\" class=\"confluenceTh\">备注</th><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\">个人电脑</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>部署jmeter</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.37</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">6<span>核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">8G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td rowspan=\"4\" class=\"confluenceTd\">部署jmeter-server</td><br>            <td rowspan=\"4\" class=\"confluenceTd\"><p><span>通过jmeter来发送测试请求，</span></p><br>                <p>这些机器同时部署着其他产品。<br><br></p></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.38</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.53.65</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>8G</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>10.1.61.10</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">24G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>        </tr><br>        <tr><br>            <td colspan=\"1\" class=\"confluenceTd\">10.1.53.39</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>4核</span></td><br>            <td colspan=\"1\" class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\"></td><br>            <td colspan=\"1\" class=\"confluenceTd\">指标库、ES、租户等组件</td><br>            <td colspan=\"1\" class=\"confluenceTd\">该机器主要用来部署指标库</td><br>        </tr><br>        <tr><br>            <td class=\"confluenceTd\">10.1.61.117</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">38G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">kairosdb、omp等</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><span>kairosdb 堆内存为默认的3g</span></td><br>        </tr><br>        <tr><br>            <td class=\"confluenceTd\">10.1.61.118</td><br>            <td colspan=\"1\" class=\"confluenceTd\">4核</td><br>            <td class=\"confluenceTd\">16G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">38G</td><br>            <td colspan=\"1\" class=\"confluenceTd\">Cassandra</td><br>            <td colspan=\"1\" class=\"confluenceTd\"><p><span>kairosdb 堆内存为<span>为默认的4</span>g，</span></p><br>                <p>计算公式 max(min(1/2 ram, 1024MB),min(1/4 ram, 8GB))</p></td><br>        </tr><br>        </tbody><br>    </table><br></div><br><p></p><br><h2 id=\"id-指标库性能测试-三、测试方法\">三、测试方法</h2><br><p>测试工具为Jmeter，通过调用指标库相应的openApi测试，用jconsole 监控进程占用资源变化。</p><br><h2 id=\"id-指标库性能测试-四、测试结果\">四、测试结果</h2><h4 id=\"id-指标库性能测试-写:\">写:</h4><br><p style=\"margin-left: 30.0px;\"><span>Ramp-up Period <span>决定多长时间启动所有线程。如果使用10个线程，ramp-up period是100秒，那么JMeter用100秒使所有10个线程启动并运行。每个线程会在上一个线程启动后10秒（100/10）启动。</span></span><br></p><br><p style=\"margin-left: 30.0px;\">monitor 指标上报的频率是15S一次，故此处从 以15S/s 的频率启动一个上报线程开始测试。</p><br><p style=\"margin-left: 30.0px;\">如组1，测试逻辑为：</p><br><p style=\"margin-left: 60.0px;\">每15秒启动一个线程，单个线程每次上报25个指标，重复上报500次，每分钟指标写入请求次数为5W条。</p><br><p style=\"margin-left: 60.0px;\">jmeter-server为1，表示只在本机运行测试；若为4，表示在4个机器上同时对指标库发起请求测试。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p></p><br><p></p><br><p style=\"margin-left: 30.0px;\">1.kairosdb 自带写入统计指标：</p><br><p style=\"margin-left: 60.0px;\">kairosdb.metric_counters - Counts the number of data points received since the last<br>    report. Tags are used to separate one metric from another.（统计自上次上报后接收的数据量。标签用于区分指标。）</p><br><p style=\"margin-left: 60.0px;\"></p><br><p style=\"margin-left: 30.0px;\">kairosdb 统计结果：</p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/kairosdb_metric_count.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\">“1”处为组别12的测试结果，“2”处为直接调用kairosdb restApi 写入接口，“3”处为组别14 的结果。结果与指标库的统计日志一致。<br><br></p><p style=\"margin-left: 30.0px;\">2.时间有限，每组测试时间间隔较短，因此可能会对CPU、内存以及Cassandra状态产生影响，使结果不够准确。</p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><strong>注：</strong></p><br><p style=\"margin-left: 30.0px;\">【1】：指标库redis 报内存不够，异常： Can’t save in background: fork: Cannot allocate memory</p><br><p style=\"margin-left: 30.0px;\">【2】：<span style=\"background-color: transparent;\">短时间插入大量指标会导致未压实的sstable数据太多，压实进程报可用磁盘空间不足，重新压实…恶性循环。</span><br></p><br><p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br></span></p><br><div class=\"code panel pdl\" style=\"border-width: 1px;\"><br>    <div class=\"codeContent panelContent pdl\"><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[[root@localhost data_points-1e09be40c3c811e7977aa147ea7baf03]# /opt/cassandra/bin/nodetool compactionstats -H</span><br><span class=\"line\">pending tasks: 2</span><br><span class=\"line\">- kairosdb.data_points: 2</span><br><span class=\"line\">id                                   compaction type keyspace table       completed total    unit  progress</span><br><span class=\"line\">ef340e00-d4d8-11e7-a239-0d717928a22e Compaction      kairosdb data_points 6.23 GB   11.42 GB bytes 54.56%</span><br><span class=\"line\">Active compaction remaining time :   0h05m32s</span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure><br><br>    </div><br></div><br><p style=\"margin-left: 30.0px;\"><span><br></span></p><br><p style=\"margin-left: 30.0px;\"><span>Cassandra报异常:</span></p><br><div class=\"code panel pdl\" style=\"border-width: 1px;\"><br>    <div class=\"codeContent panelContent pdl\"><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[WARN  [CompactionExecutor:46] 2017-11-28 22:26:29,785 CompactionTask.java:91 - insufficient space to compact all requested files BigTableReader(path=&amp;#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-216-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/opt/dbdata/cassandra/data/kairosdb/data_points-1e09be40c3c811e7977aa147ea7baf03/ma-237-big-Data.db&amp;#39;)</span><br><span class=\"line\">ERROR [CompactionExecutor:46] 2017-11-28 22:26:29,827 CassandraDaemon.java:195 - Exception in thread Thread[CompactionExecutor:46,1,main]</span><br><span class=\"line\">java.lang.RuntimeException: Not enough space for compaction, estimated sstables = 1, expected write size = 2395303467</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(CompactionTask.java:278) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:126) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:82) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:60) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:264) ~[apache-cassandra-3.5.jar:3.5]</span><br><span class=\"line\">\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_144]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]</span><br><span class=\"line\"></span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure><br><br>    </div><br></div><br><p></p><br><p style=\"margin-left: 30.0px;\">解决方法：</p><br><p style=\"margin-left: 60.0px;\">1、增大磁盘空间、</p><br><p style=\"margin-left: 60.0px;\">2、直接删除同一编号的sstable 大文件</p><br><p style=\"margin-left: 60.0px;\">3、重装Cassandra</p><h4 id=\"id-指标库性能测试-多节点写:\">多节点写:</h4><br><p style=\"margin-left: 30.0px;\">1.通过观察发现，写的瓶颈在指标库的gateway，然后增加多节点的测试如下：</p><br><ul><br>    <li style=\"margin-left: 30.0px;\">开启一个gateway、一个writer模块后，指标写入能力在 <strong>50W/分钟</strong>；</li><br>    <li style=\"margin-left: 30.0px;\">开启三个gateway、一个writer模块后，指标写入能力在 <strong>80W/分钟</strong>；</li><br>    <li style=\"margin-left: 30.0px;\">开启三个三个gateway、三个writer 模块后，指标写入能力在 <strong>85W/分钟</strong>。</li><br></ul><br><br><p><br><img src=\"/2017/12/10/171210/kairosdb_metric_count_70W_75W.png\"><br><br></p><p style=\"margin-left: 30.0px;\">2.当部署Cassandra集群（3个节点）后，指标写入能力可以再次提升，<span style=\"background-color: transparent;\">开启三个gateway、一个writer模块，指标写入能力在 <strong>100W/分钟</strong> ，此状态下可持续写入四个小时，期间redis会报内存不够的异常。</span><br></p>\n\n&lt;p style=”margin-left: 30.0px; &gt;<br><br><br><p></p>\n\n<p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\">另外，当指标库写入在满载的情况下，指标的读取能力会受到很大影响，且写入也会偶尔报连接超时现象。</span><br></p><br><p style=\"margin-left: 30.0px;\"><span style=\"background-color: transparent;\"><br></span></p><h4 id=\"id-指标库性能测试-读：\"><br>    读：</h4><br><p>指标的查询，其实是kairosdb去查Cassandra中数据。因此kairosdb查Cassandra的速度才是关键因素。而查Cassandra数据的速度，跟查询的Cassandra的row数量、元数据量等因素相关。</p><br><p>要模拟读取测试，就需要先调查现场实际查询的row和元数据大小。</p><br><p>统计局的统计如下：</p><br><p style=\"margin-left: 30.0px;\">上图为密集查询30分钟内指标时，从Cassandra中查询的row的行数；</p><br><p style=\"margin-left: 30.0px;\">中图为密集查询30分钟内指标时，从Cassandra中查询的元数据的数量；</p><br><p style=\"margin-left: 30.0px;\">下图为定时查询时row的行数。</p><br><p><br><br></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_row_count2.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_sample_size.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"><br><img src=\"/2017/12/10/171210/统计局_query_row_count.png\"><br><br></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\"></p><br><p style=\"margin-left: 30.0px;\">可以看出：</p><br><p style=\"margin-left: 30.0px;\">密集查询时，row最大的在4000，大部分比较小，接近1。定时查询时，row在100行以下。</p><br><p style=\"margin-left: 30.0px;\">现场400个设备，查询30分钟指标时，理论上应该有大约400<em>4</em>30=48000 的元数据，实际查询时，要小于该值。基本都在几百条。</p><br><p></p><br><p></p>\n\n<p></p><p style=\"margin-left: 30.0px;\">过程：</p><p></p>\n<ol><br>    <li>可以看到单Cassandra节点下，kairosdb查询Cassandra最短耗时已经在2S左右，而集群模式下，kairosdb查询Cassandra的最短耗时在200ms<br>        左右，可以看出在低硬件配置下，Cassandra部署集群模式比单机模式的性能提升很大。<br>    </li><br>    <li>Cassandra刚部署时，查询性能表现优秀，连续写入一个小时数据后，查询性能下降。</li><br>    <li>2-5组发现kairosdb 查询时间正常， 但指标库查询出现超时，经建飞排查，原因是调用kairosdb client时创建的 http连接 最大数量最2，修改为200后，情况好转。<br><br><br><br>  <img src=\"/2017/12/10/171210/image2017-12-8_11_24_9.png\"><br><br>    </li><br>    <li>从测试过程可以看到，部分指标库的查询耗时比kairosdb查Cassandra的耗时长很多，查询kairosdb.datastore.queries_waiting<br>        指标，发现kairosdb存在大量等待线程。如下：<br><br><br><br><img src=\"/2017/12/10/171210/kairosdb.datastore.queries_waiting.png\"><br><br>          <br>修改<br>        kairosdb 的配置：kairosdb.datastore.concurrentQueryThread ，再次查询，依然会有等待的查询线程。<br>据此判断，当查询15个指标时，每个指标耗时在2.5S左右时，此硬件配置下的kairosdb性能已达瓶颈，影响因素为CPU核数。当更改部署kairosdb<br>        机器的核数后，性能得到了提升。<br>    </li><br>    <li>同样的查询条件下，CPU核数与kairosdb 的concurrentQueryThread 参数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li><br></ol><br><h2 id=\"id-指标库性能测试-五、结论\"><br>五、结论</h2><br><h3 id=\"id-指标库性能测试-1、指标库写性能：\">1、指标库写性能：</h3><br><ol><br>    <li>由3、5、6组可知，每分钟请求总量一定的情况下，在未到达瓶颈前，并发线程越多，指标写入量越大。</li><br>    <li>由6、8组可知，本机的机器性能并未成为影响指标写入的因素。</li><br>    <li>由6、7和8、9两组可知，在4核16G单节点Cassandra 配置下，请求数在50W/min 左右时，指标库的gateway 模块接收请求已到达瓶颈，为 <strong>50W /min</strong> 左右。</li><br>    <li>由9、10、11三组可知，在指标写入能力到达瓶颈后，改变并发的线程数，不再产生影响。</li><br>    <li>由9、12组可知，待写入的指标类型量不是影响因素。</li><br>    <li>由15组可知，当指标库写入请求量每分钟到千万级时，会出现redis 内存问题。</li><br>    <li>单指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为 <strong>80W/min</strong>；<br>多指标库、单Cassandra节点下，指标写入能力瓶颈在Cassandra处，为<br>        <strong>85W/min</strong>；<br>单指标库、多Cassandra节点下，指标写入能力瓶颈为 <strong>100W/min</strong>；<br>多指标库、多Cassandra节点下，指标写入能力瓶颈为<strong><br>            <strong>110W/min</strong></strong>。<br><br><br></li><br></ol><br><p></p><br><p>配置预估：</p><br><p style=\"margin-left: 30.0px;\">假设现场1个资源每15 S上报100个指标，则每分钟上报400个，若采用单节点Cassandra<br>    配置，在redis集群状况良好的情况下，可支持1750个资源左右，考虑到稳定性可酌情减少资源量或增加配置。</p><br><p style=\"margin-left: 30.0px;\"></p><br><h3 id=\"id-指标库性能测试-2、指标库读性能：\">2、指标库读性能：</h3><br><ol><br>    <li>由1、2组可知R12版本指标库在现有配置下，最多支持每分钟30次的查询。</li><br>    <li>由2、3组可知，查询较慢时，每10S钟查询10次，比每5S钟查询5次，查询要快。</li><br>    <li>由2、4组可知，相同的请求量下，同一个指标密集查询2次，比两个指标同时各查一次要慢很多。</li><br>    <li>由1、5组可知，查询的数据量从600到7200，查询的Cassandra row从 77到740，查询耗时基本没有变化，不过Cassandra的资源消耗增加很多。</li><br>    <li>由2、7组可知，kairosdb client 创建的 http连接 最大数量与查询性能十分相关，R13中已调整该参数为200。</li><br>    <li>由6-8、14、15组可知，单Cassandra节点下，指标查询的瓶颈为 <strong>90次/分钟</strong>，且当 指标库的查询耗时 与<br>        kairosdb查Cassandra的耗时相差不大时，可以维持稳定查询状态，否则指标库查询超时会越来越严重。<br>    </li><br>    <li>由8-13、17-19组可知，kairosdb的concurrentQueryThread 参数值与CPU核数一致时，性能最优；且该参数只在kairosdb 查Cassandra较慢（2S以上）时，才会产生影响。</li><br>    <li>由8、16组可知，指标库是否集群模式不是瓶颈。</li><br>    <li>由19、22和20、23两组可知，单kairosdb 8核的查询性能 与双kairosdb 4核基本相同，所以kairosdb 的查询性能与机器的CPU核数有关。</li><br>    <li>由19、24组可知，当前的查询瓶颈在Cassandra 处，Cassandra 集群的查询性能是单节点的10倍。</li><br>    <li>由24-29组可知，Cassandra集群下，查询性能瓶颈为<strong>1400次/分钟</strong>，当查询到1500次/分钟时，kairosdb出现瓶颈，等待查询线程不断增加。</li><br>    <li>由30、31组可知，当Cassandra写入一段时间数据后，指标查询性能下降很多。</li><br></ol>\n\n"},{"title":"linux 进程 性能监控","date":"2017-11-08T14:08:41.000Z","_content":"\n\n\n## 背景\n进行性能测试，需要统计 kairosdb 的性能随时间的变化情况。\n \n## 分析\n考虑过以下方法\nsar 命令：可以检测机器的各项性能，但不能看进程的性能占用信息\ntop：可以监控到进程的性能信息，但没有趋势图\njvisualvm：可以监控到进程的性能信息，有趋势图；但可监控的时间范围受限、不能统计各项状态信息。如下：\n \n{% asset_img  19_14_27.png jvisualvm %}\n\n \n最终发现jconsole 可以完美实现这个需求。之前只是感觉jconsoleg功能不如jvisualvm强大，所以没有去看...\n \n## jconsole 使用方法：\n\n1. 修改远程机器JDK配置文件 (我这里远程机器是linux).\n   a.进入JAVA_HOME\\jre\\lib\\management\\目录\n   b.拷贝jmxremote.password.template这个文件到当前目录, 并改名为 jmxremote.password\n     c.打开jmxremote.password文件，去掉 # monitorRole  QED 和 # controlRole  R&D 这两行前面的注释符号\n\n2. 修改远程机器上需要被监控的程序的启动脚本：\n\n    ```JAVA_OPTS=\"-Djava.rmi.server.hostname=10.1.61.117 -Dcom.sun.management.jmxremote.port=18999  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.management.jmxremote.authenticate=false\"```\n\n    启动脚本 的java 命令后加上 $JAVA_OPTS 参数。\n\n3. 本地建立连接，如下：\n\n{% asset_img  19_23_5.png 本地建立连接 %}\n\n \n界面如下：\n\n{% asset_img  19_28_49.png 界面 %}\n\n更多功能可自行尝试\n \n可以保存统计数据 到本地(CSV 文件)，如下：\n\n{% asset_img  19_29_20.png 保存统计数据 %}\n\n \n## 总结\n需求解决 （真是踏破铁鞋无觅处...）\n","source":"_posts/171108.md","raw":"---\ntitle: linux 进程 性能监控\ndate: 2017-11-08 22:08:41\ntags:\n- 踩坑记\n- java\ncategories:\n- Linux\n---\n\n\n\n## 背景\n进行性能测试，需要统计 kairosdb 的性能随时间的变化情况。\n \n## 分析\n考虑过以下方法\nsar 命令：可以检测机器的各项性能，但不能看进程的性能占用信息\ntop：可以监控到进程的性能信息，但没有趋势图\njvisualvm：可以监控到进程的性能信息，有趋势图；但可监控的时间范围受限、不能统计各项状态信息。如下：\n \n{% asset_img  19_14_27.png jvisualvm %}\n\n \n最终发现jconsole 可以完美实现这个需求。之前只是感觉jconsoleg功能不如jvisualvm强大，所以没有去看...\n \n## jconsole 使用方法：\n\n1. 修改远程机器JDK配置文件 (我这里远程机器是linux).\n   a.进入JAVA_HOME\\jre\\lib\\management\\目录\n   b.拷贝jmxremote.password.template这个文件到当前目录, 并改名为 jmxremote.password\n     c.打开jmxremote.password文件，去掉 # monitorRole  QED 和 # controlRole  R&D 这两行前面的注释符号\n\n2. 修改远程机器上需要被监控的程序的启动脚本：\n\n    ```JAVA_OPTS=\"-Djava.rmi.server.hostname=10.1.61.117 -Dcom.sun.management.jmxremote.port=18999  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.management.jmxremote.authenticate=false\"```\n\n    启动脚本 的java 命令后加上 $JAVA_OPTS 参数。\n\n3. 本地建立连接，如下：\n\n{% asset_img  19_23_5.png 本地建立连接 %}\n\n \n界面如下：\n\n{% asset_img  19_28_49.png 界面 %}\n\n更多功能可自行尝试\n \n可以保存统计数据 到本地(CSV 文件)，如下：\n\n{% asset_img  19_29_20.png 保存统计数据 %}\n\n \n## 总结\n需求解决 （真是踏破铁鞋无觅处...）\n","slug":"171108","published":1,"updated":"2018-09-20T15:46:06.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwt5000cayqcrcayzxzy","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>进行性能测试，需要统计 kairosdb 的性能随时间的变化情况。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>考虑过以下方法<br>sar 命令：可以检测机器的各项性能，但不能看进程的性能占用信息<br>top：可以监控到进程的性能信息，但没有趋势图<br>jvisualvm：可以监控到进程的性能信息，有趋势图；但可监控的时间范围受限、不能统计各项状态信息。如下：</p>\n<img src=\"/2017/11/08/171108/19_14_27.png\" title=\"jvisualvm\">\n<p>最终发现jconsole 可以完美实现这个需求。之前只是感觉jconsoleg功能不如jvisualvm强大，所以没有去看…</p>\n<h2 id=\"jconsole-使用方法：\"><a href=\"#jconsole-使用方法：\" class=\"headerlink\" title=\"jconsole 使用方法：\"></a>jconsole 使用方法：</h2><ol>\n<li><p>修改远程机器JDK配置文件 (我这里远程机器是linux).<br>a.进入JAVA_HOME\\jre\\lib\\management\\目录<br>b.拷贝jmxremote.password.template这个文件到当前目录, 并改名为 jmxremote.password<br>  c.打开jmxremote.password文件，去掉 # monitorRole  QED 和 # controlRole  R&amp;D 这两行前面的注释符号</p>\n</li>\n<li><p>修改远程机器上需要被监控的程序的启动脚本：</p>\n<p> <code>JAVA_OPTS=&quot;-Djava.rmi.server.hostname=10.1.61.117 -Dcom.sun.management.jmxremote.port=18999  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.management.jmxremote.authenticate=false&quot;</code></p>\n<p> 启动脚本 的java 命令后加上 $JAVA_OPTS 参数。</p>\n</li>\n<li><p>本地建立连接，如下：</p>\n</li>\n</ol>\n<img src=\"/2017/11/08/171108/19_23_5.png\" title=\"本地建立连接\">\n<p>界面如下：</p>\n<img src=\"/2017/11/08/171108/19_28_49.png\" title=\"界面\">\n<p>更多功能可自行尝试</p>\n<p>可以保存统计数据 到本地(CSV 文件)，如下：</p>\n<img src=\"/2017/11/08/171108/19_29_20.png\" title=\"保存统计数据\">\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>需求解决 （真是踏破铁鞋无觅处…）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>进行性能测试，需要统计 kairosdb 的性能随时间的变化情况。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>考虑过以下方法<br>sar 命令：可以检测机器的各项性能，但不能看进程的性能占用信息<br>top：可以监控到进程的性能信息，但没有趋势图<br>jvisualvm：可以监控到进程的性能信息，有趋势图；但可监控的时间范围受限、不能统计各项状态信息。如下：</p>\n<img src=\"/2017/11/08/171108/19_14_27.png\" title=\"jvisualvm\">\n<p>最终发现jconsole 可以完美实现这个需求。之前只是感觉jconsoleg功能不如jvisualvm强大，所以没有去看…</p>\n<h2 id=\"jconsole-使用方法：\"><a href=\"#jconsole-使用方法：\" class=\"headerlink\" title=\"jconsole 使用方法：\"></a>jconsole 使用方法：</h2><ol>\n<li><p>修改远程机器JDK配置文件 (我这里远程机器是linux).<br>a.进入JAVA_HOME\\jre\\lib\\management\\目录<br>b.拷贝jmxremote.password.template这个文件到当前目录, 并改名为 jmxremote.password<br>  c.打开jmxremote.password文件，去掉 # monitorRole  QED 和 # controlRole  R&amp;D 这两行前面的注释符号</p>\n</li>\n<li><p>修改远程机器上需要被监控的程序的启动脚本：</p>\n<p> <code>JAVA_OPTS=&quot;-Djava.rmi.server.hostname=10.1.61.117 -Dcom.sun.management.jmxremote.port=18999  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.management.jmxremote.authenticate=false&quot;</code></p>\n<p> 启动脚本 的java 命令后加上 $JAVA_OPTS 参数。</p>\n</li>\n<li><p>本地建立连接，如下：</p>\n</li>\n</ol>\n<img src=\"/2017/11/08/171108/19_23_5.png\" title=\"本地建立连接\">\n<p>界面如下：</p>\n<img src=\"/2017/11/08/171108/19_28_49.png\" title=\"界面\">\n<p>更多功能可自行尝试</p>\n<p>可以保存统计数据 到本地(CSV 文件)，如下：</p>\n<img src=\"/2017/11/08/171108/19_29_20.png\" title=\"保存统计数据\">\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>需求解决 （真是踏破铁鞋无觅处…）</p>\n"},{"layout":"blogs_default","title":"我们为提升 Cassandra 读性能做了哪些努力？","subtitle":"提升Cassandra读性能的一些实践和思考","date":"2018-05-21T14:08:41.000Z","_content":"\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ 关于Cassandra\n+ 提升读性能\n\n\n\n## 关于Cassandra\nApache Cassandra是一个高度可扩展的高性能分布式数据库，\n用于处理大量常规服务器上的大量数据，提供高可用性，无单点故障。它是一种NoSQL类型的数据库。\n\n我们看一下国外权威机构[DB-Engines](https://db-engines.com/en/ranking)最近的数据库全球流行程度排名：\n\n{% asset_img  database_rank.png 数据库排名%}\n\n可以看出，Cassandra 是排名前十中四个仅有的NoSQL数据库之一。Cassandra在国外这样受欢迎，其性能可想而知不会差，\n但是在国内貌似还没有多少公司使用，且国内关于 Cassandra方面的资料较少。\n\n\n## 提升读性能\n\nCassandra 在我们的项目中用来存储时序数据，经过测试，在三台4核16G的虚拟机上，\n指标数据的写入TPS可以达到6.5W/s，基本可以满足我们的业务需求。\n但是读取性能可能就会差很多，因为数据查询速度跟每次查询的数据量关系比较大，此处也不好定义TPS。\n产品查询一周以上的指标数据时，经常会出现加载缓慢，甚至查询超时。为了改善查询状况，我们进行了不少努力。\n\n此处不讨论纵向扩展和横向扩展带来的性能提升。\n\n### 1. 加快墓碑回收甚至去除墓碑\n在Cassandra中，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。\n 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。\n\n关于墓碑的更多消息，可参考 [Cassandra 数据维护官方文档](https://docs.datastax.com/en/Cassandra/3.0/Cassandra/dml/dmlHowDataMaintain.html)\n \n可以这样理解，大量的墓碑数据会使查询时搜索的数据量变大，直接影响查询时的效率。\n所以，为了消除这种影响，我们可以加快墓碑数据的回收，避免产生大量的墓碑数据。\n甚至，当我们在写入时，若写入一致性的值与副本因子数量相等时，可以不产生墓碑数据，直接删掉该无效数据。\n具体可通过 调整 table 中 gc_grace_seconds 参数来实现，默认为 864000（10天），我们可以设为 86400（1天）或者0（直接删除）。\n\n### 2. 降低read repair 的几率\n每一次读操作，Cassandra都会在后台进行read repair操作。\n如果只要求读一个节点数据，Cassandra在读到一个节点后，就将结果返回客户端，\n然后用read repair对其他的replicas进行同步（根据timestamp）。\n如果要求读多个节点，那么Cassandra就读多个节点，然后根据timestamp进行比较，返回客户端最新的数据，\n然后再调用read repair对其他节点进行同步。\nRead repair在后台的操作，会占用一定的CPU和I/O,所以影响读性能。\n我们可以降低read repair 的几率，以提高读取性能。\n\n通过修改 table 中 read_repair_chance（取值范围 0-1）参数来设置read repair 的几率，建议设为 0.1。\n\n### 3. 指标数据预聚合\n思路：我们存在数据库中的指标数据，读取时会将指定时间范围内的数据进行聚合。\n如果提前将数据按基本时间段提前聚合为一个值，读取时，只读取时间范围内的时间段的汇聚结果，将大大减少查询耗时。\n\n### 4. 合理部署产品\n公司的其他产品使用了mongoDB，线上环境中发现，这两个NoSQL数据库部署在一起时会相互争夺内存资源，\n十分影响性能，因此最好将这两个数据库分开部署。\n\n### 5. 设置合理的堆内存大小和GC策略\n堆内存设置的太小，将导致频繁GC甚至OOM，设置的太大同样也不好。可参考官方的公式:\n``MAX_HEAP_SIZE=max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB)``\n\n关于GC策略，官方的建议是：小于16G，用CMS收集器；16-64G，用G1收集器。\n\n### 6. 设置合理的压式策略\nCassandra 将落到磁盘的数据存放在SStable中，压实是将多个SSTable 文件合并为一个的过程。合并后将减少重复的数据，使数据更紧凑。\nCassandra 有多种触发压实的策略，选一个适合的压实策略，可以更好地压实数据。\n比如，我们使用的Kairosdb建议采用 DateTieredCompactionStrategy ([DTCS](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction)))压实策略。\n\n### 7. 启用 row cache\nrow cache 把整个row 的内容都放在内存中。\n适合的情况是，有一小部分hot data是经常反问的，或者要返回整个columns.在使用row cache时，用注意它对内存的影响。\n可参考 Cassandra 的[官方文档](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsConfiguringCaches.html)设置row cache。\n\n\n\n## 其他\n\n安利一个入门Cassandra 的好博客：[learn Cassandra](http://teddymaef.github.io/learnCassandra/cn/)\n\n","source":"_posts/180521.md","raw":"---\nlayout: blogs_default\ntitle: 我们为提升 Cassandra 读性能做了哪些努力？ \nsubtitle:  提升Cassandra读性能的一些实践和思考\ndate: 2018-05-21 22:08:41\ncategories:\n- 数据库\ntags:\n    - cassandra\n    - 大数据\n\n---\n\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ 关于Cassandra\n+ 提升读性能\n\n\n\n## 关于Cassandra\nApache Cassandra是一个高度可扩展的高性能分布式数据库，\n用于处理大量常规服务器上的大量数据，提供高可用性，无单点故障。它是一种NoSQL类型的数据库。\n\n我们看一下国外权威机构[DB-Engines](https://db-engines.com/en/ranking)最近的数据库全球流行程度排名：\n\n{% asset_img  database_rank.png 数据库排名%}\n\n可以看出，Cassandra 是排名前十中四个仅有的NoSQL数据库之一。Cassandra在国外这样受欢迎，其性能可想而知不会差，\n但是在国内貌似还没有多少公司使用，且国内关于 Cassandra方面的资料较少。\n\n\n## 提升读性能\n\nCassandra 在我们的项目中用来存储时序数据，经过测试，在三台4核16G的虚拟机上，\n指标数据的写入TPS可以达到6.5W/s，基本可以满足我们的业务需求。\n但是读取性能可能就会差很多，因为数据查询速度跟每次查询的数据量关系比较大，此处也不好定义TPS。\n产品查询一周以上的指标数据时，经常会出现加载缓慢，甚至查询超时。为了改善查询状况，我们进行了不少努力。\n\n此处不讨论纵向扩展和横向扩展带来的性能提升。\n\n### 1. 加快墓碑回收甚至去除墓碑\n在Cassandra中，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。\n 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。\n\n关于墓碑的更多消息，可参考 [Cassandra 数据维护官方文档](https://docs.datastax.com/en/Cassandra/3.0/Cassandra/dml/dmlHowDataMaintain.html)\n \n可以这样理解，大量的墓碑数据会使查询时搜索的数据量变大，直接影响查询时的效率。\n所以，为了消除这种影响，我们可以加快墓碑数据的回收，避免产生大量的墓碑数据。\n甚至，当我们在写入时，若写入一致性的值与副本因子数量相等时，可以不产生墓碑数据，直接删掉该无效数据。\n具体可通过 调整 table 中 gc_grace_seconds 参数来实现，默认为 864000（10天），我们可以设为 86400（1天）或者0（直接删除）。\n\n### 2. 降低read repair 的几率\n每一次读操作，Cassandra都会在后台进行read repair操作。\n如果只要求读一个节点数据，Cassandra在读到一个节点后，就将结果返回客户端，\n然后用read repair对其他的replicas进行同步（根据timestamp）。\n如果要求读多个节点，那么Cassandra就读多个节点，然后根据timestamp进行比较，返回客户端最新的数据，\n然后再调用read repair对其他节点进行同步。\nRead repair在后台的操作，会占用一定的CPU和I/O,所以影响读性能。\n我们可以降低read repair 的几率，以提高读取性能。\n\n通过修改 table 中 read_repair_chance（取值范围 0-1）参数来设置read repair 的几率，建议设为 0.1。\n\n### 3. 指标数据预聚合\n思路：我们存在数据库中的指标数据，读取时会将指定时间范围内的数据进行聚合。\n如果提前将数据按基本时间段提前聚合为一个值，读取时，只读取时间范围内的时间段的汇聚结果，将大大减少查询耗时。\n\n### 4. 合理部署产品\n公司的其他产品使用了mongoDB，线上环境中发现，这两个NoSQL数据库部署在一起时会相互争夺内存资源，\n十分影响性能，因此最好将这两个数据库分开部署。\n\n### 5. 设置合理的堆内存大小和GC策略\n堆内存设置的太小，将导致频繁GC甚至OOM，设置的太大同样也不好。可参考官方的公式:\n``MAX_HEAP_SIZE=max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB)``\n\n关于GC策略，官方的建议是：小于16G，用CMS收集器；16-64G，用G1收集器。\n\n### 6. 设置合理的压式策略\nCassandra 将落到磁盘的数据存放在SStable中，压实是将多个SSTable 文件合并为一个的过程。合并后将减少重复的数据，使数据更紧凑。\nCassandra 有多种触发压实的策略，选一个适合的压实策略，可以更好地压实数据。\n比如，我们使用的Kairosdb建议采用 DateTieredCompactionStrategy ([DTCS](https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction)))压实策略。\n\n### 7. 启用 row cache\nrow cache 把整个row 的内容都放在内存中。\n适合的情况是，有一小部分hot data是经常反问的，或者要返回整个columns.在使用row cache时，用注意它对内存的影响。\n可参考 Cassandra 的[官方文档](https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsConfiguringCaches.html)设置row cache。\n\n\n\n## 其他\n\n安利一个入门Cassandra 的好博客：[learn Cassandra](http://teddymaef.github.io/learnCassandra/cn/)\n\n","slug":"180521","published":1,"updated":"2018-09-20T15:23:28.340Z","comments":1,"photos":[],"link":"","_id":"cjovkdwt7000dayqc4vowtzbm","content":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>关于Cassandra</li>\n<li>提升读性能</li>\n</ul>\n<h2 id=\"关于Cassandra\"><a href=\"#关于Cassandra\" class=\"headerlink\" title=\"关于Cassandra\"></a>关于Cassandra</h2><p>Apache Cassandra是一个高度可扩展的高性能分布式数据库，<br>用于处理大量常规服务器上的大量数据，提供高可用性，无单点故障。它是一种NoSQL类型的数据库。</p>\n<p>我们看一下国外权威机构<a href=\"https://db-engines.com/en/ranking\" target=\"_blank\" rel=\"noopener\">DB-Engines</a>最近的数据库全球流行程度排名：</p>\n<img src=\"/2018/05/21/180521/database_rank.png\" title=\"数据库排名\">\n<p>可以看出，Cassandra 是排名前十中四个仅有的NoSQL数据库之一。Cassandra在国外这样受欢迎，其性能可想而知不会差，<br>但是在国内貌似还没有多少公司使用，且国内关于 Cassandra方面的资料较少。</p>\n<h2 id=\"提升读性能\"><a href=\"#提升读性能\" class=\"headerlink\" title=\"提升读性能\"></a>提升读性能</h2><p>Cassandra 在我们的项目中用来存储时序数据，经过测试，在三台4核16G的虚拟机上，<br>指标数据的写入TPS可以达到6.5W/s，基本可以满足我们的业务需求。<br>但是读取性能可能就会差很多，因为数据查询速度跟每次查询的数据量关系比较大，此处也不好定义TPS。<br>产品查询一周以上的指标数据时，经常会出现加载缓慢，甚至查询超时。为了改善查询状况，我们进行了不少努力。</p>\n<p>此处不讨论纵向扩展和横向扩展带来的性能提升。</p>\n<h3 id=\"1-加快墓碑回收甚至去除墓碑\"><a href=\"#1-加快墓碑回收甚至去除墓碑\" class=\"headerlink\" title=\"1. 加快墓碑回收甚至去除墓碑\"></a>1. 加快墓碑回收甚至去除墓碑</h3><p>在Cassandra中，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。<br> 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。</p>\n<p>关于墓碑的更多消息，可参考 <a href=\"https://docs.datastax.com/en/Cassandra/3.0/Cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra 数据维护官方文档</a></p>\n<p>可以这样理解，大量的墓碑数据会使查询时搜索的数据量变大，直接影响查询时的效率。<br>所以，为了消除这种影响，我们可以加快墓碑数据的回收，避免产生大量的墓碑数据。<br>甚至，当我们在写入时，若写入一致性的值与副本因子数量相等时，可以不产生墓碑数据，直接删掉该无效数据。<br>具体可通过 调整 table 中 gc_grace_seconds 参数来实现，默认为 864000（10天），我们可以设为 86400（1天）或者0（直接删除）。</p>\n<h3 id=\"2-降低read-repair-的几率\"><a href=\"#2-降低read-repair-的几率\" class=\"headerlink\" title=\"2. 降低read repair 的几率\"></a>2. 降低read repair 的几率</h3><p>每一次读操作，Cassandra都会在后台进行read repair操作。<br>如果只要求读一个节点数据，Cassandra在读到一个节点后，就将结果返回客户端，<br>然后用read repair对其他的replicas进行同步（根据timestamp）。<br>如果要求读多个节点，那么Cassandra就读多个节点，然后根据timestamp进行比较，返回客户端最新的数据，<br>然后再调用read repair对其他节点进行同步。<br>Read repair在后台的操作，会占用一定的CPU和I/O,所以影响读性能。<br>我们可以降低read repair 的几率，以提高读取性能。</p>\n<p>通过修改 table 中 read_repair_chance（取值范围 0-1）参数来设置read repair 的几率，建议设为 0.1。</p>\n<h3 id=\"3-指标数据预聚合\"><a href=\"#3-指标数据预聚合\" class=\"headerlink\" title=\"3. 指标数据预聚合\"></a>3. 指标数据预聚合</h3><p>思路：我们存在数据库中的指标数据，读取时会将指定时间范围内的数据进行聚合。<br>如果提前将数据按基本时间段提前聚合为一个值，读取时，只读取时间范围内的时间段的汇聚结果，将大大减少查询耗时。</p>\n<h3 id=\"4-合理部署产品\"><a href=\"#4-合理部署产品\" class=\"headerlink\" title=\"4. 合理部署产品\"></a>4. 合理部署产品</h3><p>公司的其他产品使用了mongoDB，线上环境中发现，这两个NoSQL数据库部署在一起时会相互争夺内存资源，<br>十分影响性能，因此最好将这两个数据库分开部署。</p>\n<h3 id=\"5-设置合理的堆内存大小和GC策略\"><a href=\"#5-设置合理的堆内存大小和GC策略\" class=\"headerlink\" title=\"5. 设置合理的堆内存大小和GC策略\"></a>5. 设置合理的堆内存大小和GC策略</h3><p>堆内存设置的太小，将导致频繁GC甚至OOM，设置的太大同样也不好。可参考官方的公式:<br><code>MAX_HEAP_SIZE=max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB)</code></p>\n<p>关于GC策略，官方的建议是：小于16G，用CMS收集器；16-64G，用G1收集器。</p>\n<h3 id=\"6-设置合理的压式策略\"><a href=\"#6-设置合理的压式策略\" class=\"headerlink\" title=\"6. 设置合理的压式策略\"></a>6. 设置合理的压式策略</h3><p>Cassandra 将落到磁盘的数据存放在SStable中，压实是将多个SSTable 文件合并为一个的过程。合并后将减少重复的数据，使数据更紧凑。<br>Cassandra 有多种触发压实的策略，选一个适合的压实策略，可以更好地压实数据。<br>比如，我们使用的Kairosdb建议采用 DateTieredCompactionStrategy (<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction\" target=\"_blank\" rel=\"noopener\">DTCS</a>))压实策略。</p>\n<h3 id=\"7-启用-row-cache\"><a href=\"#7-启用-row-cache\" class=\"headerlink\" title=\"7. 启用 row cache\"></a>7. 启用 row cache</h3><p>row cache 把整个row 的内容都放在内存中。<br>适合的情况是，有一小部分hot data是经常反问的，或者要返回整个columns.在使用row cache时，用注意它对内存的影响。<br>可参考 Cassandra 的<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsConfiguringCaches.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>设置row cache。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>安利一个入门Cassandra 的好博客：<a href=\"http://teddymaef.github.io/learnCassandra/cn/\" target=\"_blank\" rel=\"noopener\">learn Cassandra</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>关于Cassandra</li>\n<li>提升读性能</li>\n</ul>\n<h2 id=\"关于Cassandra\"><a href=\"#关于Cassandra\" class=\"headerlink\" title=\"关于Cassandra\"></a>关于Cassandra</h2><p>Apache Cassandra是一个高度可扩展的高性能分布式数据库，<br>用于处理大量常规服务器上的大量数据，提供高可用性，无单点故障。它是一种NoSQL类型的数据库。</p>\n<p>我们看一下国外权威机构<a href=\"https://db-engines.com/en/ranking\" target=\"_blank\" rel=\"noopener\">DB-Engines</a>最近的数据库全球流行程度排名：</p>\n<img src=\"/2018/05/21/180521/database_rank.png\" title=\"数据库排名\">\n<p>可以看出，Cassandra 是排名前十中四个仅有的NoSQL数据库之一。Cassandra在国外这样受欢迎，其性能可想而知不会差，<br>但是在国内貌似还没有多少公司使用，且国内关于 Cassandra方面的资料较少。</p>\n<h2 id=\"提升读性能\"><a href=\"#提升读性能\" class=\"headerlink\" title=\"提升读性能\"></a>提升读性能</h2><p>Cassandra 在我们的项目中用来存储时序数据，经过测试，在三台4核16G的虚拟机上，<br>指标数据的写入TPS可以达到6.5W/s，基本可以满足我们的业务需求。<br>但是读取性能可能就会差很多，因为数据查询速度跟每次查询的数据量关系比较大，此处也不好定义TPS。<br>产品查询一周以上的指标数据时，经常会出现加载缓慢，甚至查询超时。为了改善查询状况，我们进行了不少努力。</p>\n<p>此处不讨论纵向扩展和横向扩展带来的性能提升。</p>\n<h3 id=\"1-加快墓碑回收甚至去除墓碑\"><a href=\"#1-加快墓碑回收甚至去除墓碑\" class=\"headerlink\" title=\"1. 加快墓碑回收甚至去除墓碑\"></a>1. 加快墓碑回收甚至去除墓碑</h3><p>在Cassandra中，当你删除一条数据时，其实是给这条数据进行update，给它update上一个标识，就是一个墓碑标识。<br> 当Cassandra集群在不同节点之间同步删除信息的时候，也会用到Tombstones(墓碑)，可以说墓碑是一种允许Cassandra快速写入的机制。</p>\n<p>关于墓碑的更多消息，可参考 <a href=\"https://docs.datastax.com/en/Cassandra/3.0/Cassandra/dml/dmlHowDataMaintain.html\" target=\"_blank\" rel=\"noopener\">Cassandra 数据维护官方文档</a></p>\n<p>可以这样理解，大量的墓碑数据会使查询时搜索的数据量变大，直接影响查询时的效率。<br>所以，为了消除这种影响，我们可以加快墓碑数据的回收，避免产生大量的墓碑数据。<br>甚至，当我们在写入时，若写入一致性的值与副本因子数量相等时，可以不产生墓碑数据，直接删掉该无效数据。<br>具体可通过 调整 table 中 gc_grace_seconds 参数来实现，默认为 864000（10天），我们可以设为 86400（1天）或者0（直接删除）。</p>\n<h3 id=\"2-降低read-repair-的几率\"><a href=\"#2-降低read-repair-的几率\" class=\"headerlink\" title=\"2. 降低read repair 的几率\"></a>2. 降低read repair 的几率</h3><p>每一次读操作，Cassandra都会在后台进行read repair操作。<br>如果只要求读一个节点数据，Cassandra在读到一个节点后，就将结果返回客户端，<br>然后用read repair对其他的replicas进行同步（根据timestamp）。<br>如果要求读多个节点，那么Cassandra就读多个节点，然后根据timestamp进行比较，返回客户端最新的数据，<br>然后再调用read repair对其他节点进行同步。<br>Read repair在后台的操作，会占用一定的CPU和I/O,所以影响读性能。<br>我们可以降低read repair 的几率，以提高读取性能。</p>\n<p>通过修改 table 中 read_repair_chance（取值范围 0-1）参数来设置read repair 的几率，建议设为 0.1。</p>\n<h3 id=\"3-指标数据预聚合\"><a href=\"#3-指标数据预聚合\" class=\"headerlink\" title=\"3. 指标数据预聚合\"></a>3. 指标数据预聚合</h3><p>思路：我们存在数据库中的指标数据，读取时会将指定时间范围内的数据进行聚合。<br>如果提前将数据按基本时间段提前聚合为一个值，读取时，只读取时间范围内的时间段的汇聚结果，将大大减少查询耗时。</p>\n<h3 id=\"4-合理部署产品\"><a href=\"#4-合理部署产品\" class=\"headerlink\" title=\"4. 合理部署产品\"></a>4. 合理部署产品</h3><p>公司的其他产品使用了mongoDB，线上环境中发现，这两个NoSQL数据库部署在一起时会相互争夺内存资源，<br>十分影响性能，因此最好将这两个数据库分开部署。</p>\n<h3 id=\"5-设置合理的堆内存大小和GC策略\"><a href=\"#5-设置合理的堆内存大小和GC策略\" class=\"headerlink\" title=\"5. 设置合理的堆内存大小和GC策略\"></a>5. 设置合理的堆内存大小和GC策略</h3><p>堆内存设置的太小，将导致频繁GC甚至OOM，设置的太大同样也不好。可参考官方的公式:<br><code>MAX_HEAP_SIZE=max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB)</code></p>\n<p>关于GC策略，官方的建议是：小于16G，用CMS收集器；16-64G，用G1收集器。</p>\n<h3 id=\"6-设置合理的压式策略\"><a href=\"#6-设置合理的压式策略\" class=\"headerlink\" title=\"6. 设置合理的压式策略\"></a>6. 设置合理的压式策略</h3><p>Cassandra 将落到磁盘的数据存放在SStable中，压实是将多个SSTable 文件合并为一个的过程。合并后将减少重复的数据，使数据更紧凑。<br>Cassandra 有多种触发压实的策略，选一个适合的压实策略，可以更好地压实数据。<br>比如，我们使用的Kairosdb建议采用 DateTieredCompactionStrategy (<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dtcs-compaction\" target=\"_blank\" rel=\"noopener\">DTCS</a>))压实策略。</p>\n<h3 id=\"7-启用-row-cache\"><a href=\"#7-启用-row-cache\" class=\"headerlink\" title=\"7. 启用 row cache\"></a>7. 启用 row cache</h3><p>row cache 把整个row 的内容都放在内存中。<br>适合的情况是，有一小部分hot data是经常反问的，或者要返回整个columns.在使用row cache时，用注意它对内存的影响。<br>可参考 Cassandra 的<a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsConfiguringCaches.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>设置row cache。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>安利一个入门Cassandra 的好博客：<a href=\"http://teddymaef.github.io/learnCassandra/cn/\" target=\"_blank\" rel=\"noopener\">learn Cassandra</a></p>\n"},{"layout":"blogs_default","title":"Spark端口整理","name":"Spark端口整理","subtitle":"Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.","modal-id":1,"date":"2017-06-06T14:08:41.000Z","img":"spark.png","thumbnail":"spark.png","alt":"Picture","writer":"jason song","reference-name":["spark doc","spark doc2"],"reference-url":["https://spark.apache.org/docs/latest/security.html#configuring-ports-for-network-security","https://spark.apache.org/docs/latest/configuration.html"],"_content":"\n\n>Configuring Ports for Network Security\n>Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.\n\n## Standalone mode only\n\n| From\tTo\t| Default Port | Purpose\t| Configuration| Setting |\tNotes |\n| --------   |  :-----:   | :----:  | :-----:   |  :----:  |  :----:   |\n| Browser |\tStandalone Master\t|8080|\tWeb UI  |\tspark.master.ui.port  SPARK_MASTER_WEBUI_PORT\t|Jetty-based. Standalone mode only.|\n|Browser |\t Standalone Worker\t|8081|\tWeb UI\t |spark.worker.ui.port SPARK_WORKER_WEBUI_PORT\t|Jetty-based. Standalone mode only.|\n| Driver、 Standalone Worker\t|Standalone Master\t |7077|\tSubmit job to cluster Join cluster\t|SPARK_MASTER_PORT |Set to \"0\" to choose a port randomly. Standalone mode only. spark service 端口|\n| Standalone Master |\tStandalone Worker|\t(random)|\tSchedule executors\t|SPARK_WORKER_PORT\t|Set to \"0\" to choose a port randomly. Standalone mode only.|\n\n## All cluster managers\n\n| From\tTo\t| Default Port | Purpose\t| Configuration| Setting |\tNotes |\n| --------   |  :-----:   | :----:  | :-----:   |  :----:  |  :----:   |\n| Browser |History Server\t|4040|\tWeb UI  |\tspark.master.ui.port  \t|Jetty-based. 一个worker上可以有多个Job,因此该端口号会随着job的增加而递增。|\n|Browser |\t History Server|8081|\tWeb UI\t |spark.history.ui.port\t|Jetty-based.  |\n| Executor /  Standalone Master|Driver\t |(random)|\tConnect to application /Notify executor state changes\t|spark.driver.port |Set to \"0\" to choose a port randomly. |\n| Standalone Master |\tExecutor / Driver|\t(random)|Block Manager port\t|spark.blockManager.port|Raw socket via ServerSocketChannel|\n\n注：History Server 是需要配置才可以访问的。配置好后访问该服务，能重新渲染生成UI界面展现出该Application在执行过程中的运行时信息。\n       启用该服务方法可参考 Spark History Server配置使用 和 spark 查看 job history 日志 。\n\n## Spark UI\n\n| From\tTo\t| Default |\tMeaning |\n| --------   |  :-----:   | :----:  |\n|spark.blockManager.port |(random)\t |Port for all block managers to listen on. These exist on both the driver and the executors. |\n|spark.driver.blockManager.port |(value of spark.blockManager.port)\t |spark.driver.blockManager.port\t(value of spark.blockManager.port)\tDriver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors. |\n|spark.driver.port  |(random)\t |spark.driver.port\t(random)\tPort for the driver to listen on. This is used for communicating with the executors and the standalone Master. |\n\n\n## Shuffle Behavior\n\n|Property Name\t|Default|\tMeaning|\n| --------   |  :-----:   | :----:  |\n|spark.shuffle.service.port\t|7337|\tPort on which the external shuffle service will run.|\n\n## Spark隐藏端口\n\n6066 相关隐藏端口\n可参考: [apache-spark-hidden-rest-api](http://arturmkrtchyan.com/apache-spark-hidden-rest-api)\n\n## 参考\n>[spark doc](https://spark.apache.org/docs/latest/security.html#configuring)\n>\n>[spark doc2](https://spark.apache.org/docs/latest/configuration.html)\n\n","source":"_posts/2017-06-06-doc.markdown","raw":"---\nlayout: blogs_default\ntitle: Spark端口整理\nname: Spark端口整理\nsubtitle:  Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.\nmodal-id: 1\ndate: 2017-06-06 22:08:41\ntags: \n    - spark\n    - 大数据\ncategories:              \n- 大数据 \nimg: spark.png\nthumbnail: spark.png\nalt: Picture \nwriter: jason song\nreference-name: \n    - spark doc\n    - spark doc2\nreference-url: \n    - https://spark.apache.org/docs/latest/security.html#configuring-ports-for-network-security\n    - https://spark.apache.org/docs/latest/configuration.html\n    \n---\n\n\n>Configuring Ports for Network Security\n>Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.\n\n## Standalone mode only\n\n| From\tTo\t| Default Port | Purpose\t| Configuration| Setting |\tNotes |\n| --------   |  :-----:   | :----:  | :-----:   |  :----:  |  :----:   |\n| Browser |\tStandalone Master\t|8080|\tWeb UI  |\tspark.master.ui.port  SPARK_MASTER_WEBUI_PORT\t|Jetty-based. Standalone mode only.|\n|Browser |\t Standalone Worker\t|8081|\tWeb UI\t |spark.worker.ui.port SPARK_WORKER_WEBUI_PORT\t|Jetty-based. Standalone mode only.|\n| Driver、 Standalone Worker\t|Standalone Master\t |7077|\tSubmit job to cluster Join cluster\t|SPARK_MASTER_PORT |Set to \"0\" to choose a port randomly. Standalone mode only. spark service 端口|\n| Standalone Master |\tStandalone Worker|\t(random)|\tSchedule executors\t|SPARK_WORKER_PORT\t|Set to \"0\" to choose a port randomly. Standalone mode only.|\n\n## All cluster managers\n\n| From\tTo\t| Default Port | Purpose\t| Configuration| Setting |\tNotes |\n| --------   |  :-----:   | :----:  | :-----:   |  :----:  |  :----:   |\n| Browser |History Server\t|4040|\tWeb UI  |\tspark.master.ui.port  \t|Jetty-based. 一个worker上可以有多个Job,因此该端口号会随着job的增加而递增。|\n|Browser |\t History Server|8081|\tWeb UI\t |spark.history.ui.port\t|Jetty-based.  |\n| Executor /  Standalone Master|Driver\t |(random)|\tConnect to application /Notify executor state changes\t|spark.driver.port |Set to \"0\" to choose a port randomly. |\n| Standalone Master |\tExecutor / Driver|\t(random)|Block Manager port\t|spark.blockManager.port|Raw socket via ServerSocketChannel|\n\n注：History Server 是需要配置才可以访问的。配置好后访问该服务，能重新渲染生成UI界面展现出该Application在执行过程中的运行时信息。\n       启用该服务方法可参考 Spark History Server配置使用 和 spark 查看 job history 日志 。\n\n## Spark UI\n\n| From\tTo\t| Default |\tMeaning |\n| --------   |  :-----:   | :----:  |\n|spark.blockManager.port |(random)\t |Port for all block managers to listen on. These exist on both the driver and the executors. |\n|spark.driver.blockManager.port |(value of spark.blockManager.port)\t |spark.driver.blockManager.port\t(value of spark.blockManager.port)\tDriver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors. |\n|spark.driver.port  |(random)\t |spark.driver.port\t(random)\tPort for the driver to listen on. This is used for communicating with the executors and the standalone Master. |\n\n\n## Shuffle Behavior\n\n|Property Name\t|Default|\tMeaning|\n| --------   |  :-----:   | :----:  |\n|spark.shuffle.service.port\t|7337|\tPort on which the external shuffle service will run.|\n\n## Spark隐藏端口\n\n6066 相关隐藏端口\n可参考: [apache-spark-hidden-rest-api](http://arturmkrtchyan.com/apache-spark-hidden-rest-api)\n\n## 参考\n>[spark doc](https://spark.apache.org/docs/latest/security.html#configuring)\n>\n>[spark doc2](https://spark.apache.org/docs/latest/configuration.html)\n\n","slug":"2017-06-06-doc","published":1,"updated":"2018-09-20T15:24:38.658Z","comments":1,"photos":[],"link":"","_id":"cjovkdwtb000hayqcya2g2q4f","content":"<blockquote>\n<p>Configuring Ports for Network Security<br>Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.</p>\n</blockquote>\n<h2 id=\"Standalone-mode-only\"><a href=\"#Standalone-mode-only\" class=\"headerlink\" title=\"Standalone mode only\"></a>Standalone mode only</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default Port</th>\n<th style=\"text-align:center\">Purpose</th>\n<th style=\"text-align:center\">Configuration</th>\n<th style=\"text-align:center\">Setting</th>\n<th style=\"text-align:center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">Standalone Master</td>\n<td style=\"text-align:center\">8080</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.master.ui.port  SPARK_MASTER_WEBUI_PORT</td>\n<td style=\"text-align:center\">Jetty-based. Standalone mode only.</td>\n</tr>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">Standalone Worker</td>\n<td style=\"text-align:center\">8081</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.worker.ui.port SPARK_WORKER_WEBUI_PORT</td>\n<td style=\"text-align:center\">Jetty-based. Standalone mode only.</td>\n</tr>\n<tr>\n<td>Driver、 Standalone Worker</td>\n<td style=\"text-align:center\">Standalone Master</td>\n<td style=\"text-align:center\">7077</td>\n<td style=\"text-align:center\">Submit job to cluster Join cluster</td>\n<td style=\"text-align:center\">SPARK_MASTER_PORT</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly. Standalone mode only. spark service 端口</td>\n</tr>\n<tr>\n<td>Standalone Master</td>\n<td style=\"text-align:center\">Standalone Worker</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Schedule executors</td>\n<td style=\"text-align:center\">SPARK_WORKER_PORT</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly. Standalone mode only.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"All-cluster-managers\"><a href=\"#All-cluster-managers\" class=\"headerlink\" title=\"All cluster managers\"></a>All cluster managers</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default Port</th>\n<th style=\"text-align:center\">Purpose</th>\n<th style=\"text-align:center\">Configuration</th>\n<th style=\"text-align:center\">Setting</th>\n<th style=\"text-align:center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">History Server</td>\n<td style=\"text-align:center\">4040</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.master.ui.port</td>\n<td style=\"text-align:center\">Jetty-based. 一个worker上可以有多个Job,因此该端口号会随着job的增加而递增。</td>\n</tr>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">History Server</td>\n<td style=\"text-align:center\">8081</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.history.ui.port</td>\n<td style=\"text-align:center\">Jetty-based.</td>\n</tr>\n<tr>\n<td>Executor /  Standalone Master</td>\n<td style=\"text-align:center\">Driver</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Connect to application /Notify executor state changes</td>\n<td style=\"text-align:center\">spark.driver.port</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly.</td>\n</tr>\n<tr>\n<td>Standalone Master</td>\n<td style=\"text-align:center\">Executor / Driver</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Block Manager port</td>\n<td style=\"text-align:center\">spark.blockManager.port</td>\n<td style=\"text-align:center\">Raw socket via ServerSocketChannel</td>\n</tr>\n</tbody>\n</table>\n<p>注：History Server 是需要配置才可以访问的。配置好后访问该服务，能重新渲染生成UI界面展现出该Application在执行过程中的运行时信息。<br>       启用该服务方法可参考 Spark History Server配置使用 和 spark 查看 job history 日志 。</p>\n<h2 id=\"Spark-UI\"><a href=\"#Spark-UI\" class=\"headerlink\" title=\"Spark UI\"></a>Spark UI</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spark.blockManager.port</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Port for all block managers to listen on. These exist on both the driver and the executors.</td>\n</tr>\n<tr>\n<td>spark.driver.blockManager.port</td>\n<td style=\"text-align:center\">(value of spark.blockManager.port)</td>\n<td style=\"text-align:center\">spark.driver.blockManager.port    (value of spark.blockManager.port)    Driver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors.</td>\n</tr>\n<tr>\n<td>spark.driver.port</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">spark.driver.port    (random)    Port for the driver to listen on. This is used for communicating with the executors and the standalone Master.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shuffle-Behavior\"><a href=\"#Shuffle-Behavior\" class=\"headerlink\" title=\"Shuffle Behavior\"></a>Shuffle Behavior</h2><table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spark.shuffle.service.port</td>\n<td style=\"text-align:center\">7337</td>\n<td style=\"text-align:center\">Port on which the external shuffle service will run.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Spark隐藏端口\"><a href=\"#Spark隐藏端口\" class=\"headerlink\" title=\"Spark隐藏端口\"></a>Spark隐藏端口</h2><p>6066 相关隐藏端口<br>可参考: <a href=\"http://arturmkrtchyan.com/apache-spark-hidden-rest-api\" target=\"_blank\" rel=\"noopener\">apache-spark-hidden-rest-api</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://spark.apache.org/docs/latest/security.html#configuring\" target=\"_blank\" rel=\"noopener\">spark doc</a></p>\n<p><a href=\"https://spark.apache.org/docs/latest/configuration.html\" target=\"_blank\" rel=\"noopener\">spark doc2</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Configuring Ports for Network Security<br>Spark makes heavy use of the network, and some environments have strict requirements for using tight firewall settings. Below are the primary ports that Spark uses for its communication and how to configure those ports.</p>\n</blockquote>\n<h2 id=\"Standalone-mode-only\"><a href=\"#Standalone-mode-only\" class=\"headerlink\" title=\"Standalone mode only\"></a>Standalone mode only</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default Port</th>\n<th style=\"text-align:center\">Purpose</th>\n<th style=\"text-align:center\">Configuration</th>\n<th style=\"text-align:center\">Setting</th>\n<th style=\"text-align:center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">Standalone Master</td>\n<td style=\"text-align:center\">8080</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.master.ui.port  SPARK_MASTER_WEBUI_PORT</td>\n<td style=\"text-align:center\">Jetty-based. Standalone mode only.</td>\n</tr>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">Standalone Worker</td>\n<td style=\"text-align:center\">8081</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.worker.ui.port SPARK_WORKER_WEBUI_PORT</td>\n<td style=\"text-align:center\">Jetty-based. Standalone mode only.</td>\n</tr>\n<tr>\n<td>Driver、 Standalone Worker</td>\n<td style=\"text-align:center\">Standalone Master</td>\n<td style=\"text-align:center\">7077</td>\n<td style=\"text-align:center\">Submit job to cluster Join cluster</td>\n<td style=\"text-align:center\">SPARK_MASTER_PORT</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly. Standalone mode only. spark service 端口</td>\n</tr>\n<tr>\n<td>Standalone Master</td>\n<td style=\"text-align:center\">Standalone Worker</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Schedule executors</td>\n<td style=\"text-align:center\">SPARK_WORKER_PORT</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly. Standalone mode only.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"All-cluster-managers\"><a href=\"#All-cluster-managers\" class=\"headerlink\" title=\"All cluster managers\"></a>All cluster managers</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default Port</th>\n<th style=\"text-align:center\">Purpose</th>\n<th style=\"text-align:center\">Configuration</th>\n<th style=\"text-align:center\">Setting</th>\n<th style=\"text-align:center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">History Server</td>\n<td style=\"text-align:center\">4040</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.master.ui.port</td>\n<td style=\"text-align:center\">Jetty-based. 一个worker上可以有多个Job,因此该端口号会随着job的增加而递增。</td>\n</tr>\n<tr>\n<td>Browser</td>\n<td style=\"text-align:center\">History Server</td>\n<td style=\"text-align:center\">8081</td>\n<td style=\"text-align:center\">Web UI</td>\n<td style=\"text-align:center\">spark.history.ui.port</td>\n<td style=\"text-align:center\">Jetty-based.</td>\n</tr>\n<tr>\n<td>Executor /  Standalone Master</td>\n<td style=\"text-align:center\">Driver</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Connect to application /Notify executor state changes</td>\n<td style=\"text-align:center\">spark.driver.port</td>\n<td style=\"text-align:center\">Set to “0” to choose a port randomly.</td>\n</tr>\n<tr>\n<td>Standalone Master</td>\n<td style=\"text-align:center\">Executor / Driver</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Block Manager port</td>\n<td style=\"text-align:center\">spark.blockManager.port</td>\n<td style=\"text-align:center\">Raw socket via ServerSocketChannel</td>\n</tr>\n</tbody>\n</table>\n<p>注：History Server 是需要配置才可以访问的。配置好后访问该服务，能重新渲染生成UI界面展现出该Application在执行过程中的运行时信息。<br>       启用该服务方法可参考 Spark History Server配置使用 和 spark 查看 job history 日志 。</p>\n<h2 id=\"Spark-UI\"><a href=\"#Spark-UI\" class=\"headerlink\" title=\"Spark UI\"></a>Spark UI</h2><table>\n<thead>\n<tr>\n<th>From    To</th>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spark.blockManager.port</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">Port for all block managers to listen on. These exist on both the driver and the executors.</td>\n</tr>\n<tr>\n<td>spark.driver.blockManager.port</td>\n<td style=\"text-align:center\">(value of spark.blockManager.port)</td>\n<td style=\"text-align:center\">spark.driver.blockManager.port    (value of spark.blockManager.port)    Driver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors.</td>\n</tr>\n<tr>\n<td>spark.driver.port</td>\n<td style=\"text-align:center\">(random)</td>\n<td style=\"text-align:center\">spark.driver.port    (random)    Port for the driver to listen on. This is used for communicating with the executors and the standalone Master.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shuffle-Behavior\"><a href=\"#Shuffle-Behavior\" class=\"headerlink\" title=\"Shuffle Behavior\"></a>Shuffle Behavior</h2><table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spark.shuffle.service.port</td>\n<td style=\"text-align:center\">7337</td>\n<td style=\"text-align:center\">Port on which the external shuffle service will run.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Spark隐藏端口\"><a href=\"#Spark隐藏端口\" class=\"headerlink\" title=\"Spark隐藏端口\"></a>Spark隐藏端口</h2><p>6066 相关隐藏端口<br>可参考: <a href=\"http://arturmkrtchyan.com/apache-spark-hidden-rest-api\" target=\"_blank\" rel=\"noopener\">apache-spark-hidden-rest-api</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://spark.apache.org/docs/latest/security.html#configuring\" target=\"_blank\" rel=\"noopener\">spark doc</a></p>\n<p><a href=\"https://spark.apache.org/docs/latest/configuration.html\" target=\"_blank\" rel=\"noopener\">spark doc2</a></p>\n</blockquote>\n"},{"layout":"blogs_default","title":"Metric使用","subtitle":"Metrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控","date":"2017-12-18T14:08:41.000Z","_content":"\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ 简介\n+ MAVEN设置\n+ The Registry\n+ 五种度量类型\n    + Gauges\n    + Counters\n    + Histograms\n    + Meters\n    + Timers\n+ Reporter\n+ 健康检查\n\n\n## 简介\nMetrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控。\nMetric 的使用可参考[官网](http://metrics.dropwizard.io/3.2.3/getting-started.html)。\n\n## MAVEN设置\n\n```\n<dependency> \n    <dependency> \n        <groupId> io.dropwizard.metrics </ groupId> \n        <artifactId> metrics-core </ artifactId> \n        <version> $ {metrics.version} </ version> \n    </ dependency> \n</ dependencies>\n```\n\n## The Registry\nMetrics的核心是MetricRegistry类，它是所有应用程序指标的容器。\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n## 五种度量类型\n\n### Gauges\n最基本的度量指标，返回一个值。\n\n```\npublic class QueueManager {\n    private final Queue queue;\n\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n测量此量表时，将返回队列中的任务数量。\n\n在注册表中的每个指标都有一个唯一的名称，例如 \"things.count\"或\"com.example.Thing.latency\"。MetricRegistry有一个用于构造这些名字的静态辅助方法：\n\n```\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n它将返回一个类似\"com.example.QueueManager.jobs.size\"的字符串。\n\n###  Counters\nCounters只是一个AtomicLong实例的衡量标准。您可以增加或减少其值。例如，我们可能需要一个更有效的方式来衡量队列中待处理的任务：\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\n\npublic void addJob(Job job) {\n    pendingJobs.inc();\n    queue.offer(job);\n}\n\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n```\n\n每次测量这个计数器时，它都会返回队列中的任务数量。\n\n正如你所看到的，Counters的API略有不同：用 counter(String)而不是 register(String, Metric) 。\n\n\n###  Histograms\nHistograms（直方图 ）统计 数据流中值的分布。除了最小值，最大值，平均值等之外，它还测量中值，第75,90,95,98,99和99.9百分位数。\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // etc\n    responseSizes.update(response.getContent().length);\n}\n```\n\n这个直方图将以字节为单位来测量响应的大小。\n###  Meters\n\nMeters测量一段时间内的事件发生率（例如“每秒请求数”）。除了平均速度之外，Meters还跟踪1，5和15分钟的均值。\n```\nprivate final MetricRegistry metrics = new MetricRegistry();\nprivate final Meter requests = metrics.meter(\"requests\");\n\npublic void handleRequest(Request request, Response response) {\n    requests.mark();\n    // etc\n}\n```\n\n将测量每秒请求的请求率。\n\n###  Timer\nTimer测量一段代码被调用的速率和它的持续时间的分布。\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time(); //相当于Meter.mark()\n    try {\n        // etc;\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n该Timer 将测量处理每个请求所需的时间（以纳秒为单位），并提供每秒请求的请求速率。\n\nTimer 其实是 Histogram 和 Meter 的结合\n##  Reporter \n报表，用于展示统计结果\n\n1. 通过JMX报告Metric\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n2. STDOUT, using ConsoleReporter from metrics-core\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\n                                                .convertRatesTo(TimeUnit.SECONDS)\n                                                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n3. CSV files, using CsvReporter from metrics-core\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n4. SLF4J loggers, using Slf4jReporter from metrics-core\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n5. Ganglia, using GangliaReporter from metrics-ganglia\n```\nfinal GMetric ganglia = new GMetric(\"ganglia.example.com\", 8649, UDPAddressingMode.MULTICAST, 1);\nfinal GangliaReporter reporter = GangliaReporter.forRegistry(registry)\n                                                .convertRatesTo(TimeUnit.SECONDS)\n                                                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                .build(ganglia);\nreporter.start(1, TimeUnit.MINUTES);\n```\n6. Graphite, using GraphiteReporter from metrics-graphite\n```\nfinal Graphite graphite = new Graphite(new InetSocketAddress(\"graphite.example.com\", 2003));\nfinal GraphiteReporter reporter = GraphiteReporter.forRegistry(registry)\n                                                  .prefixedWith(\"web1.example.com\")\n                                                  .convertRatesTo(TimeUnit.SECONDS)\n                                                  .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                  .filter(MetricFilter.ALL)\n                                                  .build(graphite);\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n## 健康检查\n度量标准还能够对服务的健康状况进行检查，需要引用metrics-healthchecks模块 。\n\n首先，创建一个新的HealthCheckRegistry实例：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\n```\n\n其次，实现一个HealthCheck子类：\n\n\n```\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n```\n\n然后用Metrics注册它的一个实例：\n\n\n```\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n\n```\n运行所有注册的健康检查：\n\n```\nfinal Map<String, HealthCheck.Result> results = healthChecks.runHealthChecks();\nfor (Entry<String, HealthCheck.Result> entry : results.entrySet()) {\n    if (entry.getValue().isHealthy()) {\n        System.out.println(entry.getKey() + \" is healthy\");\n    } else {\n        System.err.println(entry.getKey() + \" is UNHEALTHY: \" + entry.getValue().getMessage());\n        final Throwable e = entry.getValue().getError();\n        if (e != null) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n度量标准带有预先构建的运行状况检查：ThreadDeadlockHealthCheck使用Java的内置线程死锁检测来确定是否有线程死锁。\n\n\n\n","source":"_posts/2017-12-18-doc.markdown","raw":"---\nlayout: blogs_default\ntitle: Metric使用\nsubtitle: Metrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控\ndate: 2017-12-18 22:08:41\ncategories:              \n- 中间件 \ntags:\n    - Metric\n    - java\n\n---\n\n\n\n **目录 (Table of Contents)**\n------------------------------------------------\n\n+ 简介\n+ MAVEN设置\n+ The Registry\n+ 五种度量类型\n    + Gauges\n    + Counters\n    + Histograms\n    + Meters\n    + Timers\n+ Reporter\n+ 健康检查\n\n\n## 简介\nMetrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控。\nMetric 的使用可参考[官网](http://metrics.dropwizard.io/3.2.3/getting-started.html)。\n\n## MAVEN设置\n\n```\n<dependency> \n    <dependency> \n        <groupId> io.dropwizard.metrics </ groupId> \n        <artifactId> metrics-core </ artifactId> \n        <version> $ {metrics.version} </ version> \n    </ dependency> \n</ dependencies>\n```\n\n## The Registry\nMetrics的核心是MetricRegistry类，它是所有应用程序指标的容器。\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n## 五种度量类型\n\n### Gauges\n最基本的度量指标，返回一个值。\n\n```\npublic class QueueManager {\n    private final Queue queue;\n\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n测量此量表时，将返回队列中的任务数量。\n\n在注册表中的每个指标都有一个唯一的名称，例如 \"things.count\"或\"com.example.Thing.latency\"。MetricRegistry有一个用于构造这些名字的静态辅助方法：\n\n```\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n它将返回一个类似\"com.example.QueueManager.jobs.size\"的字符串。\n\n###  Counters\nCounters只是一个AtomicLong实例的衡量标准。您可以增加或减少其值。例如，我们可能需要一个更有效的方式来衡量队列中待处理的任务：\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\n\npublic void addJob(Job job) {\n    pendingJobs.inc();\n    queue.offer(job);\n}\n\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n```\n\n每次测量这个计数器时，它都会返回队列中的任务数量。\n\n正如你所看到的，Counters的API略有不同：用 counter(String)而不是 register(String, Metric) 。\n\n\n###  Histograms\nHistograms（直方图 ）统计 数据流中值的分布。除了最小值，最大值，平均值等之外，它还测量中值，第75,90,95,98,99和99.9百分位数。\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // etc\n    responseSizes.update(response.getContent().length);\n}\n```\n\n这个直方图将以字节为单位来测量响应的大小。\n###  Meters\n\nMeters测量一段时间内的事件发生率（例如“每秒请求数”）。除了平均速度之外，Meters还跟踪1，5和15分钟的均值。\n```\nprivate final MetricRegistry metrics = new MetricRegistry();\nprivate final Meter requests = metrics.meter(\"requests\");\n\npublic void handleRequest(Request request, Response response) {\n    requests.mark();\n    // etc\n}\n```\n\n将测量每秒请求的请求率。\n\n###  Timer\nTimer测量一段代码被调用的速率和它的持续时间的分布。\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time(); //相当于Meter.mark()\n    try {\n        // etc;\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n该Timer 将测量处理每个请求所需的时间（以纳秒为单位），并提供每秒请求的请求速率。\n\nTimer 其实是 Histogram 和 Meter 的结合\n##  Reporter \n报表，用于展示统计结果\n\n1. 通过JMX报告Metric\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n2. STDOUT, using ConsoleReporter from metrics-core\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\n                                                .convertRatesTo(TimeUnit.SECONDS)\n                                                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n3. CSV files, using CsvReporter from metrics-core\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n4. SLF4J loggers, using Slf4jReporter from metrics-core\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n5. Ganglia, using GangliaReporter from metrics-ganglia\n```\nfinal GMetric ganglia = new GMetric(\"ganglia.example.com\", 8649, UDPAddressingMode.MULTICAST, 1);\nfinal GangliaReporter reporter = GangliaReporter.forRegistry(registry)\n                                                .convertRatesTo(TimeUnit.SECONDS)\n                                                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                .build(ganglia);\nreporter.start(1, TimeUnit.MINUTES);\n```\n6. Graphite, using GraphiteReporter from metrics-graphite\n```\nfinal Graphite graphite = new Graphite(new InetSocketAddress(\"graphite.example.com\", 2003));\nfinal GraphiteReporter reporter = GraphiteReporter.forRegistry(registry)\n                                                  .prefixedWith(\"web1.example.com\")\n                                                  .convertRatesTo(TimeUnit.SECONDS)\n                                                  .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                                  .filter(MetricFilter.ALL)\n                                                  .build(graphite);\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n## 健康检查\n度量标准还能够对服务的健康状况进行检查，需要引用metrics-healthchecks模块 。\n\n首先，创建一个新的HealthCheckRegistry实例：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\n```\n\n其次，实现一个HealthCheck子类：\n\n\n```\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n```\n\n然后用Metrics注册它的一个实例：\n\n\n```\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n\n```\n运行所有注册的健康检查：\n\n```\nfinal Map<String, HealthCheck.Result> results = healthChecks.runHealthChecks();\nfor (Entry<String, HealthCheck.Result> entry : results.entrySet()) {\n    if (entry.getValue().isHealthy()) {\n        System.out.println(entry.getKey() + \" is healthy\");\n    } else {\n        System.err.println(entry.getKey() + \" is UNHEALTHY: \" + entry.getValue().getMessage());\n        final Throwable e = entry.getValue().getError();\n        if (e != null) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n度量标准带有预先构建的运行状况检查：ThreadDeadlockHealthCheck使用Java的内置线程死锁检测来确定是否有线程死锁。\n\n\n\n","slug":"2017-12-18-doc","published":1,"updated":"2018-09-22T02:49:05.202Z","comments":1,"photos":[],"link":"","_id":"cjovkdwtf000iayqc4i6z8x0k","content":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>简介</li>\n<li>MAVEN设置</li>\n<li>The Registry</li>\n<li>五种度量类型<ul>\n<li>Gauges</li>\n<li>Counters</li>\n<li>Histograms</li>\n<li>Meters</li>\n<li>Timers</li>\n</ul>\n</li>\n<li>Reporter</li>\n<li>健康检查</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Metrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控。<br>Metric 的使用可参考<a href=\"http://metrics.dropwizard.io/3.2.3/getting-started.html\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"MAVEN设置\"><a href=\"#MAVEN设置\" class=\"headerlink\" title=\"MAVEN设置\"></a>MAVEN设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;dependency&gt; </span><br><span class=\"line\">        &lt;groupId&gt; io.dropwizard.metrics &lt;/ groupId&gt; </span><br><span class=\"line\">        &lt;artifactId&gt; metrics-core &lt;/ artifactId&gt; </span><br><span class=\"line\">        &lt;version&gt; $ &#123;metrics.version&#125; &lt;/ version&gt; </span><br><span class=\"line\">    &lt;/ dependency&gt; </span><br><span class=\"line\">&lt;/ dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Registry\"><a href=\"#The-Registry\" class=\"headerlink\" title=\"The Registry\"></a>The Registry</h2><p>Metrics的核心是MetricRegistry类，它是所有应用程序指标的容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n<h2 id=\"五种度量类型\"><a href=\"#五种度量类型\" class=\"headerlink\" title=\"五种度量类型\"></a>五种度量类型</h2><h3 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h3><p>最基本的度量指标，返回一个值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测量此量表时，将返回队列中的任务数量。</p>\n<p>在注册表中的每个指标都有一个唯一的名称，例如 “things.count”或”com.example.Thing.latency”。MetricRegistry有一个用于构造这些名字的静态辅助方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n<p>它将返回一个类似”com.example.QueueManager.jobs.size”的字符串。</p>\n<h3 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h3><p>Counters只是一个AtomicLong实例的衡量标准。您可以增加或减少其值。例如，我们可能需要一个更有效的方式来衡量队列中待处理的任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次测量这个计数器时，它都会返回队列中的任务数量。</p>\n<p>正如你所看到的，Counters的API略有不同：用 counter(String)而不是 register(String, Metric) 。</p>\n<h3 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h3><p>Histograms（直方图 ）统计 数据流中值的分布。除了最小值，最大值，平均值等之外，它还测量中值，第75,90,95,98,99和99.9百分位数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // etc</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个直方图将以字节为单位来测量响应的大小。</p>\n<h3 id=\"Meters\"><a href=\"#Meters\" class=\"headerlink\" title=\"Meters\"></a>Meters</h3><p>Meters测量一段时间内的事件发生率（例如“每秒请求数”）。除了平均速度之外，Meters还跟踪1，5和15分钟的均值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final MetricRegistry metrics = new MetricRegistry();</span><br><span class=\"line\">private final Meter requests = metrics.meter(&quot;requests&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    requests.mark();</span><br><span class=\"line\">    // etc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将测量每秒请求的请求率。</p>\n<h3 id=\"Timer\"><a href=\"#Timer\" class=\"headerlink\" title=\"Timer\"></a>Timer</h3><p>Timer测量一段代码被调用的速率和它的持续时间的分布。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time(); //相当于Meter.mark()</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // etc;</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该Timer 将测量处理每个请求所需的时间（以纳秒为单位），并提供每秒请求的请求速率。</p>\n<p>Timer 其实是 Histogram 和 Meter 的结合</p>\n<h2 id=\"Reporter\"><a href=\"#Reporter\" class=\"headerlink\" title=\"Reporter\"></a>Reporter</h2><p>报表，用于展示统计结果</p>\n<ol>\n<li><p>通过JMX报告Metric</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final JmxReporter reporter = JmxReporter.forRegistry(registry).build();</span><br><span class=\"line\">reporter.start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>STDOUT, using ConsoleReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)</span><br><span class=\"line\">                                                .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                .build();</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSV files, using CsvReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final CsvReporter reporter = CsvReporter.forRegistry(registry)</span><br><span class=\"line\">                                        .formatFor(Locale.US)</span><br><span class=\"line\">                                        .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                        .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                        .build(new File(&quot;~/projects/data/&quot;));</span><br><span class=\"line\">reporter.start(1, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SLF4J loggers, using Slf4jReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)</span><br><span class=\"line\">                                            .outputTo(LoggerFactory.getLogger(&quot;com.example.metrics&quot;))</span><br><span class=\"line\">                                            .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                            .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                            .build();</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ganglia, using GangliaReporter from metrics-ganglia</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final GMetric ganglia = new GMetric(&quot;ganglia.example.com&quot;, 8649, UDPAddressingMode.MULTICAST, 1);</span><br><span class=\"line\">final GangliaReporter reporter = GangliaReporter.forRegistry(registry)</span><br><span class=\"line\">                                                .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                .build(ganglia);</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Graphite, using GraphiteReporter from metrics-graphite</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Graphite graphite = new Graphite(new InetSocketAddress(&quot;graphite.example.com&quot;, 2003));</span><br><span class=\"line\">final GraphiteReporter reporter = GraphiteReporter.forRegistry(registry)</span><br><span class=\"line\">                                                  .prefixedWith(&quot;web1.example.com&quot;)</span><br><span class=\"line\">                                                  .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                  .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                  .filter(MetricFilter.ALL)</span><br><span class=\"line\">                                                  .build(graphite);</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h2><p>度量标准还能够对服务的健康状况进行检查，需要引用metrics-healthchecks模块 。</p>\n<p>首先，创建一个新的HealthCheckRegistry实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br></pre></td></tr></table></figure>\n<p>其次，实现一个HealthCheck子类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用Metrics注册它的一个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n<p>运行所有注册的健康检查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Map&lt;String, HealthCheck.Result&gt; results = healthChecks.runHealthChecks();</span><br><span class=\"line\">for (Entry&lt;String, HealthCheck.Result&gt; entry : results.entrySet()) &#123;</span><br><span class=\"line\">    if (entry.getValue().isHealthy()) &#123;</span><br><span class=\"line\">        System.out.println(entry.getKey() + &quot; is healthy&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        System.err.println(entry.getKey() + &quot; is UNHEALTHY: &quot; + entry.getValue().getMessage());</span><br><span class=\"line\">        final Throwable e = entry.getValue().getError();</span><br><span class=\"line\">        if (e != null) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>度量标准带有预先构建的运行状况检查：ThreadDeadlockHealthCheck使用Java的内置线程死锁检测来确定是否有线程死锁。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录-Table-of-Contents\"><a href=\"#目录-Table-of-Contents\" class=\"headerlink\" title=\" 目录 (Table of Contents)\"></a> <strong>目录 (Table of Contents)</strong></h2><ul>\n<li>简介</li>\n<li>MAVEN设置</li>\n<li>The Registry</li>\n<li>五种度量类型<ul>\n<li>Gauges</li>\n<li>Counters</li>\n<li>Histograms</li>\n<li>Meters</li>\n<li>Timers</li>\n</ul>\n</li>\n<li>Reporter</li>\n<li>健康检查</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Metrics是一个给JAVA提供度量工具的包，在JAVA代码中嵌入Metrics代码，可以方便的对业务代码的各个指标进行监控。<br>Metric 的使用可参考<a href=\"http://metrics.dropwizard.io/3.2.3/getting-started.html\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"MAVEN设置\"><a href=\"#MAVEN设置\" class=\"headerlink\" title=\"MAVEN设置\"></a>MAVEN设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;dependency&gt; </span><br><span class=\"line\">        &lt;groupId&gt; io.dropwizard.metrics &lt;/ groupId&gt; </span><br><span class=\"line\">        &lt;artifactId&gt; metrics-core &lt;/ artifactId&gt; </span><br><span class=\"line\">        &lt;version&gt; $ &#123;metrics.version&#125; &lt;/ version&gt; </span><br><span class=\"line\">    &lt;/ dependency&gt; </span><br><span class=\"line\">&lt;/ dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Registry\"><a href=\"#The-Registry\" class=\"headerlink\" title=\"The Registry\"></a>The Registry</h2><p>Metrics的核心是MetricRegistry类，它是所有应用程序指标的容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n<h2 id=\"五种度量类型\"><a href=\"#五种度量类型\" class=\"headerlink\" title=\"五种度量类型\"></a>五种度量类型</h2><h3 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h3><p>最基本的度量指标，返回一个值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测量此量表时，将返回队列中的任务数量。</p>\n<p>在注册表中的每个指标都有一个唯一的名称，例如 “things.count”或”com.example.Thing.latency”。MetricRegistry有一个用于构造这些名字的静态辅助方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n<p>它将返回一个类似”com.example.QueueManager.jobs.size”的字符串。</p>\n<h3 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h3><p>Counters只是一个AtomicLong实例的衡量标准。您可以增加或减少其值。例如，我们可能需要一个更有效的方式来衡量队列中待处理的任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次测量这个计数器时，它都会返回队列中的任务数量。</p>\n<p>正如你所看到的，Counters的API略有不同：用 counter(String)而不是 register(String, Metric) 。</p>\n<h3 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h3><p>Histograms（直方图 ）统计 数据流中值的分布。除了最小值，最大值，平均值等之外，它还测量中值，第75,90,95,98,99和99.9百分位数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // etc</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个直方图将以字节为单位来测量响应的大小。</p>\n<h3 id=\"Meters\"><a href=\"#Meters\" class=\"headerlink\" title=\"Meters\"></a>Meters</h3><p>Meters测量一段时间内的事件发生率（例如“每秒请求数”）。除了平均速度之外，Meters还跟踪1，5和15分钟的均值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final MetricRegistry metrics = new MetricRegistry();</span><br><span class=\"line\">private final Meter requests = metrics.meter(&quot;requests&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    requests.mark();</span><br><span class=\"line\">    // etc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将测量每秒请求的请求率。</p>\n<h3 id=\"Timer\"><a href=\"#Timer\" class=\"headerlink\" title=\"Timer\"></a>Timer</h3><p>Timer测量一段代码被调用的速率和它的持续时间的分布。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time(); //相当于Meter.mark()</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // etc;</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该Timer 将测量处理每个请求所需的时间（以纳秒为单位），并提供每秒请求的请求速率。</p>\n<p>Timer 其实是 Histogram 和 Meter 的结合</p>\n<h2 id=\"Reporter\"><a href=\"#Reporter\" class=\"headerlink\" title=\"Reporter\"></a>Reporter</h2><p>报表，用于展示统计结果</p>\n<ol>\n<li><p>通过JMX报告Metric</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final JmxReporter reporter = JmxReporter.forRegistry(registry).build();</span><br><span class=\"line\">reporter.start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>STDOUT, using ConsoleReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)</span><br><span class=\"line\">                                                .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                .build();</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSV files, using CsvReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final CsvReporter reporter = CsvReporter.forRegistry(registry)</span><br><span class=\"line\">                                        .formatFor(Locale.US)</span><br><span class=\"line\">                                        .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                        .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                        .build(new File(&quot;~/projects/data/&quot;));</span><br><span class=\"line\">reporter.start(1, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SLF4J loggers, using Slf4jReporter from metrics-core</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)</span><br><span class=\"line\">                                            .outputTo(LoggerFactory.getLogger(&quot;com.example.metrics&quot;))</span><br><span class=\"line\">                                            .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                            .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                            .build();</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ganglia, using GangliaReporter from metrics-ganglia</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final GMetric ganglia = new GMetric(&quot;ganglia.example.com&quot;, 8649, UDPAddressingMode.MULTICAST, 1);</span><br><span class=\"line\">final GangliaReporter reporter = GangliaReporter.forRegistry(registry)</span><br><span class=\"line\">                                                .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                .build(ganglia);</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Graphite, using GraphiteReporter from metrics-graphite</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Graphite graphite = new Graphite(new InetSocketAddress(&quot;graphite.example.com&quot;, 2003));</span><br><span class=\"line\">final GraphiteReporter reporter = GraphiteReporter.forRegistry(registry)</span><br><span class=\"line\">                                                  .prefixedWith(&quot;web1.example.com&quot;)</span><br><span class=\"line\">                                                  .convertRatesTo(TimeUnit.SECONDS)</span><br><span class=\"line\">                                                  .convertDurationsTo(TimeUnit.MILLISECONDS)</span><br><span class=\"line\">                                                  .filter(MetricFilter.ALL)</span><br><span class=\"line\">                                                  .build(graphite);</span><br><span class=\"line\">reporter.start(1, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h2><p>度量标准还能够对服务的健康状况进行检查，需要引用metrics-healthchecks模块 。</p>\n<p>首先，创建一个新的HealthCheckRegistry实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br></pre></td></tr></table></figure>\n<p>其次，实现一个HealthCheck子类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用Metrics注册它的一个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n<p>运行所有注册的健康检查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Map&lt;String, HealthCheck.Result&gt; results = healthChecks.runHealthChecks();</span><br><span class=\"line\">for (Entry&lt;String, HealthCheck.Result&gt; entry : results.entrySet()) &#123;</span><br><span class=\"line\">    if (entry.getValue().isHealthy()) &#123;</span><br><span class=\"line\">        System.out.println(entry.getKey() + &quot; is healthy&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        System.err.println(entry.getKey() + &quot; is UNHEALTHY: &quot; + entry.getValue().getMessage());</span><br><span class=\"line\">        final Throwable e = entry.getValue().getError();</span><br><span class=\"line\">        if (e != null) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>度量标准带有预先构建的运行状况检查：ThreadDeadlockHealthCheck使用Java的内置线程死锁检测来确定是否有线程死锁。</p>\n"},{"title":"Java 7 HashMap 源码解读","date":"2018-08-18T02:31:46.000Z","_content":"\n见链接：https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q","source":"_posts/Java-7-HashMap-源码解读.md","raw":"---\ntitle: Java 7 HashMap 源码解读\ndate: 2018-08-18 10:31:46\ncategories:\n- Java\ntags:\n- 公众号文章\n- Java\n- HashMap\n---\n\n见链接：https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q","slug":"Java-7-HashMap-源码解读","published":1,"updated":"2018-09-22T02:33:29.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwti000mayqcujt5r3ph","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/nHk9jKapNVVkBDnKChgK0Q</a></p>\n"},{"title":"BitMap、BitSet与Bloom Filter","date":"2018-10-08T02:36:11.000Z","_content":"\n*推荐阅读时间：5分钟*\n\n\n### 引言\n\n先来看一个问题，假设现在有范围为 1-10 亿的 11 亿个 int 型整数，如何排除掉其中的重复数字？int 占 4 个字节，可以表示 -2,147,483,648 ~ +2,147,483,647 的数据。\n所以一般的思路是会将这 11 亿个数作为 int 型数据存到一个 HashSet 集合中进行去重。但是，这样会存在一个问题。我们知道 1GB=1024KB=1024 * 1024Byte,那么 10亿 * 4Byte 将占用接近 4GB 的内存，这将是极大的性能浪费，很可能会影响程序的健康运行。\n\n\n### 思路\n\n我们可以考虑用\"位映射（BitMap）\"来解决这个问题。试想一下，如果我们有一个位数组（bit\\[n]），那么我们可以用 bit\\[i] 来表示 0-n 中对应的数字，每个元素有 1 和 0 两个取值，分别代表该数字存在与否。这样一来，我们记录一个数字只需要一个 bit，相对于之前的 int 类型(32 bit)，整整缩小了 32 倍的存储大小(4GB/32=125MB)!\n\n扩展一下，当我们需要记录每个数字出现次数是否超过 2 次时，可以使用连续的两位来记录一个数字：一位用来记录是否出现，另一位用来记录是否超过 2 次。\n\n不过，Java 中无法创建 bit 数组，我们可以使用 int 或 long 数组来实现这个目的。建立一个 int 数组 int\\[n]，int\\[0] 记录了 0-31，int\\[1] 记录了 32-63 ...... 依此类推。\n\n\n### Java BitSet\n\nJava 中有一个 BitSet 类，从命名就可以看出它是用来存储去重的位元素集合，它还支持 and、or 等位运算。用来解决文章开头的问题非常合适，方式如下：\n\n``` java\npublic class BitSetStudy {\n    public static void main(String[] args) {\n\n        BitSet bitSet = new BitSet(1000000000);\n        //随机生成 11 亿个数字\n        for (int i = 0; i < 1100000000; i++) {\n            bitSet.set((int) (Math.random() * 1000000000));\n        }\n\n        System.out.println(bitSet.size());\n        System.out.println(\"end\");\n\n    }\n}\n```\n\n打开 jconsole,可以看到存储了 bitset 对象的老年代所占用的内存稳定在 125MB 左右。\n\n{% asset_img bitset-mem.png %}\n\n关于 BitSet 的 and、andNot、or、xor 操作：\n\n``` java\npublic static void main(String[] args) {\n    BitSet bitSet = new BitSet();\n    bitSet.set(2, 6);\n    BitSet bitSet1 = new BitSet();\n    bitSet1.set(4, 8);\n\n    BitSet bitSetAnd = (BitSet) bitSet.clone();\n    BitSet bitSetAndNot = (BitSet) bitSet.clone();\n    BitSet bitSetOr = (BitSet) bitSet.clone();\n    BitSet bitSetXor = (BitSet) bitSet.clone();\n\n    bitSetAnd.and(bitSet1);\n    bitSetAndNot.andNot(bitSet1);\n    bitSetOr.or(bitSet1);\n    bitSetXor.xor(bitSet1);\n\n    System.out.println(\"bitSet is : \" + bitSet + \" , and bitSet1 is: \" + bitSet1);\n    System.out.println(\"run bitSet.XMethod(bitSet1) , result is : \");\n    System.out.println(\"and:\" + bitSetAnd);\n    System.out.println(\"andNot:\" + bitSetAndNot);\n    System.out.println(\"or:\" + bitSetOr);\n    System.out.println(\"xor:\" + bitSetXor);\n\n}\n```\n\n结果如下：\n``` java\nbitSet is : {2, 3, 4, 5} , and bitSet1 is: {4, 5, 6, 7}\nrun bitSet.XMethod(bitSet1) , result is :\nand:{4, 5}\nandNot:{2, 3}\nor:{2, 3, 4, 5, 6, 7}\nxor:{2, 3, 6, 7}\n```\n\n\n### 自己实现 BitMap\n\nJava 的 BitSet 使用起来存在局限性，我们可以参考 BitSet 实现自己的 BitMap 来扩展应用场景。核心还是通过 int/long 数组元素的位来记录有序数据，一个实现如下：\n\n``` java\npublic class BitMap {\n    private int[] words;\n\n    private int size;\n\n\n    public BitMap(int n) {\n        size = n;\n        //每个int占32位，数组大小为 n/32+1\n        words = new int[(size >> 5) + 1];\n    }\n\n    public final void set(int bit) {\n        //获得数据所在的数组序号（int），相当于 bit/32\n        int i = bit >> 5;\n        //获得该int元素中要修改为1的数字,相当于 bit%32\n        int j = bit & 31;\n        //获得要修改的位\n        int k = 1 << j;\n        //将该元素相应的二进制位设为1\n        words[i] |= k ;\n    }\n\n    public final boolean get(int bit) {\n        //参考set方法理解\n        return (words[bit >> 5] & (1 << (bit & 31))) != 0;\n    }\n}\n\n```\n\n实现了核心的存储结构、set 和 get 方法。\n\n### 布隆过滤器(Bloom Filter)\n\n了解完 BitMap,我们掌握了一种处理大量连续数据的好方法。现在继续扩展一下，现在如果我们要记录的是海量的分布很不均匀的数据，如果继续用 BitMap 的方式，将会浪费大量的存储空间，或者数据量已经大到使用 BitMap 的方式，仍然会浪费大量的内存空间。面对这两种情情况时，我们可以考虑使用布隆过滤器。\n\n布隆过滤器核心是对一个 key 使用多个 hash 函数求出多个值，将这些值散列在一个有限的数组中，这样，当这些 hash 函数求出的值都符合预期就认为该 key 存在；若只要存在 hash 函数的值不符合，就可以确定它不存在。在某些场景下，这种方法效果非常好。图示如下：\n\n{% asset_img bloom_filter.jpeg %}\n\n\n可以看出来，这种方法存在一定误差，不过误差几率可以通过增加 hash 函数和散列数组大小来减小。还有一个问题就是，当某个 key 被删除后，不能直接在散列表中将对应的 value 去掉，因为可能会影响其他 key。针对这个问题，我们可以维护一个黑名单，每次计算 hash 前，先判断 key 是否在黑名单中，有则表示该 key 已删掉。\n\n\n\n\n{% asset_img IMG_1753.GIF  10栋*7层*2（至少2）套=140套 呵呵😅  %}\n\n","source":"_posts/BitMap、BitSet与Bloom Filter.md","raw":"---\ntitle: BitMap、BitSet与Bloom Filter\ndate: 2018-10-08 10:36:11\ncategories:\n- Java\ntags:\n- Java\n- BitMap\n- BitSet\n- 布隆过滤器\n- Bloom Filter\n---\n\n*推荐阅读时间：5分钟*\n\n\n### 引言\n\n先来看一个问题，假设现在有范围为 1-10 亿的 11 亿个 int 型整数，如何排除掉其中的重复数字？int 占 4 个字节，可以表示 -2,147,483,648 ~ +2,147,483,647 的数据。\n所以一般的思路是会将这 11 亿个数作为 int 型数据存到一个 HashSet 集合中进行去重。但是，这样会存在一个问题。我们知道 1GB=1024KB=1024 * 1024Byte,那么 10亿 * 4Byte 将占用接近 4GB 的内存，这将是极大的性能浪费，很可能会影响程序的健康运行。\n\n\n### 思路\n\n我们可以考虑用\"位映射（BitMap）\"来解决这个问题。试想一下，如果我们有一个位数组（bit\\[n]），那么我们可以用 bit\\[i] 来表示 0-n 中对应的数字，每个元素有 1 和 0 两个取值，分别代表该数字存在与否。这样一来，我们记录一个数字只需要一个 bit，相对于之前的 int 类型(32 bit)，整整缩小了 32 倍的存储大小(4GB/32=125MB)!\n\n扩展一下，当我们需要记录每个数字出现次数是否超过 2 次时，可以使用连续的两位来记录一个数字：一位用来记录是否出现，另一位用来记录是否超过 2 次。\n\n不过，Java 中无法创建 bit 数组，我们可以使用 int 或 long 数组来实现这个目的。建立一个 int 数组 int\\[n]，int\\[0] 记录了 0-31，int\\[1] 记录了 32-63 ...... 依此类推。\n\n\n### Java BitSet\n\nJava 中有一个 BitSet 类，从命名就可以看出它是用来存储去重的位元素集合，它还支持 and、or 等位运算。用来解决文章开头的问题非常合适，方式如下：\n\n``` java\npublic class BitSetStudy {\n    public static void main(String[] args) {\n\n        BitSet bitSet = new BitSet(1000000000);\n        //随机生成 11 亿个数字\n        for (int i = 0; i < 1100000000; i++) {\n            bitSet.set((int) (Math.random() * 1000000000));\n        }\n\n        System.out.println(bitSet.size());\n        System.out.println(\"end\");\n\n    }\n}\n```\n\n打开 jconsole,可以看到存储了 bitset 对象的老年代所占用的内存稳定在 125MB 左右。\n\n{% asset_img bitset-mem.png %}\n\n关于 BitSet 的 and、andNot、or、xor 操作：\n\n``` java\npublic static void main(String[] args) {\n    BitSet bitSet = new BitSet();\n    bitSet.set(2, 6);\n    BitSet bitSet1 = new BitSet();\n    bitSet1.set(4, 8);\n\n    BitSet bitSetAnd = (BitSet) bitSet.clone();\n    BitSet bitSetAndNot = (BitSet) bitSet.clone();\n    BitSet bitSetOr = (BitSet) bitSet.clone();\n    BitSet bitSetXor = (BitSet) bitSet.clone();\n\n    bitSetAnd.and(bitSet1);\n    bitSetAndNot.andNot(bitSet1);\n    bitSetOr.or(bitSet1);\n    bitSetXor.xor(bitSet1);\n\n    System.out.println(\"bitSet is : \" + bitSet + \" , and bitSet1 is: \" + bitSet1);\n    System.out.println(\"run bitSet.XMethod(bitSet1) , result is : \");\n    System.out.println(\"and:\" + bitSetAnd);\n    System.out.println(\"andNot:\" + bitSetAndNot);\n    System.out.println(\"or:\" + bitSetOr);\n    System.out.println(\"xor:\" + bitSetXor);\n\n}\n```\n\n结果如下：\n``` java\nbitSet is : {2, 3, 4, 5} , and bitSet1 is: {4, 5, 6, 7}\nrun bitSet.XMethod(bitSet1) , result is :\nand:{4, 5}\nandNot:{2, 3}\nor:{2, 3, 4, 5, 6, 7}\nxor:{2, 3, 6, 7}\n```\n\n\n### 自己实现 BitMap\n\nJava 的 BitSet 使用起来存在局限性，我们可以参考 BitSet 实现自己的 BitMap 来扩展应用场景。核心还是通过 int/long 数组元素的位来记录有序数据，一个实现如下：\n\n``` java\npublic class BitMap {\n    private int[] words;\n\n    private int size;\n\n\n    public BitMap(int n) {\n        size = n;\n        //每个int占32位，数组大小为 n/32+1\n        words = new int[(size >> 5) + 1];\n    }\n\n    public final void set(int bit) {\n        //获得数据所在的数组序号（int），相当于 bit/32\n        int i = bit >> 5;\n        //获得该int元素中要修改为1的数字,相当于 bit%32\n        int j = bit & 31;\n        //获得要修改的位\n        int k = 1 << j;\n        //将该元素相应的二进制位设为1\n        words[i] |= k ;\n    }\n\n    public final boolean get(int bit) {\n        //参考set方法理解\n        return (words[bit >> 5] & (1 << (bit & 31))) != 0;\n    }\n}\n\n```\n\n实现了核心的存储结构、set 和 get 方法。\n\n### 布隆过滤器(Bloom Filter)\n\n了解完 BitMap,我们掌握了一种处理大量连续数据的好方法。现在继续扩展一下，现在如果我们要记录的是海量的分布很不均匀的数据，如果继续用 BitMap 的方式，将会浪费大量的存储空间，或者数据量已经大到使用 BitMap 的方式，仍然会浪费大量的内存空间。面对这两种情情况时，我们可以考虑使用布隆过滤器。\n\n布隆过滤器核心是对一个 key 使用多个 hash 函数求出多个值，将这些值散列在一个有限的数组中，这样，当这些 hash 函数求出的值都符合预期就认为该 key 存在；若只要存在 hash 函数的值不符合，就可以确定它不存在。在某些场景下，这种方法效果非常好。图示如下：\n\n{% asset_img bloom_filter.jpeg %}\n\n\n可以看出来，这种方法存在一定误差，不过误差几率可以通过增加 hash 函数和散列数组大小来减小。还有一个问题就是，当某个 key 被删除后，不能直接在散列表中将对应的 value 去掉，因为可能会影响其他 key。针对这个问题，我们可以维护一个黑名单，每次计算 hash 前，先判断 key 是否在黑名单中，有则表示该 key 已删掉。\n\n\n\n\n{% asset_img IMG_1753.GIF  10栋*7层*2（至少2）套=140套 呵呵😅  %}\n\n","slug":"BitMap、BitSet与Bloom Filter","published":1,"updated":"2018-10-30T09:03:13.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtl000payqcvk1scw25","content":"<p><em>推荐阅读时间：5分钟</em></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>先来看一个问题，假设现在有范围为 1-10 亿的 11 亿个 int 型整数，如何排除掉其中的重复数字？int 占 4 个字节，可以表示 -2,147,483,648 ~ +2,147,483,647 的数据。<br>所以一般的思路是会将这 11 亿个数作为 int 型数据存到一个 HashSet 集合中进行去重。但是，这样会存在一个问题。我们知道 1GB=1024KB=1024 <em> 1024Byte,那么 10亿 </em> 4Byte 将占用接近 4GB 的内存，这将是极大的性能浪费，很可能会影响程序的健康运行。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我们可以考虑用”位映射（BitMap）”来解决这个问题。试想一下，如果我们有一个位数组（bit[n]），那么我们可以用 bit[i] 来表示 0-n 中对应的数字，每个元素有 1 和 0 两个取值，分别代表该数字存在与否。这样一来，我们记录一个数字只需要一个 bit，相对于之前的 int 类型(32 bit)，整整缩小了 32 倍的存储大小(4GB/32=125MB)!</p>\n<p>扩展一下，当我们需要记录每个数字出现次数是否超过 2 次时，可以使用连续的两位来记录一个数字：一位用来记录是否出现，另一位用来记录是否超过 2 次。</p>\n<p>不过，Java 中无法创建 bit 数组，我们可以使用 int 或 long 数组来实现这个目的。建立一个 int 数组 int[n]，int[0] 记录了 0-31，int[1] 记录了 32-63 …… 依此类推。</p>\n<h3 id=\"Java-BitSet\"><a href=\"#Java-BitSet\" class=\"headerlink\" title=\"Java BitSet\"></a>Java BitSet</h3><p>Java 中有一个 BitSet 类，从命名就可以看出它是用来存储去重的位元素集合，它还支持 and、or 等位运算。用来解决文章开头的问题非常合适，方式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitSetStudy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        BitSet bitSet = <span class=\"keyword\">new</span> BitSet(<span class=\"number\">1000000000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//随机生成 11 亿个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1100000000</span>; i++) &#123;</span><br><span class=\"line\">            bitSet.set((<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000000000</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(bitSet.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打开 jconsole,可以看到存储了 bitset 对象的老年代所占用的内存稳定在 125MB 左右。</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/bitset-mem.png\">\n<p>关于 BitSet 的 and、andNot、or、xor 操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    BitSet bitSet = <span class=\"keyword\">new</span> BitSet();</span><br><span class=\"line\">    bitSet.set(<span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    BitSet bitSet1 = <span class=\"keyword\">new</span> BitSet();</span><br><span class=\"line\">    bitSet1.set(<span class=\"number\">4</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    BitSet bitSetAnd = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetAndNot = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetOr = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetXor = (BitSet) bitSet.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">    bitSetAnd.and(bitSet1);</span><br><span class=\"line\">    bitSetAndNot.andNot(bitSet1);</span><br><span class=\"line\">    bitSetOr.or(bitSet1);</span><br><span class=\"line\">    bitSetXor.xor(bitSet1);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"bitSet is : \"</span> + bitSet + <span class=\"string\">\" , and bitSet1 is: \"</span> + bitSet1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"run bitSet.XMethod(bitSet1) , result is : \"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"and:\"</span> + bitSetAnd);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"andNot:\"</span> + bitSetAndNot);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"or:\"</span> + bitSetOr);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"xor:\"</span> + bitSetXor);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitSet is : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125; , and bitSet1 is: &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">run bitSet.XMethod(bitSet1) , result is :</span><br><span class=\"line\">and:&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">andNot:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">or:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">xor:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自己实现-BitMap\"><a href=\"#自己实现-BitMap\" class=\"headerlink\" title=\"自己实现 BitMap\"></a>自己实现 BitMap</h3><p>Java 的 BitSet 使用起来存在局限性，我们可以参考 BitSet 实现自己的 BitMap 来扩展应用场景。核心还是通过 int/long 数组元素的位来记录有序数据，一个实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitMap</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] words;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitMap</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        size = n;</span><br><span class=\"line\">        <span class=\"comment\">//每个int占32位，数组大小为 n/32+1</span></span><br><span class=\"line\">        words = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(size &gt;&gt; <span class=\"number\">5</span>) + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数据所在的数组序号（int），相当于 bit/32</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = bit &gt;&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获得该int元素中要修改为1的数字,相当于 bit%32</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = bit &amp; <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获得要修改的位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; j;</span><br><span class=\"line\">        <span class=\"comment\">//将该元素相应的二进制位设为1</span></span><br><span class=\"line\">        words[i] |= k ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//参考set方法理解</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (words[bit &gt;&gt; <span class=\"number\">5</span>] &amp; (<span class=\"number\">1</span> &lt;&lt; (bit &amp; <span class=\"number\">31</span>))) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现了核心的存储结构、set 和 get 方法。</p>\n<h3 id=\"布隆过滤器-Bloom-Filter\"><a href=\"#布隆过滤器-Bloom-Filter\" class=\"headerlink\" title=\"布隆过滤器(Bloom Filter)\"></a>布隆过滤器(Bloom Filter)</h3><p>了解完 BitMap,我们掌握了一种处理大量连续数据的好方法。现在继续扩展一下，现在如果我们要记录的是海量的分布很不均匀的数据，如果继续用 BitMap 的方式，将会浪费大量的存储空间，或者数据量已经大到使用 BitMap 的方式，仍然会浪费大量的内存空间。面对这两种情情况时，我们可以考虑使用布隆过滤器。</p>\n<p>布隆过滤器核心是对一个 key 使用多个 hash 函数求出多个值，将这些值散列在一个有限的数组中，这样，当这些 hash 函数求出的值都符合预期就认为该 key 存在；若只要存在 hash 函数的值不符合，就可以确定它不存在。在某些场景下，这种方法效果非常好。图示如下：</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/bloom_filter.jpeg\">\n<p>可以看出来，这种方法存在一定误差，不过误差几率可以通过增加 hash 函数和散列数组大小来减小。还有一个问题就是，当某个 key 被删除后，不能直接在散列表中将对应的 value 去掉，因为可能会影响其他 key。针对这个问题，我们可以维护一个黑名单，每次计算 hash 前，先判断 key 是否在黑名单中，有则表示该 key 已删掉。</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/IMG_1753.GIF\" title=\"10栋*7层*2（至少2）套=140套 呵呵😅\">\n","site":{"data":{}},"excerpt":"","more":"<p><em>推荐阅读时间：5分钟</em></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>先来看一个问题，假设现在有范围为 1-10 亿的 11 亿个 int 型整数，如何排除掉其中的重复数字？int 占 4 个字节，可以表示 -2,147,483,648 ~ +2,147,483,647 的数据。<br>所以一般的思路是会将这 11 亿个数作为 int 型数据存到一个 HashSet 集合中进行去重。但是，这样会存在一个问题。我们知道 1GB=1024KB=1024 <em> 1024Byte,那么 10亿 </em> 4Byte 将占用接近 4GB 的内存，这将是极大的性能浪费，很可能会影响程序的健康运行。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我们可以考虑用”位映射（BitMap）”来解决这个问题。试想一下，如果我们有一个位数组（bit[n]），那么我们可以用 bit[i] 来表示 0-n 中对应的数字，每个元素有 1 和 0 两个取值，分别代表该数字存在与否。这样一来，我们记录一个数字只需要一个 bit，相对于之前的 int 类型(32 bit)，整整缩小了 32 倍的存储大小(4GB/32=125MB)!</p>\n<p>扩展一下，当我们需要记录每个数字出现次数是否超过 2 次时，可以使用连续的两位来记录一个数字：一位用来记录是否出现，另一位用来记录是否超过 2 次。</p>\n<p>不过，Java 中无法创建 bit 数组，我们可以使用 int 或 long 数组来实现这个目的。建立一个 int 数组 int[n]，int[0] 记录了 0-31，int[1] 记录了 32-63 …… 依此类推。</p>\n<h3 id=\"Java-BitSet\"><a href=\"#Java-BitSet\" class=\"headerlink\" title=\"Java BitSet\"></a>Java BitSet</h3><p>Java 中有一个 BitSet 类，从命名就可以看出它是用来存储去重的位元素集合，它还支持 and、or 等位运算。用来解决文章开头的问题非常合适，方式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitSetStudy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        BitSet bitSet = <span class=\"keyword\">new</span> BitSet(<span class=\"number\">1000000000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//随机生成 11 亿个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1100000000</span>; i++) &#123;</span><br><span class=\"line\">            bitSet.set((<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000000000</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(bitSet.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打开 jconsole,可以看到存储了 bitset 对象的老年代所占用的内存稳定在 125MB 左右。</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/bitset-mem.png\">\n<p>关于 BitSet 的 and、andNot、or、xor 操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    BitSet bitSet = <span class=\"keyword\">new</span> BitSet();</span><br><span class=\"line\">    bitSet.set(<span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    BitSet bitSet1 = <span class=\"keyword\">new</span> BitSet();</span><br><span class=\"line\">    bitSet1.set(<span class=\"number\">4</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    BitSet bitSetAnd = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetAndNot = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetOr = (BitSet) bitSet.clone();</span><br><span class=\"line\">    BitSet bitSetXor = (BitSet) bitSet.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">    bitSetAnd.and(bitSet1);</span><br><span class=\"line\">    bitSetAndNot.andNot(bitSet1);</span><br><span class=\"line\">    bitSetOr.or(bitSet1);</span><br><span class=\"line\">    bitSetXor.xor(bitSet1);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"bitSet is : \"</span> + bitSet + <span class=\"string\">\" , and bitSet1 is: \"</span> + bitSet1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"run bitSet.XMethod(bitSet1) , result is : \"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"and:\"</span> + bitSetAnd);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"andNot:\"</span> + bitSetAndNot);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"or:\"</span> + bitSetOr);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"xor:\"</span> + bitSetXor);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitSet is : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125; , and bitSet1 is: &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">run bitSet.XMethod(bitSet1) , result is :</span><br><span class=\"line\">and:&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">andNot:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">or:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">xor:&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自己实现-BitMap\"><a href=\"#自己实现-BitMap\" class=\"headerlink\" title=\"自己实现 BitMap\"></a>自己实现 BitMap</h3><p>Java 的 BitSet 使用起来存在局限性，我们可以参考 BitSet 实现自己的 BitMap 来扩展应用场景。核心还是通过 int/long 数组元素的位来记录有序数据，一个实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitMap</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] words;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitMap</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        size = n;</span><br><span class=\"line\">        <span class=\"comment\">//每个int占32位，数组大小为 n/32+1</span></span><br><span class=\"line\">        words = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(size &gt;&gt; <span class=\"number\">5</span>) + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数据所在的数组序号（int），相当于 bit/32</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = bit &gt;&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获得该int元素中要修改为1的数字,相当于 bit%32</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = bit &amp; <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获得要修改的位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; j;</span><br><span class=\"line\">        <span class=\"comment\">//将该元素相应的二进制位设为1</span></span><br><span class=\"line\">        words[i] |= k ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//参考set方法理解</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (words[bit &gt;&gt; <span class=\"number\">5</span>] &amp; (<span class=\"number\">1</span> &lt;&lt; (bit &amp; <span class=\"number\">31</span>))) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现了核心的存储结构、set 和 get 方法。</p>\n<h3 id=\"布隆过滤器-Bloom-Filter\"><a href=\"#布隆过滤器-Bloom-Filter\" class=\"headerlink\" title=\"布隆过滤器(Bloom Filter)\"></a>布隆过滤器(Bloom Filter)</h3><p>了解完 BitMap,我们掌握了一种处理大量连续数据的好方法。现在继续扩展一下，现在如果我们要记录的是海量的分布很不均匀的数据，如果继续用 BitMap 的方式，将会浪费大量的存储空间，或者数据量已经大到使用 BitMap 的方式，仍然会浪费大量的内存空间。面对这两种情情况时，我们可以考虑使用布隆过滤器。</p>\n<p>布隆过滤器核心是对一个 key 使用多个 hash 函数求出多个值，将这些值散列在一个有限的数组中，这样，当这些 hash 函数求出的值都符合预期就认为该 key 存在；若只要存在 hash 函数的值不符合，就可以确定它不存在。在某些场景下，这种方法效果非常好。图示如下：</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/bloom_filter.jpeg\">\n<p>可以看出来，这种方法存在一定误差，不过误差几率可以通过增加 hash 函数和散列数组大小来减小。还有一个问题就是，当某个 key 被删除后，不能直接在散列表中将对应的 value 去掉，因为可能会影响其他 key。针对这个问题，我们可以维护一个黑名单，每次计算 hash 前，先判断 key 是否在黑名单中，有则表示该 key 已删掉。</p>\n<img src=\"/2018/10/08/BitMap、BitSet与Bloom%20Filter/IMG_1753.GIF\" title=\"10栋*7层*2（至少2）套=140套 呵呵😅\">\n"},{"title":"Java 8 HashMap(上)—— 红黑树","date":"2018-09-23T16:19:04.000Z","_content":"\n\n\n*推荐阅读时间：10分钟*\n\n\n### 简介\n\n>Java8的最大特性是使用红黑树结构来存储每个（桶）bucket中的数据（当链表长度超过8时）。  \n为什么引入红黑树呢？其实正常情况下，平均每个桶中应该只会有不到1个数据，但当发生大量Hash碰撞时，每个桶中的数据也将会大量增加，这将会影响到数据的查询速度。在Java7中，每个桶使用链表存储数据，查找数据采用遍历的方式，查询时间复杂度为O(n)。Java7中为了避免大量Hash碰撞的问题，引入了hashseed方式，增强了Hash函数的散列性。但是randomHashSeed方法调用的next方法在多线程运算时存在性能问题（待考证），故在Java8中被弃用。Java8中换了一个思路：使用红黑树来提高查找速度（O(logN)），即使发生大量hash碰撞也不会造成性能影响，这便是红黑树由来的原因。  \nJava7的HashMap一共有接近1200行代码，而到了Java8直接增加到了2400行，减去全局变量前新加的100行注释，相差1100行。其中TreeNode(红黑树)实现部分有600行代码，再加上其他方法对红黑树的适应性改动，可见红黑树部分是Java8 HashMap的主要改动。  \n\n\n\n### 详情\n#### 继承关系如下：\n\n{% asset_img 20180923214733.png %}\n\n\nTreeNode继承了LinkedHashMap.Entry，LinkedHashMap.Entry继承了HashMap.Node，而Node其实就是上个版本的Entry（链表）结构。此处有个疑惑：TreeNode并没有使用LinkedHashMap.Entry的before和after字段，不知道为啥不直接继承Node类。\n\n\n\n#### 字段和构造函数如下：\n``` java\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    //常见的树结构\n    HashMap.TreeNode<K, V> parent;\n    HashMap.TreeNode<K, V> left;\n    HashMap.TreeNode<K, V> right;\n    HashMap.TreeNode<K, V> prev;\n    boolean red;\n\n    TreeNode(int hash, K key, V val, HashMap.Node<K, V> next) {\n        super(hash, key, val, next);\n    }\n}\n\n```\n\n#### 红黑树全部方法如下：\n\n``` java\n/**\n * 获取根结点\n */ \nfinal HashMap.TreeNode<K,V> root() {\n     for (HashMap.TreeNode<K,V> r = this, p;;) {\n        if ((p = r.parent) == null)\n            return r;\n        r = p;\n    }\n}\n\n/**\n * 选取根结点\n * 红黑树进行左旋、右旋后，根结点可能移动，头结点需要重新指向新的根结点\n */\nstatic <K,V> void moveRootToFront(HashMap.Node<K,V>[] tab, HashMap.TreeNode<K,V> root) {\n    int n;\n    if (root != null && tab != null && (n = tab.length) > 0) {\n        int index = (n - 1) & root.hash;\n        HashMap.TreeNode<K,V> first = (HashMap.TreeNode<K,V>)tab[index];\n        //如果根结点不是桶的第一个节点，则将根结点移动到头结点位置\n        if (root != first) {\n            HashMap.Node<K,V> rn;\n            tab[index] = root;\n            HashMap.TreeNode<K,V> rp = root.prev;\n            if ((rn = root.next) != null)\n                ((HashMap.TreeNode<K,V>)rn).prev = rp;\n            if (rp != null)\n                rp.next = rn;\n            if (first != null)\n                first.prev = root;\n            root.next = first;\n            root.prev = null;\n        }\n        //断言红黑树结构是否正常，不正常则报异常停止\n        assert checkInvariants(root);\n    }\n}\n\n/**\n * 根据结点hash值、key和key的类型 进行红黑树查找\n *\n */\nfinal HashMap.TreeNode<K,V> find(int h, Object k, Class<?> kc) {\n    HashMap.TreeNode<K,V> p = this;\n    do {\n        int ph, dir; K pk;\n        HashMap.TreeNode<K,V> pl = p.left, pr = p.right, q;\n        //待查询结点的key的hash值若小于当前结点则进入左子树，否则进入右子树\n        if ((ph = p.hash) > h)\n            p = pl;\n        else if (ph < h)\n            p = pr;\n        //如果hash值相等再比较key，一致则表示找到，返回结果\n        else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n            return p;\n        else if (pl == null)\n            p = pr;\n        else if (pr == null)\n            p = pl;\n        //如果key不同，则看key的类型是否可比较，\n        //如果可以比较则根据比较结果选择是否返回查询结果，还是继续查询左、右子树\n        else if ((kc != null ||\n                (kc = comparableClassFor(k)) != null) &&\n                (dir = compareComparables(kc, k, pk)) != 0)\n            p = (dir < 0) ? pl : pr;\n        else if ((q = pr.find(h, k, kc)) != null)\n            return q;\n        else\n            p = pl;\n    } while (p != null);\n    return null;\n}\n\n/**\n * 根据结点hash值、key 进行红黑树查找\n */\nfinal HashMap.TreeNode<K,V> getTreeNode(int h, Object k) {\n    return ((parent != null) ? root() : this).find(h, k, null);\n}\n\n/**\n * 强制比较两个结点的key\n *\n * 当两个类型不能直接比较时，通过对类名进行hash进行比较；若hash值也相等，判定b大。\n * 故一定会排出先后顺序。\n */\nstatic int tieBreakOrder(Object a, Object b) {\n    int d;\n    if (a == null || b == null ||\n            (d = a.getClass().getName().\n                    compareTo(b.getClass().getName())) == 0)\n        d = (System.identityHashCode(a) <= System.identityHashCode(b) ?\n                -1 : 1);\n    return d;\n}\n\n/**\n * 将链表转化为红黑树\n * 重要方法！当链表长度增加到红黑树转换阈值（默认8），且桶的数量不小于64 时触发\n */\nfinal void treeify(HashMap.Node<K,V>[] tab) {\n    HashMap.TreeNode<K,V> root = null;\n    //遍历链表\n    for (HashMap.TreeNode<K,V> x = this, next; x != null; x = next) {\n        next = (HashMap.TreeNode<K,V>)x.next;\n        x.left = x.right = null;\n        //首结点作为根结点\n        if (root == null) {\n            x.parent = null;\n            x.red = false;\n            root = x;\n        }\n        else {\n            K k = x.key;\n            int h = x.hash;\n            Class<?> kc = null;\n            for (HashMap.TreeNode<K,V> p = root;;) {\n                int dir, ph;\n                K pk = p.key;\n                if ((ph = p.hash) > h)\n                    dir = -1;\n                else if (ph < h)\n                    dir = 1;\n                else if ((kc == null &&\n                        (kc = comparableClassFor(k)) == null) ||\n                        (dir = compareComparables(kc, k, pk)) == 0)\n                    //如果未能比较，调用强制比较方法，确保有序\n                    dir = tieBreakOrder(k, pk);\n\n                HashMap.TreeNode<K,V> xp = p;\n                //当左或右子树为空时，插入链表上的一个结点\n                if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                    x.parent = xp;\n                    if (dir <= 0)\n                        xp.left = x;\n                    else\n                        xp.right = x;\n                    //插入结点后，进行左旋、右旋重平衡，转换为红黑树\n                    root = balanceInsertion(root, x);\n                    break;\n                }\n            }\n        }\n    }\n    //确保根结点是首结点\n    moveRootToFront(tab, root);\n}\n\n/**\n * 红黑树转换为链表\n * 当红黑树结点减少到链表还原阈值（默认6）时触发\n */\nfinal HashMap.Node<K,V> untreeify(HashMap<K,V> map) {\n    HashMap.Node<K,V> hd = null, tl = null;\n    for (HashMap.Node<K,V> q = this; q != null; q = q.next) {\n        HashMap.Node<K,V> p = map.replacementNode(q, null);\n        if (tl == null)\n            hd = p;\n        else\n            tl.next = p;\n        tl = p;\n    }\n    return hd;\n}\n\n/**\n * 红黑树插入新结点\n */\nfinal HashMap.TreeNode<K,V> putTreeVal(HashMap<K,V> map, HashMap.Node<K,V>[] tab,\n                                       int h, K k, V v) {\n    Class<?> kc = null;\n    boolean searched = false;\n    HashMap.TreeNode<K,V> root = (parent != null) ? root() : this;\n    for (HashMap.TreeNode<K,V> p = root;;) {\n        int dir, ph; K pk;\n        if ((ph = p.hash) > h)\n            dir = -1;\n        else if (ph < h)\n            dir = 1;\n        else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n            return p;\n        else if ((kc == null &&\n                (kc = comparableClassFor(k)) == null) ||\n                (dir = compareComparables(kc, k, pk)) == 0) {\n            if (!searched) {\n                HashMap.TreeNode<K,V> q, ch;\n                searched = true;\n                //插入结点与当前结点hash值相等时，查找左子树或右子树，若已包含待插入结点则直接返回结果\n                if (((ch = p.left) != null &&\n                        (q = ch.find(h, k, kc)) != null) ||\n                        ((ch = p.right) != null &&\n                                (q = ch.find(h, k, kc)) != null))\n                    return q;\n            }\n            dir = tieBreakOrder(k, pk);\n        }\n\n        HashMap.TreeNode<K,V> xp = p;\n        //若已比较到左子树或右子树为空时还没有找到，则插入该结点\n        if ((p = (dir <= 0) ? p.left : p.right) == null) {\n            HashMap.Node<K,V> xpn = xp.next;\n            HashMap.TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);\n            if (dir <= 0)\n                xp.left = x;\n            else\n                xp.right = x;\n            xp.next = x;\n            x.parent = x.prev = xp;\n            if (xpn != null)\n                ((HashMap.TreeNode<K,V>)xpn).prev = x;\n            moveRootToFront(tab, balanceInsertion(root, x));\n            return null;\n        }\n    }\n}\n\n/**\n * 删除红黑树结点\n * 呃，这个方法和前面的比起来大同小异，不细看了\n */\nfinal void removeTreeNode(HashMap<K,V> map, HashMap.Node<K,V>[] tab,\n                          boolean movable) {\n    int n;\n    if (tab == null || (n = tab.length) == 0)\n        return;\n    int index = (n - 1) & hash;\n    HashMap.TreeNode<K,V> first = (HashMap.TreeNode<K,V>)tab[index], root = first, rl;\n    HashMap.TreeNode<K,V> succ = (HashMap.TreeNode<K,V>)next, pred = prev;\n    if (pred == null)\n        tab[index] = first = succ;\n    else\n        pred.next = succ;\n    if (succ != null)\n        succ.prev = pred;\n    if (first == null)\n        return;\n    if (root.parent != null)\n        root = root.root();\n    if (root == null || root.right == null ||\n            (rl = root.left) == null || rl.left == null) {\n        //若删除结点后，达到链表还原阈值，则还原为链表\n        tab[index] = first.untreeify(map);\n        return;\n    }\n    HashMap.TreeNode<K,V> p = this, pl = left, pr = right, replacement;\n    if (pl != null && pr != null) {\n        HashMap.TreeNode<K,V> s = pr, sl;\n        while ((sl = s.left) != null) // find successor\n            s = sl;\n        boolean c = s.red; s.red = p.red; p.red = c; // swap colors\n        HashMap.TreeNode<K,V> sr = s.right;\n        HashMap.TreeNode<K,V> pp = p.parent;\n        if (s == pr) { // p was s's direct parent\n            p.parent = s;\n            s.right = p;\n        }\n        else {\n            HashMap.TreeNode<K,V> sp = s.parent;\n            if ((p.parent = sp) != null) {\n                if (s == sp.left)\n                    sp.left = p;\n                else\n                    sp.right = p;\n            }\n            if ((s.right = pr) != null)\n                pr.parent = s;\n        }\n        p.left = null;\n        if ((p.right = sr) != null)\n            sr.parent = p;\n        if ((s.left = pl) != null)\n            pl.parent = s;\n        if ((s.parent = pp) == null)\n            root = s;\n        else if (p == pp.left)\n            pp.left = s;\n        else\n            pp.right = s;\n        if (sr != null)\n            replacement = sr;\n        else\n            replacement = p;\n    }\n    else if (pl != null)\n        replacement = pl;\n    else if (pr != null)\n        replacement = pr;\n    else\n        replacement = p;\n    if (replacement != p) {\n        HashMap.TreeNode<K,V> pp = replacement.parent = p.parent;\n        if (pp == null)\n            root = replacement;\n        else if (p == pp.left)\n            pp.left = replacement;\n        else\n            pp.right = replacement;\n        p.left = p.right = p.parent = null;\n    }\n\n    HashMap.TreeNode<K,V> r = p.red ? root : balanceDeletion(root, replacement);\n\n    if (replacement == p) {  // detach\n        HashMap.TreeNode<K,V> pp = p.parent;\n        p.parent = null;\n        if (pp != null) {\n            if (p == pp.left)\n                pp.left = null;\n            else if (p == pp.right)\n                pp.right = null;\n        }\n    }\n    if (movable)\n        moveRootToFront(tab, r);\n}\n\n/**\n * 将红黑树分为两半\n * 扩容时，会将一个桶中的红黑树拆分为两个；若拆分后红黑树不够大，会被还原为链表。\n */\nfinal void split(HashMap<K,V> map, HashMap.Node<K,V>[] tab, int index, int bit) {\n    HashMap.TreeNode<K,V> b = this;\n    // Relink into lo and hi lists, preserving order\n    HashMap.TreeNode<K,V> loHead = null, loTail = null;\n    HashMap.TreeNode<K,V> hiHead = null, hiTail = null;\n    int lc = 0, hc = 0;\n    for (HashMap.TreeNode<K,V> e = b, next; e != null; e = next) {\n        next = (HashMap.TreeNode<K,V>)e.next;\n        e.next = null;\n        if ((e.hash & bit) == 0) {\n            if ((e.prev = loTail) == null)\n                loHead = e;\n            else\n                loTail.next = e;\n            loTail = e;\n            ++lc;\n        }\n        else {\n            if ((e.prev = hiTail) == null)\n                hiHead = e;\n            else\n                hiTail.next = e;\n            hiTail = e;\n            ++hc;\n        }\n    }\n\n    if (loHead != null) {\n        if (lc <= UNTREEIFY_THRESHOLD)\n            tab[index] = loHead.untreeify(map);\n        else {\n            tab[index] = loHead;\n            if (hiHead != null) // (else is already treeified)\n                loHead.treeify(tab);\n        }\n    }\n    if (hiHead != null) {\n        if (hc <= UNTREEIFY_THRESHOLD)\n            tab[index + bit] = hiHead.untreeify(map);\n        else {\n            tab[index + bit] = hiHead;\n            if (loHead != null)\n                hiHead.treeify(tab);\n        }\n    }\n}\n\n/* ------------------------------------------------------------ */\n// Red-black tree methods, all adapted from CLR\n\n/**\n * 红黑树的左旋\n * 红黑树相关知识待深入学习后进一步探讨\n */\nstatic <K,V> HashMap.TreeNode<K,V> rotateLeft(HashMap.TreeNode<K,V> root,\n                                              HashMap.TreeNode<K,V> p) {\n    HashMap.TreeNode<K,V> r, pp, rl;\n    if (p != null && (r = p.right) != null) {\n        if ((rl = p.right = r.left) != null)\n            rl.parent = p;\n        if ((pp = r.parent = p.parent) == null)\n            (root = r).red = false;\n        else if (pp.left == p)\n            pp.left = r;\n        else\n            pp.right = r;\n        r.left = p;\n        p.parent = r;\n    }\n    return root;\n}\n\n/**\n * 红黑树的右旋\n */\nstatic <K,V> HashMap.TreeNode<K,V> rotateRight(HashMap.TreeNode<K,V> root,\n                                               HashMap.TreeNode<K,V> p) {\n    HashMap.TreeNode<K,V> l, pp, lr;\n    if (p != null && (l = p.left) != null) {\n        if ((lr = p.left = l.right) != null)\n            lr.parent = p;\n        if ((pp = l.parent = p.parent) == null)\n            (root = l).red = false;\n        else if (pp.right == p)\n            pp.right = l;\n        else\n            pp.left = l;\n        l.right = p;\n        p.parent = l;\n    }\n    return root;\n}\n\n/**\n * 插入结点后进行重平衡\n * 这部分只看懂代码了，算法比较懵，有机会再探讨红黑树算法\n */\nstatic <K,V> HashMap.TreeNode<K,V> balanceInsertion(HashMap.TreeNode<K,V> root, HashMap.TreeNode<K,V> x) {\n    //将插入的结点设为红色\n    x.red = true;\n    for (HashMap.TreeNode<K,V> xp, xpp, xppl, xppr;;) {\n        //x为根结点时，设为黑色，直接返回\n        if ((xp = x.parent) == null) {\n            x.red = false;\n            return x;\n        }\n        //父结点为黑且为根结点时，直接返回。\n        else if (!xp.red || (xpp = xp.parent) == null)\n            return root;\n        //父结点为祖父结点的左孩子结点时：\n        if (xp == (xppl = xpp.left)) {\n            //祖父结点的右孩子结点为红色时，叔叔结点和父结点置黑，祖父结点置红，设置当前结点为祖父结点\n            if ((xppr = xpp.right) != null && xppr.red) {\n                xppr.red = false;\n                xp.red = false;\n                xpp.red = true;\n                x = xpp;\n            }\n            else {\n                //否则，如果当前结点为父结点的右孩子结点，进行左旋\n                if (x == xp.right) {\n                    root = rotateLeft(root, x = xp);\n                    xpp = (xp = x.parent) == null ? null : xp.parent;\n                }\n                //如果父结点不为空设为黑色，且如果祖父结点不为空则设为红色并进行右旋\n                if (xp != null) {\n                    xp.red = false;\n                    if (xpp != null) {\n                        xpp.red = true;\n                        root = rotateRight(root, xpp);\n                    }\n                }\n            }\n        }\n        else {\n            if (xppl != null && xppl.red) {\n                xppl.red = false;\n                xp.red = false;\n                xpp.red = true;\n                x = xpp;\n            }\n            else {\n                if (x == xp.left) {\n                    root = rotateRight(root, x = xp);\n                    xpp = (xp = x.parent) == null ? null : xp.parent;\n                }\n                if (xp != null) {\n                    xp.red = false;\n                    if (xpp != null) {\n                        xpp.red = true;\n                        root = rotateLeft(root, xpp);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * 删除结点后进行重平衡\n */\nstatic <K,V> HashMap.TreeNode<K,V> balanceDeletion(HashMap.TreeNode<K,V> root,\n                                                   HashMap.TreeNode<K,V> x) {\n    for (HashMap.TreeNode<K,V> xp, xpl, xpr;;)  {\n        if (x == null || x == root)\n            return root;\n        else if ((xp = x.parent) == null) {\n            x.red = false;\n            return x;\n        }\n        else if (x.red) {\n            x.red = false;\n            return root;\n        }\n        else if ((xpl = xp.left) == x) {\n            if ((xpr = xp.right) != null && xpr.red) {\n                xpr.red = false;\n                xp.red = true;\n                root = rotateLeft(root, xp);\n                xpr = (xp = x.parent) == null ? null : xp.right;\n            }\n            if (xpr == null)\n                x = xp;\n            else {\n                HashMap.TreeNode<K,V> sl = xpr.left, sr = xpr.right;\n                if ((sr == null || !sr.red) &&\n                        (sl == null || !sl.red)) {\n                    xpr.red = true;\n                    x = xp;\n                }\n                else {\n                    if (sr == null || !sr.red) {\n                        if (sl != null)\n                            sl.red = false;\n                        xpr.red = true;\n                        root = rotateRight(root, xpr);\n                        xpr = (xp = x.parent) == null ?\n                                null : xp.right;\n                    }\n                    if (xpr != null) {\n                        xpr.red = (xp == null) ? false : xp.red;\n                        if ((sr = xpr.right) != null)\n                            sr.red = false;\n                    }\n                    if (xp != null) {\n                        xp.red = false;\n                        root = rotateLeft(root, xp);\n                    }\n                    x = root;\n                }\n            }\n        }\n        else { // symmetric\n            if (xpl != null && xpl.red) {\n                xpl.red = false;\n                xp.red = true;\n                root = rotateRight(root, xp);\n                xpl = (xp = x.parent) == null ? null : xp.left;\n            }\n            if (xpl == null)\n                x = xp;\n            else {\n                HashMap.TreeNode<K,V> sl = xpl.left, sr = xpl.right;\n                if ((sl == null || !sl.red) &&\n                        (sr == null || !sr.red)) {\n                    xpl.red = true;\n                    x = xp;\n                }\n                else {\n                    if (sl == null || !sl.red) {\n                        if (sr != null)\n                            sr.red = false;\n                        xpl.red = true;\n                        root = rotateLeft(root, xpl);\n                        xpl = (xp = x.parent) == null ?\n                                null : xp.left;\n                    }\n                    if (xpl != null) {\n                        xpl.red = (xp == null) ? false : xp.red;\n                        if ((sl = xpl.left) != null)\n                            sl.red = false;\n                    }\n                    if (xp != null) {\n                        xp.red = false;\n                        root = rotateRight(root, xp);\n                    }\n                    x = root;\n                }\n            }\n        }\n    }\n}\n\n/**\n * 检查红黑树结构是否正常\n */\nstatic <K,V> boolean checkInvariants(HashMap.TreeNode<K,V> t) {\n    HashMap.TreeNode<K,V> tp = t.parent, tl = t.left, tr = t.right,\n            tb = t.prev, tn = (HashMap.TreeNode<K,V>)t.next;\n    if (tb != null && tb.next != t)\n        return false;\n    if (tn != null && tn.prev != t)\n        return false;\n    if (tp != null && t != tp.left && t != tp.right)\n        return false;\n    if (tl != null && (tl.parent != t || tl.hash > t.hash))\n        return false;\n    if (tr != null && (tr.parent != t || tr.hash < t.hash))\n        return false;\n    if (t.red && tl != null && tl.red && tr != null && tr.red)\n        return false;\n    if (tl != null && !checkInvariants(tl))\n        return false;\n    if (tr != null && !checkInvariants(tr))\n        return false;\n    return true;\n}\n\n```\n{% asset_img IMG_1756.GIF %}\nJava8的HashMap解读暂告一段落，下期继续探讨其他特性，希望不要太久😂\n\n\nhttps://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname\n\n\n\n\n","source":"_posts/Java-8-HashMap-上-——-红黑树.md","raw":"---\ntitle: Java 8 HashMap(上)—— 红黑树\ndate: 2018-09-24 00:19:04\ncategories:\n- Java\ntags:\n- 公众号文章\n- Java\n- HashMap\n- 红黑树\n---\n\n\n\n*推荐阅读时间：10分钟*\n\n\n### 简介\n\n>Java8的最大特性是使用红黑树结构来存储每个（桶）bucket中的数据（当链表长度超过8时）。  \n为什么引入红黑树呢？其实正常情况下，平均每个桶中应该只会有不到1个数据，但当发生大量Hash碰撞时，每个桶中的数据也将会大量增加，这将会影响到数据的查询速度。在Java7中，每个桶使用链表存储数据，查找数据采用遍历的方式，查询时间复杂度为O(n)。Java7中为了避免大量Hash碰撞的问题，引入了hashseed方式，增强了Hash函数的散列性。但是randomHashSeed方法调用的next方法在多线程运算时存在性能问题（待考证），故在Java8中被弃用。Java8中换了一个思路：使用红黑树来提高查找速度（O(logN)），即使发生大量hash碰撞也不会造成性能影响，这便是红黑树由来的原因。  \nJava7的HashMap一共有接近1200行代码，而到了Java8直接增加到了2400行，减去全局变量前新加的100行注释，相差1100行。其中TreeNode(红黑树)实现部分有600行代码，再加上其他方法对红黑树的适应性改动，可见红黑树部分是Java8 HashMap的主要改动。  \n\n\n\n### 详情\n#### 继承关系如下：\n\n{% asset_img 20180923214733.png %}\n\n\nTreeNode继承了LinkedHashMap.Entry，LinkedHashMap.Entry继承了HashMap.Node，而Node其实就是上个版本的Entry（链表）结构。此处有个疑惑：TreeNode并没有使用LinkedHashMap.Entry的before和after字段，不知道为啥不直接继承Node类。\n\n\n\n#### 字段和构造函数如下：\n``` java\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    //常见的树结构\n    HashMap.TreeNode<K, V> parent;\n    HashMap.TreeNode<K, V> left;\n    HashMap.TreeNode<K, V> right;\n    HashMap.TreeNode<K, V> prev;\n    boolean red;\n\n    TreeNode(int hash, K key, V val, HashMap.Node<K, V> next) {\n        super(hash, key, val, next);\n    }\n}\n\n```\n\n#### 红黑树全部方法如下：\n\n``` java\n/**\n * 获取根结点\n */ \nfinal HashMap.TreeNode<K,V> root() {\n     for (HashMap.TreeNode<K,V> r = this, p;;) {\n        if ((p = r.parent) == null)\n            return r;\n        r = p;\n    }\n}\n\n/**\n * 选取根结点\n * 红黑树进行左旋、右旋后，根结点可能移动，头结点需要重新指向新的根结点\n */\nstatic <K,V> void moveRootToFront(HashMap.Node<K,V>[] tab, HashMap.TreeNode<K,V> root) {\n    int n;\n    if (root != null && tab != null && (n = tab.length) > 0) {\n        int index = (n - 1) & root.hash;\n        HashMap.TreeNode<K,V> first = (HashMap.TreeNode<K,V>)tab[index];\n        //如果根结点不是桶的第一个节点，则将根结点移动到头结点位置\n        if (root != first) {\n            HashMap.Node<K,V> rn;\n            tab[index] = root;\n            HashMap.TreeNode<K,V> rp = root.prev;\n            if ((rn = root.next) != null)\n                ((HashMap.TreeNode<K,V>)rn).prev = rp;\n            if (rp != null)\n                rp.next = rn;\n            if (first != null)\n                first.prev = root;\n            root.next = first;\n            root.prev = null;\n        }\n        //断言红黑树结构是否正常，不正常则报异常停止\n        assert checkInvariants(root);\n    }\n}\n\n/**\n * 根据结点hash值、key和key的类型 进行红黑树查找\n *\n */\nfinal HashMap.TreeNode<K,V> find(int h, Object k, Class<?> kc) {\n    HashMap.TreeNode<K,V> p = this;\n    do {\n        int ph, dir; K pk;\n        HashMap.TreeNode<K,V> pl = p.left, pr = p.right, q;\n        //待查询结点的key的hash值若小于当前结点则进入左子树，否则进入右子树\n        if ((ph = p.hash) > h)\n            p = pl;\n        else if (ph < h)\n            p = pr;\n        //如果hash值相等再比较key，一致则表示找到，返回结果\n        else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n            return p;\n        else if (pl == null)\n            p = pr;\n        else if (pr == null)\n            p = pl;\n        //如果key不同，则看key的类型是否可比较，\n        //如果可以比较则根据比较结果选择是否返回查询结果，还是继续查询左、右子树\n        else if ((kc != null ||\n                (kc = comparableClassFor(k)) != null) &&\n                (dir = compareComparables(kc, k, pk)) != 0)\n            p = (dir < 0) ? pl : pr;\n        else if ((q = pr.find(h, k, kc)) != null)\n            return q;\n        else\n            p = pl;\n    } while (p != null);\n    return null;\n}\n\n/**\n * 根据结点hash值、key 进行红黑树查找\n */\nfinal HashMap.TreeNode<K,V> getTreeNode(int h, Object k) {\n    return ((parent != null) ? root() : this).find(h, k, null);\n}\n\n/**\n * 强制比较两个结点的key\n *\n * 当两个类型不能直接比较时，通过对类名进行hash进行比较；若hash值也相等，判定b大。\n * 故一定会排出先后顺序。\n */\nstatic int tieBreakOrder(Object a, Object b) {\n    int d;\n    if (a == null || b == null ||\n            (d = a.getClass().getName().\n                    compareTo(b.getClass().getName())) == 0)\n        d = (System.identityHashCode(a) <= System.identityHashCode(b) ?\n                -1 : 1);\n    return d;\n}\n\n/**\n * 将链表转化为红黑树\n * 重要方法！当链表长度增加到红黑树转换阈值（默认8），且桶的数量不小于64 时触发\n */\nfinal void treeify(HashMap.Node<K,V>[] tab) {\n    HashMap.TreeNode<K,V> root = null;\n    //遍历链表\n    for (HashMap.TreeNode<K,V> x = this, next; x != null; x = next) {\n        next = (HashMap.TreeNode<K,V>)x.next;\n        x.left = x.right = null;\n        //首结点作为根结点\n        if (root == null) {\n            x.parent = null;\n            x.red = false;\n            root = x;\n        }\n        else {\n            K k = x.key;\n            int h = x.hash;\n            Class<?> kc = null;\n            for (HashMap.TreeNode<K,V> p = root;;) {\n                int dir, ph;\n                K pk = p.key;\n                if ((ph = p.hash) > h)\n                    dir = -1;\n                else if (ph < h)\n                    dir = 1;\n                else if ((kc == null &&\n                        (kc = comparableClassFor(k)) == null) ||\n                        (dir = compareComparables(kc, k, pk)) == 0)\n                    //如果未能比较，调用强制比较方法，确保有序\n                    dir = tieBreakOrder(k, pk);\n\n                HashMap.TreeNode<K,V> xp = p;\n                //当左或右子树为空时，插入链表上的一个结点\n                if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                    x.parent = xp;\n                    if (dir <= 0)\n                        xp.left = x;\n                    else\n                        xp.right = x;\n                    //插入结点后，进行左旋、右旋重平衡，转换为红黑树\n                    root = balanceInsertion(root, x);\n                    break;\n                }\n            }\n        }\n    }\n    //确保根结点是首结点\n    moveRootToFront(tab, root);\n}\n\n/**\n * 红黑树转换为链表\n * 当红黑树结点减少到链表还原阈值（默认6）时触发\n */\nfinal HashMap.Node<K,V> untreeify(HashMap<K,V> map) {\n    HashMap.Node<K,V> hd = null, tl = null;\n    for (HashMap.Node<K,V> q = this; q != null; q = q.next) {\n        HashMap.Node<K,V> p = map.replacementNode(q, null);\n        if (tl == null)\n            hd = p;\n        else\n            tl.next = p;\n        tl = p;\n    }\n    return hd;\n}\n\n/**\n * 红黑树插入新结点\n */\nfinal HashMap.TreeNode<K,V> putTreeVal(HashMap<K,V> map, HashMap.Node<K,V>[] tab,\n                                       int h, K k, V v) {\n    Class<?> kc = null;\n    boolean searched = false;\n    HashMap.TreeNode<K,V> root = (parent != null) ? root() : this;\n    for (HashMap.TreeNode<K,V> p = root;;) {\n        int dir, ph; K pk;\n        if ((ph = p.hash) > h)\n            dir = -1;\n        else if (ph < h)\n            dir = 1;\n        else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n            return p;\n        else if ((kc == null &&\n                (kc = comparableClassFor(k)) == null) ||\n                (dir = compareComparables(kc, k, pk)) == 0) {\n            if (!searched) {\n                HashMap.TreeNode<K,V> q, ch;\n                searched = true;\n                //插入结点与当前结点hash值相等时，查找左子树或右子树，若已包含待插入结点则直接返回结果\n                if (((ch = p.left) != null &&\n                        (q = ch.find(h, k, kc)) != null) ||\n                        ((ch = p.right) != null &&\n                                (q = ch.find(h, k, kc)) != null))\n                    return q;\n            }\n            dir = tieBreakOrder(k, pk);\n        }\n\n        HashMap.TreeNode<K,V> xp = p;\n        //若已比较到左子树或右子树为空时还没有找到，则插入该结点\n        if ((p = (dir <= 0) ? p.left : p.right) == null) {\n            HashMap.Node<K,V> xpn = xp.next;\n            HashMap.TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);\n            if (dir <= 0)\n                xp.left = x;\n            else\n                xp.right = x;\n            xp.next = x;\n            x.parent = x.prev = xp;\n            if (xpn != null)\n                ((HashMap.TreeNode<K,V>)xpn).prev = x;\n            moveRootToFront(tab, balanceInsertion(root, x));\n            return null;\n        }\n    }\n}\n\n/**\n * 删除红黑树结点\n * 呃，这个方法和前面的比起来大同小异，不细看了\n */\nfinal void removeTreeNode(HashMap<K,V> map, HashMap.Node<K,V>[] tab,\n                          boolean movable) {\n    int n;\n    if (tab == null || (n = tab.length) == 0)\n        return;\n    int index = (n - 1) & hash;\n    HashMap.TreeNode<K,V> first = (HashMap.TreeNode<K,V>)tab[index], root = first, rl;\n    HashMap.TreeNode<K,V> succ = (HashMap.TreeNode<K,V>)next, pred = prev;\n    if (pred == null)\n        tab[index] = first = succ;\n    else\n        pred.next = succ;\n    if (succ != null)\n        succ.prev = pred;\n    if (first == null)\n        return;\n    if (root.parent != null)\n        root = root.root();\n    if (root == null || root.right == null ||\n            (rl = root.left) == null || rl.left == null) {\n        //若删除结点后，达到链表还原阈值，则还原为链表\n        tab[index] = first.untreeify(map);\n        return;\n    }\n    HashMap.TreeNode<K,V> p = this, pl = left, pr = right, replacement;\n    if (pl != null && pr != null) {\n        HashMap.TreeNode<K,V> s = pr, sl;\n        while ((sl = s.left) != null) // find successor\n            s = sl;\n        boolean c = s.red; s.red = p.red; p.red = c; // swap colors\n        HashMap.TreeNode<K,V> sr = s.right;\n        HashMap.TreeNode<K,V> pp = p.parent;\n        if (s == pr) { // p was s's direct parent\n            p.parent = s;\n            s.right = p;\n        }\n        else {\n            HashMap.TreeNode<K,V> sp = s.parent;\n            if ((p.parent = sp) != null) {\n                if (s == sp.left)\n                    sp.left = p;\n                else\n                    sp.right = p;\n            }\n            if ((s.right = pr) != null)\n                pr.parent = s;\n        }\n        p.left = null;\n        if ((p.right = sr) != null)\n            sr.parent = p;\n        if ((s.left = pl) != null)\n            pl.parent = s;\n        if ((s.parent = pp) == null)\n            root = s;\n        else if (p == pp.left)\n            pp.left = s;\n        else\n            pp.right = s;\n        if (sr != null)\n            replacement = sr;\n        else\n            replacement = p;\n    }\n    else if (pl != null)\n        replacement = pl;\n    else if (pr != null)\n        replacement = pr;\n    else\n        replacement = p;\n    if (replacement != p) {\n        HashMap.TreeNode<K,V> pp = replacement.parent = p.parent;\n        if (pp == null)\n            root = replacement;\n        else if (p == pp.left)\n            pp.left = replacement;\n        else\n            pp.right = replacement;\n        p.left = p.right = p.parent = null;\n    }\n\n    HashMap.TreeNode<K,V> r = p.red ? root : balanceDeletion(root, replacement);\n\n    if (replacement == p) {  // detach\n        HashMap.TreeNode<K,V> pp = p.parent;\n        p.parent = null;\n        if (pp != null) {\n            if (p == pp.left)\n                pp.left = null;\n            else if (p == pp.right)\n                pp.right = null;\n        }\n    }\n    if (movable)\n        moveRootToFront(tab, r);\n}\n\n/**\n * 将红黑树分为两半\n * 扩容时，会将一个桶中的红黑树拆分为两个；若拆分后红黑树不够大，会被还原为链表。\n */\nfinal void split(HashMap<K,V> map, HashMap.Node<K,V>[] tab, int index, int bit) {\n    HashMap.TreeNode<K,V> b = this;\n    // Relink into lo and hi lists, preserving order\n    HashMap.TreeNode<K,V> loHead = null, loTail = null;\n    HashMap.TreeNode<K,V> hiHead = null, hiTail = null;\n    int lc = 0, hc = 0;\n    for (HashMap.TreeNode<K,V> e = b, next; e != null; e = next) {\n        next = (HashMap.TreeNode<K,V>)e.next;\n        e.next = null;\n        if ((e.hash & bit) == 0) {\n            if ((e.prev = loTail) == null)\n                loHead = e;\n            else\n                loTail.next = e;\n            loTail = e;\n            ++lc;\n        }\n        else {\n            if ((e.prev = hiTail) == null)\n                hiHead = e;\n            else\n                hiTail.next = e;\n            hiTail = e;\n            ++hc;\n        }\n    }\n\n    if (loHead != null) {\n        if (lc <= UNTREEIFY_THRESHOLD)\n            tab[index] = loHead.untreeify(map);\n        else {\n            tab[index] = loHead;\n            if (hiHead != null) // (else is already treeified)\n                loHead.treeify(tab);\n        }\n    }\n    if (hiHead != null) {\n        if (hc <= UNTREEIFY_THRESHOLD)\n            tab[index + bit] = hiHead.untreeify(map);\n        else {\n            tab[index + bit] = hiHead;\n            if (loHead != null)\n                hiHead.treeify(tab);\n        }\n    }\n}\n\n/* ------------------------------------------------------------ */\n// Red-black tree methods, all adapted from CLR\n\n/**\n * 红黑树的左旋\n * 红黑树相关知识待深入学习后进一步探讨\n */\nstatic <K,V> HashMap.TreeNode<K,V> rotateLeft(HashMap.TreeNode<K,V> root,\n                                              HashMap.TreeNode<K,V> p) {\n    HashMap.TreeNode<K,V> r, pp, rl;\n    if (p != null && (r = p.right) != null) {\n        if ((rl = p.right = r.left) != null)\n            rl.parent = p;\n        if ((pp = r.parent = p.parent) == null)\n            (root = r).red = false;\n        else if (pp.left == p)\n            pp.left = r;\n        else\n            pp.right = r;\n        r.left = p;\n        p.parent = r;\n    }\n    return root;\n}\n\n/**\n * 红黑树的右旋\n */\nstatic <K,V> HashMap.TreeNode<K,V> rotateRight(HashMap.TreeNode<K,V> root,\n                                               HashMap.TreeNode<K,V> p) {\n    HashMap.TreeNode<K,V> l, pp, lr;\n    if (p != null && (l = p.left) != null) {\n        if ((lr = p.left = l.right) != null)\n            lr.parent = p;\n        if ((pp = l.parent = p.parent) == null)\n            (root = l).red = false;\n        else if (pp.right == p)\n            pp.right = l;\n        else\n            pp.left = l;\n        l.right = p;\n        p.parent = l;\n    }\n    return root;\n}\n\n/**\n * 插入结点后进行重平衡\n * 这部分只看懂代码了，算法比较懵，有机会再探讨红黑树算法\n */\nstatic <K,V> HashMap.TreeNode<K,V> balanceInsertion(HashMap.TreeNode<K,V> root, HashMap.TreeNode<K,V> x) {\n    //将插入的结点设为红色\n    x.red = true;\n    for (HashMap.TreeNode<K,V> xp, xpp, xppl, xppr;;) {\n        //x为根结点时，设为黑色，直接返回\n        if ((xp = x.parent) == null) {\n            x.red = false;\n            return x;\n        }\n        //父结点为黑且为根结点时，直接返回。\n        else if (!xp.red || (xpp = xp.parent) == null)\n            return root;\n        //父结点为祖父结点的左孩子结点时：\n        if (xp == (xppl = xpp.left)) {\n            //祖父结点的右孩子结点为红色时，叔叔结点和父结点置黑，祖父结点置红，设置当前结点为祖父结点\n            if ((xppr = xpp.right) != null && xppr.red) {\n                xppr.red = false;\n                xp.red = false;\n                xpp.red = true;\n                x = xpp;\n            }\n            else {\n                //否则，如果当前结点为父结点的右孩子结点，进行左旋\n                if (x == xp.right) {\n                    root = rotateLeft(root, x = xp);\n                    xpp = (xp = x.parent) == null ? null : xp.parent;\n                }\n                //如果父结点不为空设为黑色，且如果祖父结点不为空则设为红色并进行右旋\n                if (xp != null) {\n                    xp.red = false;\n                    if (xpp != null) {\n                        xpp.red = true;\n                        root = rotateRight(root, xpp);\n                    }\n                }\n            }\n        }\n        else {\n            if (xppl != null && xppl.red) {\n                xppl.red = false;\n                xp.red = false;\n                xpp.red = true;\n                x = xpp;\n            }\n            else {\n                if (x == xp.left) {\n                    root = rotateRight(root, x = xp);\n                    xpp = (xp = x.parent) == null ? null : xp.parent;\n                }\n                if (xp != null) {\n                    xp.red = false;\n                    if (xpp != null) {\n                        xpp.red = true;\n                        root = rotateLeft(root, xpp);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * 删除结点后进行重平衡\n */\nstatic <K,V> HashMap.TreeNode<K,V> balanceDeletion(HashMap.TreeNode<K,V> root,\n                                                   HashMap.TreeNode<K,V> x) {\n    for (HashMap.TreeNode<K,V> xp, xpl, xpr;;)  {\n        if (x == null || x == root)\n            return root;\n        else if ((xp = x.parent) == null) {\n            x.red = false;\n            return x;\n        }\n        else if (x.red) {\n            x.red = false;\n            return root;\n        }\n        else if ((xpl = xp.left) == x) {\n            if ((xpr = xp.right) != null && xpr.red) {\n                xpr.red = false;\n                xp.red = true;\n                root = rotateLeft(root, xp);\n                xpr = (xp = x.parent) == null ? null : xp.right;\n            }\n            if (xpr == null)\n                x = xp;\n            else {\n                HashMap.TreeNode<K,V> sl = xpr.left, sr = xpr.right;\n                if ((sr == null || !sr.red) &&\n                        (sl == null || !sl.red)) {\n                    xpr.red = true;\n                    x = xp;\n                }\n                else {\n                    if (sr == null || !sr.red) {\n                        if (sl != null)\n                            sl.red = false;\n                        xpr.red = true;\n                        root = rotateRight(root, xpr);\n                        xpr = (xp = x.parent) == null ?\n                                null : xp.right;\n                    }\n                    if (xpr != null) {\n                        xpr.red = (xp == null) ? false : xp.red;\n                        if ((sr = xpr.right) != null)\n                            sr.red = false;\n                    }\n                    if (xp != null) {\n                        xp.red = false;\n                        root = rotateLeft(root, xp);\n                    }\n                    x = root;\n                }\n            }\n        }\n        else { // symmetric\n            if (xpl != null && xpl.red) {\n                xpl.red = false;\n                xp.red = true;\n                root = rotateRight(root, xp);\n                xpl = (xp = x.parent) == null ? null : xp.left;\n            }\n            if (xpl == null)\n                x = xp;\n            else {\n                HashMap.TreeNode<K,V> sl = xpl.left, sr = xpl.right;\n                if ((sl == null || !sl.red) &&\n                        (sr == null || !sr.red)) {\n                    xpl.red = true;\n                    x = xp;\n                }\n                else {\n                    if (sl == null || !sl.red) {\n                        if (sr != null)\n                            sr.red = false;\n                        xpl.red = true;\n                        root = rotateLeft(root, xpl);\n                        xpl = (xp = x.parent) == null ?\n                                null : xp.left;\n                    }\n                    if (xpl != null) {\n                        xpl.red = (xp == null) ? false : xp.red;\n                        if ((sl = xpl.left) != null)\n                            sl.red = false;\n                    }\n                    if (xp != null) {\n                        xp.red = false;\n                        root = rotateRight(root, xp);\n                    }\n                    x = root;\n                }\n            }\n        }\n    }\n}\n\n/**\n * 检查红黑树结构是否正常\n */\nstatic <K,V> boolean checkInvariants(HashMap.TreeNode<K,V> t) {\n    HashMap.TreeNode<K,V> tp = t.parent, tl = t.left, tr = t.right,\n            tb = t.prev, tn = (HashMap.TreeNode<K,V>)t.next;\n    if (tb != null && tb.next != t)\n        return false;\n    if (tn != null && tn.prev != t)\n        return false;\n    if (tp != null && t != tp.left && t != tp.right)\n        return false;\n    if (tl != null && (tl.parent != t || tl.hash > t.hash))\n        return false;\n    if (tr != null && (tr.parent != t || tr.hash < t.hash))\n        return false;\n    if (t.red && tl != null && tl.red && tr != null && tr.red)\n        return false;\n    if (tl != null && !checkInvariants(tl))\n        return false;\n    if (tr != null && !checkInvariants(tr))\n        return false;\n    return true;\n}\n\n```\n{% asset_img IMG_1756.GIF %}\nJava8的HashMap解读暂告一段落，下期继续探讨其他特性，希望不要太久😂\n\n\nhttps://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname\n\n\n\n\n","slug":"Java-8-HashMap-上-——-红黑树","published":1,"updated":"2018-09-23T16:45:18.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtn000uayqce1ffzfw0","content":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>Java8的最大特性是使用红黑树结构来存储每个（桶）bucket中的数据（当链表长度超过8时）。<br>为什么引入红黑树呢？其实正常情况下，平均每个桶中应该只会有不到1个数据，但当发生大量Hash碰撞时，每个桶中的数据也将会大量增加，这将会影响到数据的查询速度。在Java7中，每个桶使用链表存储数据，查找数据采用遍历的方式，查询时间复杂度为O(n)。Java7中为了避免大量Hash碰撞的问题，引入了hashseed方式，增强了Hash函数的散列性。但是randomHashSeed方法调用的next方法在多线程运算时存在性能问题（待考证），故在Java8中被弃用。Java8中换了一个思路：使用红黑树来提高查找速度（O(logN)），即使发生大量hash碰撞也不会造成性能影响，这便是红黑树由来的原因。<br>Java7的HashMap一共有接近1200行代码，而到了Java8直接增加到了2400行，减去全局变量前新加的100行注释，相差1100行。其中TreeNode(红黑树)实现部分有600行代码，再加上其他方法对红黑树的适应性改动，可见红黑树部分是Java8 HashMap的主要改动。  </p>\n</blockquote>\n<h3 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h3><h4 id=\"继承关系如下：\"><a href=\"#继承关系如下：\" class=\"headerlink\" title=\"继承关系如下：\"></a>继承关系如下：</h4><img src=\"/2018/09/24/Java-8-HashMap-上-——-红黑树/20180923214733.png\">\n<p>TreeNode继承了LinkedHashMap.Entry，LinkedHashMap.Entry继承了HashMap.Node，而Node其实就是上个版本的Entry（链表）结构。此处有个疑惑：TreeNode并没有使用LinkedHashMap.Entry的before和after字段，不知道为啥不直接继承Node类。</p>\n<h4 id=\"字段和构造函数如下：\"><a href=\"#字段和构造函数如下：\" class=\"headerlink\" title=\"字段和构造函数如下：\"></a>字段和构造函数如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//常见的树结构</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; parent;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; left;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; right;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; prev;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> hash, K key, V val, HashMap.Node&lt;K, V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(hash, key, val, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"红黑树全部方法如下：\"><a href=\"#红黑树全部方法如下：\" class=\"headerlink\" title=\"红黑树全部方法如下：\"></a>红黑树全部方法如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取根结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; r = <span class=\"keyword\">this</span>, p;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = r.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取根结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树进行左旋、右旋后，根结点可能移动，头结点需要重新指向新的根结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveRootToFront</span><span class=\"params\">(HashMap.Node&lt;K,V&gt;[] tab, HashMap.TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; tab != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; root.hash;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; first = (HashMap.TreeNode&lt;K,V&gt;)tab[index];</span><br><span class=\"line\">        <span class=\"comment\">//如果根结点不是桶的第一个节点，则将根结点移动到头结点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != first) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K,V&gt; rn;</span><br><span class=\"line\">            tab[index] = root;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((rn = root.next) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                rp.next = rn;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                first.prev = root;</span><br><span class=\"line\">            root.next = first;</span><br><span class=\"line\">            root.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//断言红黑树结构是否正常，不正常则报异常停止</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">checkInvariants</span><span class=\"params\">(root)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据结点hash值、key和key的类型 进行红黑树查找</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; p = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ph, dir; K pk;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class=\"line\">        <span class=\"comment\">//待查询结点的key的hash值若小于当前结点则进入左子树，否则进入右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"comment\">//如果hash值相等再比较key，一致则表示找到，返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"comment\">//如果key不同，则看key的类型是否可比较，</span></span><br><span class=\"line\">        <span class=\"comment\">//如果可以比较则根据比较结果选择是否返回查询结果，还是继续查询左、右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                (kc = comparableClassFor(k)) != <span class=\"keyword\">null</span>) &amp;&amp;</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">            p = (dir &lt; <span class=\"number\">0</span>) ? pl : pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((q = pr.find(h, k, kc)) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据结点hash值、key 进行红黑树查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">getTreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>).find(h, k, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 强制比较两个结点的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 当两个类型不能直接比较时，通过对类名进行hash进行比较；若hash值也相等，判定b大。</span></span><br><span class=\"line\"><span class=\"comment\"> * 故一定会排出先后顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">tieBreakOrder</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span> || b == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            (d = a.getClass().getName().</span><br><span class=\"line\">                    compareTo(b.getClass().getName())) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class=\"line\">                -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将链表转化为红黑树</span></span><br><span class=\"line\"><span class=\"comment\"> * 重要方法！当链表长度增加到红黑树转换阈值（默认8），且桶的数量不小于64 时触发</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeify</span><span class=\"params\">(HashMap.Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; x = <span class=\"keyword\">this</span>, next; x != <span class=\"keyword\">null</span>; x = next) &#123;</span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K,V&gt;)x.next;</span><br><span class=\"line\">        x.left = x.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//首结点作为根结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            root = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            K k = x.key;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = x.hash;</span><br><span class=\"line\">            Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> dir, ph;</span><br><span class=\"line\">                K pk = p.key;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">                    dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">                    dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                        (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//如果未能比较，调用强制比较方法，确保有序</span></span><br><span class=\"line\">                    dir = tieBreakOrder(k, pk);</span><br><span class=\"line\"></span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; xp = p;</span><br><span class=\"line\">                <span class=\"comment\">//当左或右子树为空时，插入链表上的一个结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    x.parent = xp;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                        xp.left = x;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        xp.right = x;</span><br><span class=\"line\">                    <span class=\"comment\">//插入结点后，进行左旋、右旋重平衡，转换为红黑树</span></span><br><span class=\"line\">                    root = balanceInsertion(root, x);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//确保根结点是首结点</span></span><br><span class=\"line\">    moveRootToFront(tab, root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树转换为链表</span></span><br><span class=\"line\"><span class=\"comment\"> * 当红黑树结点减少到链表还原阈值（默认6）时触发</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">untreeify</span><span class=\"params\">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K,V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.Node&lt;K,V&gt; q = <span class=\"keyword\">this</span>; q != <span class=\"keyword\">null</span>; q = q.next) &#123;</span><br><span class=\"line\">        HashMap.Node&lt;K,V&gt; p = map.replacementNode(q, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            hd = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tl.next = p;</span><br><span class=\"line\">        tl = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树插入新结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">putTreeVal</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                       <span class=\"keyword\">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> searched = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; root = (parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dir, ph; K pk;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">            dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">            dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!searched) &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; q, ch;</span><br><span class=\"line\">                searched = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//插入结点与当前结点hash值相等时，查找左子树或右子树，若已包含待插入结点则直接返回结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((ch = p.left) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                        (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        ((ch = p.right) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                                (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dir = tieBreakOrder(k, pk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; xp = p;</span><br><span class=\"line\">        <span class=\"comment\">//若已比较到左子树或右子树为空时还没有找到，则插入该结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K,V&gt; xpn = xp.next;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                xp.left = x;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                xp.right = x;</span><br><span class=\"line\">            xp.next = x;</span><br><span class=\"line\">            x.parent = x.prev = xp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpn != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class=\"line\">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除红黑树结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 呃，这个方法和前面的比起来大同小异，不细看了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">removeTreeNode</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; hash;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; first = (HashMap.TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; succ = (HashMap.TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tab[index] = first = succ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (succ != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.parent != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        root = root.root();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || root.right == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            (rl = root.left) == <span class=\"keyword\">null</span> || rl.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//若删除结点后，达到链表还原阈值，则还原为链表</span></span><br><span class=\"line\">        tab[index] = first.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; p = <span class=\"keyword\">this</span>, pl = left, pr = right, replacement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span> &amp;&amp; pr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((sl = s.left) != <span class=\"keyword\">null</span>) <span class=\"comment\">// find successor</span></span><br><span class=\"line\">            s = sl;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class=\"comment\">// swap colors</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == pr) &#123; <span class=\"comment\">// p was s's direct parent</span></span><br><span class=\"line\">            p.parent = s;</span><br><span class=\"line\">            s.right = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p.parent = sp) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == sp.left)</span><br><span class=\"line\">                    sp.left = p;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    sp.right = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((s.right = pr) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                pr.parent = s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p.right = sr) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            sr.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s.left = pl) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            pl.parent = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s.parent = pp) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = s;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">            pp.left = s;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            replacement = sr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            replacement = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        replacement = pl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        replacement = pr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        replacement = p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replacement != p) &#123;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">            pp.left = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = replacement;</span><br><span class=\"line\">        p.left = p.right = p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replacement == p) &#123;  <span class=\"comment\">// detach</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class=\"line\">        p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">                pp.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.right)</span><br><span class=\"line\">                pp.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (movable)</span><br><span class=\"line\">        moveRootToFront(tab, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将红黑树分为两半</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩容时，会将一个桶中的红黑树拆分为两个；若拆分后红黑树不够大，会被还原为链表。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; b = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Relink into lo and hi lists, preserving order</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; e = b, next; e != <span class=\"keyword\">null</span>; e = next) &#123;</span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K,V&gt;)e.next;</span><br><span class=\"line\">        e.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.hash &amp; bit) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                loHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                loTail.next = e;</span><br><span class=\"line\">            loTail = e;</span><br><span class=\"line\">            ++lc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                hiTail.next = e;</span><br><span class=\"line\">            hiTail = e;</span><br><span class=\"line\">            ++hc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index] = loHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index] = loHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) <span class=\"comment\">// (else is already treeified)</span></span><br><span class=\"line\">                loHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index + bit] = hiHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------------------------------ */</span></span><br><span class=\"line\"><span class=\"comment\">// Red-black tree methods, all adapted from CLR</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树的左旋</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树相关知识待深入学习后进一步探讨</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateLeft</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                              HashMap.TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (r = p.right) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((rl = p.right = r.left) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            rl.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((pp = r.parent = p.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            (root = r).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.left == p)</span><br><span class=\"line\">            pp.left = r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = r;</span><br><span class=\"line\">        r.left = p;</span><br><span class=\"line\">        p.parent = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树的右旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateRight</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               HashMap.TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (l = p.left) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((lr = p.left = l.right) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            lr.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((pp = l.parent = p.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            (root = l).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.right == p)</span><br><span class=\"line\">            pp.right = l;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.left = l;</span><br><span class=\"line\">        l.right = p;</span><br><span class=\"line\">        p.parent = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入结点后进行重平衡</span></span><br><span class=\"line\"><span class=\"comment\"> * 这部分只看懂代码了，算法比较懵，有机会再探讨红黑树算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">balanceInsertion</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root, HashMap.TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将插入的结点设为红色</span></span><br><span class=\"line\">    x.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//x为根结点时，设为黑色，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//父结点为黑且为根结点时，直接返回。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!xp.red || (xpp = xp.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//父结点为祖父结点的左孩子结点时：</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//祖父结点的右孩子结点为红色时，叔叔结点和父结点置黑，祖父结点置红，设置当前结点为祖父结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xppr = xpp.right) != <span class=\"keyword\">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class=\"line\">                xppr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则，如果当前结点为父结点的右孩子结点，进行左旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.right) &#123;</span><br><span class=\"line\">                    root = rotateLeft(root, x = xp);</span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果父结点不为空设为黑色，且如果祖父结点不为空则设为红色并进行右旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xppl != <span class=\"keyword\">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class=\"line\">                xppl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.left) &#123;</span><br><span class=\"line\">                    root = rotateRight(root, x = xp);</span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除结点后进行重平衡</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">balanceDeletion</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                   HashMap.TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span> || x == root)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.red) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xpr = xp.right) != <span class=\"keyword\">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class=\"line\">                xpr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                root = rotateLeft(root, xp);</span><br><span class=\"line\">                xpr = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpr == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                x = xp;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sr == <span class=\"keyword\">null</span> || !sr.red) &amp;&amp;</span><br><span class=\"line\">                        (sl == <span class=\"keyword\">null</span> || !sl.red)) &#123;</span><br><span class=\"line\">                    xpr.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    x = xp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sr == <span class=\"keyword\">null</span> || !sr.red) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sl != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        xpr.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xpr);</span><br><span class=\"line\">                        xpr = (xp = x.parent) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                <span class=\"keyword\">null</span> : xp.right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpr.red = (xp == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">false</span> : xp.red;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((sr = xpr.right) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    x = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// symmetric</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpl != <span class=\"keyword\">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class=\"line\">                xpl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                root = rotateRight(root, xp);</span><br><span class=\"line\">                xpl = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                x = xp;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sl == <span class=\"keyword\">null</span> || !sl.red) &amp;&amp;</span><br><span class=\"line\">                        (sr == <span class=\"keyword\">null</span> || !sr.red)) &#123;</span><br><span class=\"line\">                    xpl.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    x = xp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sl == <span class=\"keyword\">null</span> || !sl.red) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        xpl.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xpl);</span><br><span class=\"line\">                        xpl = (xp = x.parent) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                <span class=\"keyword\">null</span> : xp.left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpl.red = (xp == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">false</span> : xp.red;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((sl = xpl.left) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    x = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查红黑树结构是否正常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkInvariants</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class=\"line\">            tb = t.prev, tn = (HashMap.TreeNode&lt;K,V&gt;)t.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tb != <span class=\"keyword\">null</span> &amp;&amp; tb.next != t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn != <span class=\"keyword\">null</span> &amp;&amp; tn.prev != t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tp != <span class=\"keyword\">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tl != <span class=\"keyword\">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr != <span class=\"keyword\">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.red &amp;&amp; tl != <span class=\"keyword\">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class=\"keyword\">null</span> &amp;&amp; tr.red)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tl != <span class=\"keyword\">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr != <span class=\"keyword\">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/2018/09/24/Java-8-HashMap-上-——-红黑树/IMG_1756.GIF\">\n<p>Java8的HashMap解读暂告一段落，下期继续探讨其他特性，希望不要太久😂</p>\n<p><a href=\"https://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>Java8的最大特性是使用红黑树结构来存储每个（桶）bucket中的数据（当链表长度超过8时）。<br>为什么引入红黑树呢？其实正常情况下，平均每个桶中应该只会有不到1个数据，但当发生大量Hash碰撞时，每个桶中的数据也将会大量增加，这将会影响到数据的查询速度。在Java7中，每个桶使用链表存储数据，查找数据采用遍历的方式，查询时间复杂度为O(n)。Java7中为了避免大量Hash碰撞的问题，引入了hashseed方式，增强了Hash函数的散列性。但是randomHashSeed方法调用的next方法在多线程运算时存在性能问题（待考证），故在Java8中被弃用。Java8中换了一个思路：使用红黑树来提高查找速度（O(logN)），即使发生大量hash碰撞也不会造成性能影响，这便是红黑树由来的原因。<br>Java7的HashMap一共有接近1200行代码，而到了Java8直接增加到了2400行，减去全局变量前新加的100行注释，相差1100行。其中TreeNode(红黑树)实现部分有600行代码，再加上其他方法对红黑树的适应性改动，可见红黑树部分是Java8 HashMap的主要改动。  </p>\n</blockquote>\n<h3 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h3><h4 id=\"继承关系如下：\"><a href=\"#继承关系如下：\" class=\"headerlink\" title=\"继承关系如下：\"></a>继承关系如下：</h4><img src=\"/2018/09/24/Java-8-HashMap-上-——-红黑树/20180923214733.png\">\n<p>TreeNode继承了LinkedHashMap.Entry，LinkedHashMap.Entry继承了HashMap.Node，而Node其实就是上个版本的Entry（链表）结构。此处有个疑惑：TreeNode并没有使用LinkedHashMap.Entry的before和after字段，不知道为啥不直接继承Node类。</p>\n<h4 id=\"字段和构造函数如下：\"><a href=\"#字段和构造函数如下：\" class=\"headerlink\" title=\"字段和构造函数如下：\"></a>字段和构造函数如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//常见的树结构</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; parent;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; left;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; right;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K, V&gt; prev;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> hash, K key, V val, HashMap.Node&lt;K, V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(hash, key, val, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"红黑树全部方法如下：\"><a href=\"#红黑树全部方法如下：\" class=\"headerlink\" title=\"红黑树全部方法如下：\"></a>红黑树全部方法如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取根结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; r = <span class=\"keyword\">this</span>, p;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = r.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取根结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树进行左旋、右旋后，根结点可能移动，头结点需要重新指向新的根结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveRootToFront</span><span class=\"params\">(HashMap.Node&lt;K,V&gt;[] tab, HashMap.TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; tab != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; root.hash;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; first = (HashMap.TreeNode&lt;K,V&gt;)tab[index];</span><br><span class=\"line\">        <span class=\"comment\">//如果根结点不是桶的第一个节点，则将根结点移动到头结点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != first) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K,V&gt; rn;</span><br><span class=\"line\">            tab[index] = root;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((rn = root.next) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                rp.next = rn;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                first.prev = root;</span><br><span class=\"line\">            root.next = first;</span><br><span class=\"line\">            root.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//断言红黑树结构是否正常，不正常则报异常停止</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">checkInvariants</span><span class=\"params\">(root)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据结点hash值、key和key的类型 进行红黑树查找</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; p = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ph, dir; K pk;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class=\"line\">        <span class=\"comment\">//待查询结点的key的hash值若小于当前结点则进入左子树，否则进入右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"comment\">//如果hash值相等再比较key，一致则表示找到，返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">        <span class=\"comment\">//如果key不同，则看key的类型是否可比较，</span></span><br><span class=\"line\">        <span class=\"comment\">//如果可以比较则根据比较结果选择是否返回查询结果，还是继续查询左、右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                (kc = comparableClassFor(k)) != <span class=\"keyword\">null</span>) &amp;&amp;</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">            p = (dir &lt; <span class=\"number\">0</span>) ? pl : pr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((q = pr.find(h, k, kc)) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p = pl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据结点hash值、key 进行红黑树查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">getTreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>).find(h, k, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 强制比较两个结点的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 当两个类型不能直接比较时，通过对类名进行hash进行比较；若hash值也相等，判定b大。</span></span><br><span class=\"line\"><span class=\"comment\"> * 故一定会排出先后顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">tieBreakOrder</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span> || b == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            (d = a.getClass().getName().</span><br><span class=\"line\">                    compareTo(b.getClass().getName())) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class=\"line\">                -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将链表转化为红黑树</span></span><br><span class=\"line\"><span class=\"comment\"> * 重要方法！当链表长度增加到红黑树转换阈值（默认8），且桶的数量不小于64 时触发</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeify</span><span class=\"params\">(HashMap.Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; x = <span class=\"keyword\">this</span>, next; x != <span class=\"keyword\">null</span>; x = next) &#123;</span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K,V&gt;)x.next;</span><br><span class=\"line\">        x.left = x.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//首结点作为根结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            root = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            K k = x.key;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = x.hash;</span><br><span class=\"line\">            Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> dir, ph;</span><br><span class=\"line\">                K pk = p.key;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">                    dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">                    dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                        (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//如果未能比较，调用强制比较方法，确保有序</span></span><br><span class=\"line\">                    dir = tieBreakOrder(k, pk);</span><br><span class=\"line\"></span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; xp = p;</span><br><span class=\"line\">                <span class=\"comment\">//当左或右子树为空时，插入链表上的一个结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    x.parent = xp;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                        xp.left = x;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        xp.right = x;</span><br><span class=\"line\">                    <span class=\"comment\">//插入结点后，进行左旋、右旋重平衡，转换为红黑树</span></span><br><span class=\"line\">                    root = balanceInsertion(root, x);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//确保根结点是首结点</span></span><br><span class=\"line\">    moveRootToFront(tab, root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树转换为链表</span></span><br><span class=\"line\"><span class=\"comment\"> * 当红黑树结点减少到链表还原阈值（默认6）时触发</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">untreeify</span><span class=\"params\">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.Node&lt;K,V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.Node&lt;K,V&gt; q = <span class=\"keyword\">this</span>; q != <span class=\"keyword\">null</span>; q = q.next) &#123;</span><br><span class=\"line\">        HashMap.Node&lt;K,V&gt; p = map.replacementNode(q, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            hd = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tl.next = p;</span><br><span class=\"line\">        tl = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树插入新结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">putTreeVal</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                       <span class=\"keyword\">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> searched = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; root = (parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dir, ph; K pk;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</span><br><span class=\"line\">            dir = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</span><br><span class=\"line\">            dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!searched) &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; q, ch;</span><br><span class=\"line\">                searched = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//插入结点与当前结点hash值相等时，查找左子树或右子树，若已包含待插入结点则直接返回结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((ch = p.left) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                        (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                        ((ch = p.right) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                                (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dir = tieBreakOrder(k, pk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; xp = p;</span><br><span class=\"line\">        <span class=\"comment\">//若已比较到左子树或右子树为空时还没有找到，则插入该结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            HashMap.Node&lt;K,V&gt; xpn = xp.next;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                xp.left = x;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                xp.right = x;</span><br><span class=\"line\">            xp.next = x;</span><br><span class=\"line\">            x.parent = x.prev = xp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpn != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ((HashMap.TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class=\"line\">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除红黑树结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 呃，这个方法和前面的比起来大同小异，不细看了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">removeTreeNode</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = (n - <span class=\"number\">1</span>) &amp; hash;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; first = (HashMap.TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; succ = (HashMap.TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tab[index] = first = succ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (succ != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.parent != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        root = root.root();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || root.right == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            (rl = root.left) == <span class=\"keyword\">null</span> || rl.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//若删除结点后，达到链表还原阈值，则还原为链表</span></span><br><span class=\"line\">        tab[index] = first.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; p = <span class=\"keyword\">this</span>, pl = left, pr = right, replacement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span> &amp;&amp; pr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((sl = s.left) != <span class=\"keyword\">null</span>) <span class=\"comment\">// find successor</span></span><br><span class=\"line\">            s = sl;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class=\"comment\">// swap colors</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == pr) &#123; <span class=\"comment\">// p was s's direct parent</span></span><br><span class=\"line\">            p.parent = s;</span><br><span class=\"line\">            s.right = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            HashMap.TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p.parent = sp) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == sp.left)</span><br><span class=\"line\">                    sp.left = p;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    sp.right = p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((s.right = pr) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                pr.parent = s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p.right = sr) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            sr.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s.left = pl) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            pl.parent = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s.parent = pp) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = s;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">            pp.left = s;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            replacement = sr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            replacement = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        replacement = pl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        replacement = pr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        replacement = p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replacement != p) &#123;</span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">            pp.left = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = replacement;</span><br><span class=\"line\">        p.left = p.right = p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replacement == p) &#123;  <span class=\"comment\">// detach</span></span><br><span class=\"line\">        HashMap.TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class=\"line\">        p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == pp.left)</span><br><span class=\"line\">                pp.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == pp.right)</span><br><span class=\"line\">                pp.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (movable)</span><br><span class=\"line\">        moveRootToFront(tab, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将红黑树分为两半</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩容时，会将一个桶中的红黑树拆分为两个；若拆分后红黑树不够大，会被还原为链表。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(HashMap&lt;K,V&gt; map, HashMap.Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> bit)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; b = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Relink into lo and hi lists, preserving order</span></span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; e = b, next; e != <span class=\"keyword\">null</span>; e = next) &#123;</span><br><span class=\"line\">        next = (HashMap.TreeNode&lt;K,V&gt;)e.next;</span><br><span class=\"line\">        e.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.hash &amp; bit) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                loHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                loTail.next = e;</span><br><span class=\"line\">            loTail = e;</span><br><span class=\"line\">            ++lc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead = e;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                hiTail.next = e;</span><br><span class=\"line\">            hiTail = e;</span><br><span class=\"line\">            ++hc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index] = loHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index] = loHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) <span class=\"comment\">// (else is already treeified)</span></span><br><span class=\"line\">                loHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hiHead != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class=\"line\">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[index + bit] = hiHead;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loHead != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                hiHead.treeify(tab);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------------------------------ */</span></span><br><span class=\"line\"><span class=\"comment\">// Red-black tree methods, all adapted from CLR</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树的左旋</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树相关知识待深入学习后进一步探讨</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateLeft</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                              HashMap.TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (r = p.right) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((rl = p.right = r.left) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            rl.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((pp = r.parent = p.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            (root = r).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.left == p)</span><br><span class=\"line\">            pp.left = r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.right = r;</span><br><span class=\"line\">        r.left = p;</span><br><span class=\"line\">        p.parent = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 红黑树的右旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateRight</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               HashMap.TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (l = p.left) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((lr = p.left = l.right) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            lr.parent = p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((pp = l.parent = p.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            (root = l).red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.right == p)</span><br><span class=\"line\">            pp.right = l;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pp.left = l;</span><br><span class=\"line\">        l.right = p;</span><br><span class=\"line\">        p.parent = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入结点后进行重平衡</span></span><br><span class=\"line\"><span class=\"comment\"> * 这部分只看懂代码了，算法比较懵，有机会再探讨红黑树算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">balanceInsertion</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root, HashMap.TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将插入的结点设为红色</span></span><br><span class=\"line\">    x.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//x为根结点时，设为黑色，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//父结点为黑且为根结点时，直接返回。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!xp.red || (xpp = xp.parent) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//父结点为祖父结点的左孩子结点时：</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//祖父结点的右孩子结点为红色时，叔叔结点和父结点置黑，祖父结点置红，设置当前结点为祖父结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xppr = xpp.right) != <span class=\"keyword\">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class=\"line\">                xppr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则，如果当前结点为父结点的右孩子结点，进行左旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.right) &#123;</span><br><span class=\"line\">                    root = rotateLeft(root, x = xp);</span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果父结点不为空设为黑色，且如果祖父结点不为空则设为红色并进行右旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xppl != <span class=\"keyword\">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class=\"line\">                xppl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                x = xpp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == xp.left) &#123;</span><br><span class=\"line\">                    root = rotateRight(root, x = xp);</span><br><span class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xpp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除结点后进行重平衡</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; HashMap.<span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">balanceDeletion</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; root,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                   HashMap.TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HashMap.TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span> || x == root)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.red) &#123;</span><br><span class=\"line\">            x.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xpr = xp.right) != <span class=\"keyword\">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class=\"line\">                xpr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                root = rotateLeft(root, xp);</span><br><span class=\"line\">                xpr = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpr == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                x = xp;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sr == <span class=\"keyword\">null</span> || !sr.red) &amp;&amp;</span><br><span class=\"line\">                        (sl == <span class=\"keyword\">null</span> || !sl.red)) &#123;</span><br><span class=\"line\">                    xpr.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    x = xp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sr == <span class=\"keyword\">null</span> || !sr.red) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sl != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        xpr.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xpr);</span><br><span class=\"line\">                        xpr = (xp = x.parent) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                <span class=\"keyword\">null</span> : xp.right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpr.red = (xp == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">false</span> : xp.red;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((sr = xpr.right) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    x = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// symmetric</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpl != <span class=\"keyword\">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class=\"line\">                xpl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                xp.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                root = rotateRight(root, xp);</span><br><span class=\"line\">                xpl = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xpl == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                x = xp;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                HashMap.TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sl == <span class=\"keyword\">null</span> || !sl.red) &amp;&amp;</span><br><span class=\"line\">                        (sr == <span class=\"keyword\">null</span> || !sr.red)) &#123;</span><br><span class=\"line\">                    xpl.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    x = xp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sl == <span class=\"keyword\">null</span> || !sl.red) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sr.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        xpl.red = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        root = rotateLeft(root, xpl);</span><br><span class=\"line\">                        xpl = (xp = x.parent) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                <span class=\"keyword\">null</span> : xp.left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xpl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xpl.red = (xp == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">false</span> : xp.red;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((sl = xpl.left) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                            sl.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        xp.red = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        root = rotateRight(root, xp);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    x = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查红黑树结构是否正常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkInvariants</span><span class=\"params\">(HashMap.TreeNode&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class=\"line\">    HashMap.TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class=\"line\">            tb = t.prev, tn = (HashMap.TreeNode&lt;K,V&gt;)t.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tb != <span class=\"keyword\">null</span> &amp;&amp; tb.next != t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn != <span class=\"keyword\">null</span> &amp;&amp; tn.prev != t)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tp != <span class=\"keyword\">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tl != <span class=\"keyword\">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr != <span class=\"keyword\">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.red &amp;&amp; tl != <span class=\"keyword\">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class=\"keyword\">null</span> &amp;&amp; tr.red)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tl != <span class=\"keyword\">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr != <span class=\"keyword\">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/2018/09/24/Java-8-HashMap-上-——-红黑树/IMG_1756.GIF\">\n<p>Java8的HashMap解读暂告一段落，下期继续探讨其他特性，希望不要太久😂</p>\n<p><a href=\"https://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/004dbfuf1jEjpI.html#stat=y_new.index.new_song.songname</a></p>\n"},{"title":"Java 8 HashMap(下)—— compute","date":"2018-09-23T16:19:04.000Z","_content":"\n{% asset_img IMG_0011.JPG 故乡的月 %}\n\n\n*推荐阅读时间：5分钟*\n\n\n### 简介\n本篇接上篇 [Java 8 HashMap (上)—— 红黑树](https://jasonsonghoho.github.io/2018/09/24/Java-8-HashMap-%E4%B8%8A-%E2%80%94%E2%80%94-%E7%BA%A2%E9%BB%91%E6%A0%91/)，\n继续探讨 Java8 的HashMap 的新特性。内容不多，重点介绍 compute 方法。\n\n\n### compute\n\ncompute 方法主要用来将一个复杂计算的结果作为值赋给指定的键。key 指待修改或插入的键，remappingFunction 是一个 BiFunction 对象。\nBiFunction 是指一个 二元（binary）函数；定义时，指定两个入参字段类型和一个结果字段类型。通过实现 apply 方法来自定义计算逻辑。\n\nBiFunction 部分源码如下：\n``` java\npublic interface BiFunction<T, U, R> {\n\n    /**\n     * Applies this function to the given arguments.\n     *\n     * @param t the first function argument\n     * @param u the second function argument\n     * @return the function result\n     */\n    R apply(T t, U u);\n}\n```\n\n\ncompute 方法源码如下：\n``` java\npublic V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n    if (remappingFunction == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    Node<K,V>[] tab; Node<K,V> first; int n, i;\n    int binCount = 0;\n    TreeNode<K,V> t = null;\n    Node<K,V> old = null;\n    if (size > threshold || (tab = table) == null ||\n        (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //根据 key 值，找到对应的 旧值\n    if ((first = tab[i = (n - 1) & hash]) != null) {\n        if (first instanceof TreeNode)\n            old = (t = (TreeNode<K,V>)first).getTreeNode(hash, key);\n        else {\n            Node<K,V> e = first; K k;\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k)))) {\n                    old = e;\n                    break;\n                }\n                ++binCount;\n            } while ((e = e.next) != null);\n        }\n    }\n    V oldValue = (old == null) ? null : old.value;\n    //计算出新值\n    V v = remappingFunction.apply(key, oldValue);\n    if (old != null) {\n        if (v != null) {\n            old.value = v;\n            afterNodeAccess(old);\n        }\n        else\n        //如果新值为 null，删掉这个 Node\n            removeNode(hash, key, null, false, true);\n    }\n    //如果新值不为 null，替换这个 Node\n    else if (v != null) {\n        if (t != null)\n            t.putTreeVal(this, tab, hash, key, v);\n        else {\n            tab[i] = newNode(hash, key, v, first);\n            if (binCount >= TREEIFY_THRESHOLD - 1)\n                treeifyBin(tab, hash);\n        }\n        ++modCount;\n        ++size;\n        afterNodeInsertion(true);\n    }\n    return v;\n}\n\n```\n\ncomputeIfAbsent、computeIfPresent 方法与 compute 类似，分别表示当相应键的值缺席、存在时，才进行 compute 方法。\n源码与 compute 基本一致，不赘述。\n\ndemo 如下：\n\n``` java\npublic static void main(String[] args) {\n    Map<String, String> hashMap = new LinkedHashMap<>();\n    hashMap.put(\"k1\", \"v1\");\n    hashMap.put(\"k2\", \"v2\");\n    hashMap.put(\"k3\", \"v3\");\n    Function<String, String> function = new Function<String, String>() {\n        @Override\n        public String apply(String s) {\n            return \"test_\" + s;\n        }\n    };\n    BiFunction<String, String, String> biFunction = new BiFunction<String, String, String>() {\n        @Override\n        public String apply(String s, String s2) {\n            return \"test_\" + s + \"_\" + s2;\n        }\n    };\n    hashMap.compute(\"k1\", biFunction);//生效\n    hashMap.compute(\"k11\", biFunction);//生效\n    hashMap.computeIfAbsent(\"k2\", function);//不生效\n    hashMap.computeIfAbsent(\"k21\", function);//生效\n    hashMap.computeIfPresent(\"k3\", biFunction);//生效\n    hashMap.computeIfPresent(\"k31\", biFunction);//不生效\n    System.out.println(hashMap);\n}\n\n```\n\n结果：\n``` java\n{k1=test_k1_v1, k2=v2, k3=test_k3_v3, k11=test_k11_null, k21=test_k21}\n```\n\n\n### merge\n\nmerge 方法是根据旧值进行计算，修改相应 Node。与 compute 结构相似，不过 BiFunction 入参为 oldValue,newValue。\n源码与 compute 基本一致，不赘述。\n\n\n### 其他\n\n其他新增的方法如下：\n\n``` java\n@Override\npublic V getOrDefault(Object key, V defaultValue) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? defaultValue : e.value;\n}\n\n@Override\npublic V putIfAbsent(K key, V value) {\n    return putVal(hash(key), key, value, true, true);\n}\n\n@Override\npublic boolean remove(Object key, Object value) {\n    return removeNode(hash(key), key, value, true, true) != null;\n}\n\n@Override\npublic boolean replace(K key, V oldValue, V newValue) {\n    Node<K,V> e; V v;\n    if ((e = getNode(hash(key), key)) != null &&\n        ((v = e.value) == oldValue || (v != null && v.equals(oldValue)))) {\n        e.value = newValue;\n        afterNodeAccess(e);\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic V replace(K key, V value) {\n    Node<K,V> e;\n    if ((e = getNode(hash(key), key)) != null) {\n        V oldValue = e.value;\n        e.value = value;\n        afterNodeAccess(e);\n        return oldValue;\n    }\n    return null;\n}\n\n```\n\n1. getOrDefault 方法根据 key 获取相应的值，如果为 null，则返回设置的默认值。\n2. putIfAbsent 方法会在 指定的 key 不存在时，插入相应的值。\n3. remove(Object key, Object value) 方法会根据 key 和 value 进行删除，如果 相应 key 的值不为该 value，则不执行删除并返回 false。\n4. replace(K key, V oldValue, V newValue) 与 replace(K key, V value) 都是替换值的操作，具体区别与上述方法类似。\n\n\n\n### 最后\n\nHashMap历时一个半月，终于告一段落了😂。\n\n由于在源码分析系列含有大量代码，放在公众号上不方便阅读，后续写的话会发在博客上。有兴趣的欢迎访问 http://jasonsonghoho.github.io 。\n\n\n---\n\n\n{% asset_img IMG_0007.JPG  %}\n\n\n\n*“你不知\n这风雪一程\n有太多不易”*\n\n\n\n\n","source":"_posts/Java-8-HashMap（下）—— compute.md","raw":"---\ntitle: Java 8 HashMap(下)—— compute\ndate: 2018-09-24 00:19:04\ncategories:\n- Java\ntags:\n- 公众号文章\n- Java\n- HashMap\n---\n\n{% asset_img IMG_0011.JPG 故乡的月 %}\n\n\n*推荐阅读时间：5分钟*\n\n\n### 简介\n本篇接上篇 [Java 8 HashMap (上)—— 红黑树](https://jasonsonghoho.github.io/2018/09/24/Java-8-HashMap-%E4%B8%8A-%E2%80%94%E2%80%94-%E7%BA%A2%E9%BB%91%E6%A0%91/)，\n继续探讨 Java8 的HashMap 的新特性。内容不多，重点介绍 compute 方法。\n\n\n### compute\n\ncompute 方法主要用来将一个复杂计算的结果作为值赋给指定的键。key 指待修改或插入的键，remappingFunction 是一个 BiFunction 对象。\nBiFunction 是指一个 二元（binary）函数；定义时，指定两个入参字段类型和一个结果字段类型。通过实现 apply 方法来自定义计算逻辑。\n\nBiFunction 部分源码如下：\n``` java\npublic interface BiFunction<T, U, R> {\n\n    /**\n     * Applies this function to the given arguments.\n     *\n     * @param t the first function argument\n     * @param u the second function argument\n     * @return the function result\n     */\n    R apply(T t, U u);\n}\n```\n\n\ncompute 方法源码如下：\n``` java\npublic V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n    if (remappingFunction == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    Node<K,V>[] tab; Node<K,V> first; int n, i;\n    int binCount = 0;\n    TreeNode<K,V> t = null;\n    Node<K,V> old = null;\n    if (size > threshold || (tab = table) == null ||\n        (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //根据 key 值，找到对应的 旧值\n    if ((first = tab[i = (n - 1) & hash]) != null) {\n        if (first instanceof TreeNode)\n            old = (t = (TreeNode<K,V>)first).getTreeNode(hash, key);\n        else {\n            Node<K,V> e = first; K k;\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k)))) {\n                    old = e;\n                    break;\n                }\n                ++binCount;\n            } while ((e = e.next) != null);\n        }\n    }\n    V oldValue = (old == null) ? null : old.value;\n    //计算出新值\n    V v = remappingFunction.apply(key, oldValue);\n    if (old != null) {\n        if (v != null) {\n            old.value = v;\n            afterNodeAccess(old);\n        }\n        else\n        //如果新值为 null，删掉这个 Node\n            removeNode(hash, key, null, false, true);\n    }\n    //如果新值不为 null，替换这个 Node\n    else if (v != null) {\n        if (t != null)\n            t.putTreeVal(this, tab, hash, key, v);\n        else {\n            tab[i] = newNode(hash, key, v, first);\n            if (binCount >= TREEIFY_THRESHOLD - 1)\n                treeifyBin(tab, hash);\n        }\n        ++modCount;\n        ++size;\n        afterNodeInsertion(true);\n    }\n    return v;\n}\n\n```\n\ncomputeIfAbsent、computeIfPresent 方法与 compute 类似，分别表示当相应键的值缺席、存在时，才进行 compute 方法。\n源码与 compute 基本一致，不赘述。\n\ndemo 如下：\n\n``` java\npublic static void main(String[] args) {\n    Map<String, String> hashMap = new LinkedHashMap<>();\n    hashMap.put(\"k1\", \"v1\");\n    hashMap.put(\"k2\", \"v2\");\n    hashMap.put(\"k3\", \"v3\");\n    Function<String, String> function = new Function<String, String>() {\n        @Override\n        public String apply(String s) {\n            return \"test_\" + s;\n        }\n    };\n    BiFunction<String, String, String> biFunction = new BiFunction<String, String, String>() {\n        @Override\n        public String apply(String s, String s2) {\n            return \"test_\" + s + \"_\" + s2;\n        }\n    };\n    hashMap.compute(\"k1\", biFunction);//生效\n    hashMap.compute(\"k11\", biFunction);//生效\n    hashMap.computeIfAbsent(\"k2\", function);//不生效\n    hashMap.computeIfAbsent(\"k21\", function);//生效\n    hashMap.computeIfPresent(\"k3\", biFunction);//生效\n    hashMap.computeIfPresent(\"k31\", biFunction);//不生效\n    System.out.println(hashMap);\n}\n\n```\n\n结果：\n``` java\n{k1=test_k1_v1, k2=v2, k3=test_k3_v3, k11=test_k11_null, k21=test_k21}\n```\n\n\n### merge\n\nmerge 方法是根据旧值进行计算，修改相应 Node。与 compute 结构相似，不过 BiFunction 入参为 oldValue,newValue。\n源码与 compute 基本一致，不赘述。\n\n\n### 其他\n\n其他新增的方法如下：\n\n``` java\n@Override\npublic V getOrDefault(Object key, V defaultValue) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? defaultValue : e.value;\n}\n\n@Override\npublic V putIfAbsent(K key, V value) {\n    return putVal(hash(key), key, value, true, true);\n}\n\n@Override\npublic boolean remove(Object key, Object value) {\n    return removeNode(hash(key), key, value, true, true) != null;\n}\n\n@Override\npublic boolean replace(K key, V oldValue, V newValue) {\n    Node<K,V> e; V v;\n    if ((e = getNode(hash(key), key)) != null &&\n        ((v = e.value) == oldValue || (v != null && v.equals(oldValue)))) {\n        e.value = newValue;\n        afterNodeAccess(e);\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic V replace(K key, V value) {\n    Node<K,V> e;\n    if ((e = getNode(hash(key), key)) != null) {\n        V oldValue = e.value;\n        e.value = value;\n        afterNodeAccess(e);\n        return oldValue;\n    }\n    return null;\n}\n\n```\n\n1. getOrDefault 方法根据 key 获取相应的值，如果为 null，则返回设置的默认值。\n2. putIfAbsent 方法会在 指定的 key 不存在时，插入相应的值。\n3. remove(Object key, Object value) 方法会根据 key 和 value 进行删除，如果 相应 key 的值不为该 value，则不执行删除并返回 false。\n4. replace(K key, V oldValue, V newValue) 与 replace(K key, V value) 都是替换值的操作，具体区别与上述方法类似。\n\n\n\n### 最后\n\nHashMap历时一个半月，终于告一段落了😂。\n\n由于在源码分析系列含有大量代码，放在公众号上不方便阅读，后续写的话会发在博客上。有兴趣的欢迎访问 http://jasonsonghoho.github.io 。\n\n\n---\n\n\n{% asset_img IMG_0007.JPG  %}\n\n\n\n*“你不知\n这风雪一程\n有太多不易”*\n\n\n\n\n","slug":"Java-8-HashMap（下）—— compute","published":1,"updated":"2018-10-04T07:57:06.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwto000wayqc56sekyr7","content":"<img src=\"/2018/09/24/Java-8-HashMap（下）——%20compute/IMG_0011.JPG\" title=\"故乡的月\">\n<p><em>推荐阅读时间：5分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本篇接上篇 <a href=\"https://jasonsonghoho.github.io/2018/09/24/Java-8-HashMap-%E4%B8%8A-%E2%80%94%E2%80%94-%E7%BA%A2%E9%BB%91%E6%A0%91/\">Java 8 HashMap (上)—— 红黑树</a>，<br>继续探讨 Java8 的HashMap 的新特性。内容不多，重点介绍 compute 方法。</p>\n<h3 id=\"compute\"><a href=\"#compute\" class=\"headerlink\" title=\"compute\"></a>compute</h3><p>compute 方法主要用来将一个复杂计算的结果作为值赋给指定的键。key 指待修改或插入的键，remappingFunction 是一个 BiFunction 对象。<br>BiFunction 是指一个 二元（binary）函数；定义时，指定两个入参字段类型和一个结果字段类型。通过实现 apply 方法来自定义计算逻辑。</p>\n<p>BiFunction 部分源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BiFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Applies this function to the given arguments.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the first function argument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> u the second function argument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the function result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t, U u)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>compute 方法源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(K key, BiFunction&lt;? <span class=\"keyword\">super</span> K, ? <span class=\"keyword\">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remappingFunction == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node&lt;K,V&gt; old = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; threshold || (tab = table) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">//根据 key 值，找到对应的 旧值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((first = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e = first; K k;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                    old = e;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++binCount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    V oldValue = (old == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : old.value;</span><br><span class=\"line\">    <span class=\"comment\">//计算出新值</span></span><br><span class=\"line\">    V v = remappingFunction.apply(key, oldValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            old.value = v;</span><br><span class=\"line\">            afterNodeAccess(old);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//如果新值为 null，删掉这个 Node</span></span><br><span class=\"line\">            removeNode(hash, key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新值不为 null，替换这个 Node</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            t.putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[i] = newNode(hash, key, v, first);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</span><br><span class=\"line\">                treeifyBin(tab, hash);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++modCount;</span><br><span class=\"line\">        ++size;</span><br><span class=\"line\">        afterNodeInsertion(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>computeIfAbsent、computeIfPresent 方法与 compute 类似，分别表示当相应键的值缺席、存在时，才进行 compute 方法。<br>源码与 compute 基本一致，不赘述。</p>\n<p>demo 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k1\"</span>, <span class=\"string\">\"v1\"</span>);</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k2\"</span>, <span class=\"string\">\"v2\"</span>);</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k3\"</span>, <span class=\"string\">\"v3\"</span>);</span><br><span class=\"line\">    Function&lt;String, String&gt; function = <span class=\"keyword\">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"test_\"</span> + s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    BiFunction&lt;String, String, String&gt; biFunction = <span class=\"keyword\">new</span> BiFunction&lt;String, String, String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s, String s2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"test_\"</span> + s + <span class=\"string\">\"_\"</span> + s2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    hashMap.compute(<span class=\"string\">\"k1\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.compute(<span class=\"string\">\"k11\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfAbsent(<span class=\"string\">\"k2\"</span>, function);<span class=\"comment\">//不生效</span></span><br><span class=\"line\">    hashMap.computeIfAbsent(<span class=\"string\">\"k21\"</span>, function);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfPresent(<span class=\"string\">\"k3\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfPresent(<span class=\"string\">\"k31\"</span>, biFunction);<span class=\"comment\">//不生效</span></span><br><span class=\"line\">    System.out.println(hashMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;k1=test_k1_v1, k2=v2, k3=test_k3_v3, k11=test_k11_null, k21=test_k21&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p>merge 方法是根据旧值进行计算，修改相应 Node。与 compute 结构相似，不过 BiFunction 入参为 oldValue,newValue。<br>源码与 compute 基本一致，不赘述。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他新增的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? defaultValue : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e; V v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">        ((v = e.value) == oldValue || (v != <span class=\"keyword\">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class=\"line\">        e.value = newValue;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">replace</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        V oldValue = e.value;</span><br><span class=\"line\">        e.value = value;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>getOrDefault 方法根据 key 获取相应的值，如果为 null，则返回设置的默认值。</li>\n<li>putIfAbsent 方法会在 指定的 key 不存在时，插入相应的值。</li>\n<li>remove(Object key, Object value) 方法会根据 key 和 value 进行删除，如果 相应 key 的值不为该 value，则不执行删除并返回 false。</li>\n<li>replace(K key, V oldValue, V newValue) 与 replace(K key, V value) 都是替换值的操作，具体区别与上述方法类似。</li>\n</ol>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>HashMap历时一个半月，终于告一段落了😂。</p>\n<p>由于在源码分析系列含有大量代码，放在公众号上不方便阅读，后续写的话会发在博客上。有兴趣的欢迎访问 <a href=\"http://jasonsonghoho.github.io\">http://jasonsonghoho.github.io</a> 。</p>\n<hr>\n<img src=\"/2018/09/24/Java-8-HashMap（下）——%20compute/IMG_0007.JPG\">\n<p><em>“你不知<br>这风雪一程<br>有太多不易”</em></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2018/09/24/Java-8-HashMap（下）——%20compute/IMG_0011.JPG\" title=\"故乡的月\">\n<p><em>推荐阅读时间：5分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本篇接上篇 <a href=\"https://jasonsonghoho.github.io/2018/09/24/Java-8-HashMap-%E4%B8%8A-%E2%80%94%E2%80%94-%E7%BA%A2%E9%BB%91%E6%A0%91/\">Java 8 HashMap (上)—— 红黑树</a>，<br>继续探讨 Java8 的HashMap 的新特性。内容不多，重点介绍 compute 方法。</p>\n<h3 id=\"compute\"><a href=\"#compute\" class=\"headerlink\" title=\"compute\"></a>compute</h3><p>compute 方法主要用来将一个复杂计算的结果作为值赋给指定的键。key 指待修改或插入的键，remappingFunction 是一个 BiFunction 对象。<br>BiFunction 是指一个 二元（binary）函数；定义时，指定两个入参字段类型和一个结果字段类型。通过实现 apply 方法来自定义计算逻辑。</p>\n<p>BiFunction 部分源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BiFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Applies this function to the given arguments.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the first function argument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> u the second function argument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the function result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t, U u)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>compute 方法源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(K key, BiFunction&lt;? <span class=\"keyword\">super</span> K, ? <span class=\"keyword\">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remappingFunction == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node&lt;K,V&gt; old = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; threshold || (tab = table) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">//根据 key 值，找到对应的 旧值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((first = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e = first; K k;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                    old = e;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++binCount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    V oldValue = (old == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : old.value;</span><br><span class=\"line\">    <span class=\"comment\">//计算出新值</span></span><br><span class=\"line\">    V v = remappingFunction.apply(key, oldValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            old.value = v;</span><br><span class=\"line\">            afterNodeAccess(old);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//如果新值为 null，删掉这个 Node</span></span><br><span class=\"line\">            removeNode(hash, key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新值不为 null，替换这个 Node</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            t.putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tab[i] = newNode(hash, key, v, first);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</span><br><span class=\"line\">                treeifyBin(tab, hash);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++modCount;</span><br><span class=\"line\">        ++size;</span><br><span class=\"line\">        afterNodeInsertion(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>computeIfAbsent、computeIfPresent 方法与 compute 类似，分别表示当相应键的值缺席、存在时，才进行 compute 方法。<br>源码与 compute 基本一致，不赘述。</p>\n<p>demo 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k1\"</span>, <span class=\"string\">\"v1\"</span>);</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k2\"</span>, <span class=\"string\">\"v2\"</span>);</span><br><span class=\"line\">    hashMap.put(<span class=\"string\">\"k3\"</span>, <span class=\"string\">\"v3\"</span>);</span><br><span class=\"line\">    Function&lt;String, String&gt; function = <span class=\"keyword\">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"test_\"</span> + s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    BiFunction&lt;String, String, String&gt; biFunction = <span class=\"keyword\">new</span> BiFunction&lt;String, String, String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s, String s2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"test_\"</span> + s + <span class=\"string\">\"_\"</span> + s2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    hashMap.compute(<span class=\"string\">\"k1\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.compute(<span class=\"string\">\"k11\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfAbsent(<span class=\"string\">\"k2\"</span>, function);<span class=\"comment\">//不生效</span></span><br><span class=\"line\">    hashMap.computeIfAbsent(<span class=\"string\">\"k21\"</span>, function);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfPresent(<span class=\"string\">\"k3\"</span>, biFunction);<span class=\"comment\">//生效</span></span><br><span class=\"line\">    hashMap.computeIfPresent(<span class=\"string\">\"k31\"</span>, biFunction);<span class=\"comment\">//不生效</span></span><br><span class=\"line\">    System.out.println(hashMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;k1=test_k1_v1, k2=v2, k3=test_k3_v3, k11=test_k11_null, k21=test_k21&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p>merge 方法是根据旧值进行计算，修改相应 Node。与 compute 结构相似，不过 BiFunction 入参为 oldValue,newValue。<br>源码与 compute 基本一致，不赘述。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他新增的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? defaultValue : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e; V v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">        ((v = e.value) == oldValue || (v != <span class=\"keyword\">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class=\"line\">        e.value = newValue;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">replace</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash(key), key)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        V oldValue = e.value;</span><br><span class=\"line\">        e.value = value;</span><br><span class=\"line\">        afterNodeAccess(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>getOrDefault 方法根据 key 获取相应的值，如果为 null，则返回设置的默认值。</li>\n<li>putIfAbsent 方法会在 指定的 key 不存在时，插入相应的值。</li>\n<li>remove(Object key, Object value) 方法会根据 key 和 value 进行删除，如果 相应 key 的值不为该 value，则不执行删除并返回 false。</li>\n<li>replace(K key, V oldValue, V newValue) 与 replace(K key, V value) 都是替换值的操作，具体区别与上述方法类似。</li>\n</ol>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>HashMap历时一个半月，终于告一段落了😂。</p>\n<p>由于在源码分析系列含有大量代码，放在公众号上不方便阅读，后续写的话会发在博客上。有兴趣的欢迎访问 <a href=\"http://jasonsonghoho.github.io\">http://jasonsonghoho.github.io</a> 。</p>\n<hr>\n<img src=\"/2018/09/24/Java-8-HashMap（下）——%20compute/IMG_0007.JPG\">\n<p><em>“你不知<br>这风雪一程<br>有太多不易”</em></p>\n"},{"title":"Linux中的top命令详解","date":"2018-05-20T02:41:23.000Z","_content":"见链接：https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA","source":"_posts/Linux中的top命令详解.md","raw":"---\ntitle: Linux中的top命令详解\ndate: 2018-05-20 10:41:23\ncategories:\n- Linux\ntags:\n- 公众号文章\n- Linux\n---\n见链接：https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA","slug":"Linux中的top命令详解","published":1,"updated":"2018-09-22T02:52:12.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtq000zayqckpoxokvn","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/xyYn6xaahQ4hv1y9MM-7JA</a></p>\n"},{"title":"Linux 的 Cache、Buffer、MemAvailable、Swap简介","date":"2018-05-20T02:40:08.000Z","_content":"见链接：https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g","source":"_posts/Linux-的-Cache、Buffer、MemAvailable、Swap简介.md","raw":"---\ntitle: Linux 的 Cache、Buffer、MemAvailable、Swap简介\ndate: 2018-05-20 10:40:08\ncategories:\n- Linux\ntags:\n- 公众号文章\n- Linux\n\n---\n见链接：https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g","slug":"Linux-的-Cache、Buffer、MemAvailable、Swap简介","published":1,"updated":"2018-09-22T02:52:12.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtr0011ayqc0xj0h05u","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/59oH1hMMXy6YC618gZkm1g</a></p>\n"},{"title":"MySQL究竟如何解决“不可重复读”和“幻读”的","date":"2018-05-26T16:35:44.000Z","_content":"\n见链接：https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ","source":"_posts/MySQL究竟如何解决“不可重复读”和“幻读”的.md","raw":"---\ntitle: MySQL究竟如何解决“不可重复读”和“幻读”的\ndate: 2018-05-27 00:35:44\ncategories:\n- 数据库\ntags:\n- 公众号文章\n- mysql\n---\n\n见链接：https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ","slug":"MySQL究竟如何解决“不可重复读”和“幻读”的","published":1,"updated":"2018-09-22T02:30:44.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwts0013ayqcgzmbwr2j","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/Ej3coEuouPqbzkL0-J8tIQ</a></p>\n"},{"title":"React快速入门","date":"2018-06-24T02:34:27.000Z","_content":"见链接：https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ","source":"_posts/React快速入门.md","raw":"---\ntitle: React快速入门\ndate: 2018-06-24 10:34:27\ncategories:\n- 前端\ntags:\n- 公众号文章\n- React\n\n---\n见链接：https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ","slug":"React快速入门","published":1,"updated":"2018-09-22T02:52:12.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtt0016ayqcfpzl3ack","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/fDXQe_QCBN4q6zfzKQr1jQ</a></p>\n"},{"title":"volatile、CAS、synchronized、ReentrantLock 简介","date":"2018-11-24T04:23:02.000Z","_content":"\n\n*推荐阅读时间：10分钟*\n\n### 简介\nvolatile、CAS、synchronized、ReentrantLock 都是多线程中需要理解的重要知识，本文把它们放一起对比下，做个简单的介绍，为后面分析concurrent包源码打好基础。\n其中 volatile 和 CAS 是用来保证对变量的操作的线程安全性，synchronized 和 Lock 是用来保证多个操作的线程安全性。\n\n### 一个实验\n我们先通过一个小实验来简单了解下他们的使用方法和区别。\n\n```\npublic class AtomicLab {\n    private static final int LOOP_TIME = 500;\n    private static final Object LOCK = new Object();\n    private static Integer availableProcessors = Runtime.getRuntime().availableProcessors();\n    private static Lock lock = new ReentrantLock();\n\n    private static Integer i0 = 0;\n    private static volatile Integer i1 = 0;\n    private static Integer i2 = 0;\n    private static AtomicInteger i3 = new AtomicInteger();\n    private static Integer i4 = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"jasonLab-%d\").build();\n        ExecutorService service = new ThreadPoolExecutor(availableProcessors + 1, availableProcessors * 2,\n                60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(5000), threadFactory);\n        for (int i = 0; i < 100; i++) {\n            service.execute(new TestThread0());\n            service.execute(new TestThread1());\n            service.execute(new TestThread2());\n            service.execute(new TestThread3());\n            service.execute(new TestThread4());\n        }\n        Thread.sleep(1000L);\n        System.out.println(\"i0 result is \" + i0 + \" , equal 50000 : \" + (i0 == 50000));\n        System.out.println(\"i1 result is \" + i1 + \" , equal 50000 : \" + (i1 == 50000));\n        System.out.println(\"i2 result is \" + i2 + \" , equal 50000 : \" + (i2 == 50000));\n        System.out.println(\"i3 result is \" + i3 + \" , equal 50000 : \" + (i3.get() == 50000));\n        System.out.println(\"i4 result is \" + i4 + \" , equal 50000 : \" + (i4 == 50000));\n\n        service.shutdown();\n    }\n\n    static class TestThread0 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i0 += 1;\n            }\n        }\n    }\n\n    static class TestThread1 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i1++;\n            }\n        }\n    }\n\n    static class TestThread2 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                synchronized (LOCK) {\n                    i2 += 1;\n                }\n            }\n        }\n    }\n\n    static class TestThread3 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i3.getAndAdd(1);\n            }\n        }\n    }\n\n    static class TestThread4 implements Runnable {\n\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                for (int i = 0; i < LOOP_TIME; i++) {\n                    i4++;\n                }\n            } finally {\n                lock.unlock();\n            }\n\n        }\n    }\n}\n```\n\n运行上述 main 方法，一个可能的结果如下：\n```\ni0 result is 48646 , equal 50000 : false\ni1 result is 48509 , equal 50000 : false\ni2 result is 50000 , equal 50000 : true\ni3 result is 50000 , equal 50000 : true\ni4 result is 50000 , equal 50000 : true\n\n```\n\n上述实验是计算 100 个线程同时对同一个 i 进行`i++`操作的累加结果。\n我们知道，`i++`操作其实分：读（getI()）、改（i=i+1）、写（setI(i)）三步进行的。\n对于 i0，这三个操作都不具备原子性保证，所以多线程下难免会发生数据丢失的问题。而至于i1-i4，其实分别用到了标题中的四个知识点，我们依次介绍下它们。\n\n### volatile\ni1 被 volatile 修饰，它是 Java 中的关键字，它修饰的变量具有可见性和原子性的特点。\n#### 可见性和原子性\n可见性：如果一个变量具有可见性，可以理解为任意时刻得到的都是该变量的最新值。\n原子性：指对该变量的操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。\n\n#### volatile 实现原理\nvolatile 修饰的变量在进行操作时，会在汇编代码中加上 `Lock` 前缀，这将导致两件事情：\n1. 所有处理器不会在本地内存中记录该变量，而是直接写到共享内存中。\n2. 所有处理器在读取该变量时，都直接从共享内存中读取。\n\n#### 结果分析\n根据实现原理，我们可以得知：**对 volatile 变量的读或写都可以保证原子性**。也就是上面的第一步和第三步是原子性的操作，但是第二步修改操作时却不能保证。\n当一个线程执行修改操作时，其他线程可能已经执行过写入操作了，所以当该线程执行写入操作时，就覆盖了前面的写入操作，导致数据丢失。\n\n### CAS\n我们先看下 i3，可以看到它使用了原子更新整型：`AtomicInteger`，我们在进行累加时，使用了它的`getAndAdd()`方法。\n这个方法其实最终调用了`Unsafe.compareAndSwapInt()`方法，这是个 native 方法，依赖 CAS（CompareAndSwap）原理实现。\n\n#### CAS 实现原理\nCAS 的实现使用了处理器提供的 `CMPXCHG`指令，这个指令也带有`Lock`前缀，在进行 CAS 操作时，会锁住相应的内存区域，其他不能操作相应内存区域的线程在外面循环进行尝试，实现多线程原子性。\n进行 CAS 时，需要对三个值进行操作：现在的值、预期的值、要替换的值。只有当预期的值和当前值一致时，才会进行修改。\n\n#### ABA问题\nCAS 操作可能会出现这样的问题：变量的值原来是A，被其他线程修改为了B，后来又被修改回A，当该线程进行CAS操作时，发现预期值与当前值一致，进行了修改。而其实变量已经被修改过了，这样就可能会导致其他的问题。JDK1.5开始，提供了`AtomicStampedReference`类来解决这个问题，变量会加一个类似乐观锁的版本号：1A-2B-3A。这样就可以准确的判断变量是否被修改过了。\n\n#### 结果分析\n根据原理，我们可以得知针对 i3 的每次修改都是原子性的，没啥好说的～\nsynchronized 和 ReentrantLock 也不再进行结果分析。\n\n#### 延伸\nvolatile 和 CAS 在 Java 中举足轻重。借一张图表示 Java concurrent 包的实现。\n\n{% asset_img concurrent包.png concurrent 包实现  %}\n\n### synchronized\n\nsynchronized 是 Java 提供的一个关键字，用来锁住一个对象，被锁的对象任意时刻只能被一个线程访问（同一个线程可以加多个锁进行重复访问）。\nsynchronized 修饰不同的地方，加的锁的类型也不一样：\n1. 修饰非静态方法，锁的是该方法所在的实例对象。\n2. 修饰静态方法，锁的是该类的类对象。\n3. 修饰代码块时，锁的是所指定的对象。\n\n\n#### 实现原理\n任何一个对象都有一个 monitor 与之关联，当 monitor 被持有后，它就将处于锁定状态。synchronized 就是通过获取和释放 monitor 实现的。\n\n{% asset_img synchronized.png synchronized（重量级锁）原理%}\n\n#### 锁状态\n大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，Java6 开始，引入了`偏向锁`和`轻量级`锁的概念。\n##### 偏向锁\n获取到锁后，锁默认处于`偏向锁`状态，在锁对象的对象头中储存一个线程ID，当下次该线程尝试获取该锁时，不需要进行循环CAS取锁，只需要检测偏向锁的线程ID是否与之一致即可。\n当多个线程对同一个锁竞争激烈时，偏向锁会升级为`轻量级锁`。\n##### 轻量级锁\n加锁：\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的 Mark Word 复制到锁记录中，官方称为 Displaced Mark Word。\n然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。\n解锁：\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。\n\n轻量级锁能提高程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，\n但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。\n\n### ReentrantLock\nReentrantLock 实现了 Lock 接口，也是 JDK 中该接口的唯一实现。Lock 接口是在Java5新增的，提供了与 synchronized 相似的功能。\n\n#### 与 synchronized 的区别\n1. `ReentrantLock`可以显示的进行加锁和解锁。\n2. `ReentrantLock`可中断的获取锁。\n3. `ReentrantLock`可以提供公平锁。\n4. `ReentrantLock`可以提供超时等待机制。\n\n#### 实现原理\nReentrantLock 的实现依赖于 AbstractQueueSynchronizer(AQS),它是实现锁或其他同步组件的基础框架。\nAQS 内部维护了一个同步状态变量和一个同步队列，获取到该同步状态的线程视为获取到锁；获取失败的线程连同它的等待状态信息会被构造成加入到同步队列中，并阻塞它。\n当同步状态被释放时，同步队列中的首节点会被唤醒尝试去获取同步状态。\n\n#### 读写锁\n如果一段代码中大部分时间都在执行读操作，多个读操作同时进行不会影响线程安全性，这时前面提到的独占锁明显会影响多线程的读取性能。\n`ReentrantReadWriteLock`是一个读写锁，多个获取了读锁之间的线程可以同步执行；而写锁不可以和读/写锁同步执行。\n读写锁锁降级：一个线程在获取了写锁后，有获取了读锁，在释放写锁后，就变成了只获取了读锁，即锁降级。\n\n#### Condition\nReentrantLock 使用 Condition 的 `await()`、`signal()`、`signalAll()`方法分别代替 Object 的`wait()`、`notify()`、`notifyAll()` 方法。\n\n\n### 结语\n以上是关于这四者的简单介绍，为了后面的系列内容做下铺垫，想要了解详情可以参考更多书籍、资料。\n\n\n*********************\n{% asset_img img-6806f.gif %}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/volatile、CAS、synchronized、ReentrantLock-简介.md","raw":"---\ntitle: volatile、CAS、synchronized、ReentrantLock 简介\ndate: 2018-11-24 12:23:02\ncategories:\n- Java\ntags:\n- 多线程\n- volatile\n- CAS\n- synchronized\n- ReentrantLock\n---\n\n\n*推荐阅读时间：10分钟*\n\n### 简介\nvolatile、CAS、synchronized、ReentrantLock 都是多线程中需要理解的重要知识，本文把它们放一起对比下，做个简单的介绍，为后面分析concurrent包源码打好基础。\n其中 volatile 和 CAS 是用来保证对变量的操作的线程安全性，synchronized 和 Lock 是用来保证多个操作的线程安全性。\n\n### 一个实验\n我们先通过一个小实验来简单了解下他们的使用方法和区别。\n\n```\npublic class AtomicLab {\n    private static final int LOOP_TIME = 500;\n    private static final Object LOCK = new Object();\n    private static Integer availableProcessors = Runtime.getRuntime().availableProcessors();\n    private static Lock lock = new ReentrantLock();\n\n    private static Integer i0 = 0;\n    private static volatile Integer i1 = 0;\n    private static Integer i2 = 0;\n    private static AtomicInteger i3 = new AtomicInteger();\n    private static Integer i4 = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"jasonLab-%d\").build();\n        ExecutorService service = new ThreadPoolExecutor(availableProcessors + 1, availableProcessors * 2,\n                60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(5000), threadFactory);\n        for (int i = 0; i < 100; i++) {\n            service.execute(new TestThread0());\n            service.execute(new TestThread1());\n            service.execute(new TestThread2());\n            service.execute(new TestThread3());\n            service.execute(new TestThread4());\n        }\n        Thread.sleep(1000L);\n        System.out.println(\"i0 result is \" + i0 + \" , equal 50000 : \" + (i0 == 50000));\n        System.out.println(\"i1 result is \" + i1 + \" , equal 50000 : \" + (i1 == 50000));\n        System.out.println(\"i2 result is \" + i2 + \" , equal 50000 : \" + (i2 == 50000));\n        System.out.println(\"i3 result is \" + i3 + \" , equal 50000 : \" + (i3.get() == 50000));\n        System.out.println(\"i4 result is \" + i4 + \" , equal 50000 : \" + (i4 == 50000));\n\n        service.shutdown();\n    }\n\n    static class TestThread0 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i0 += 1;\n            }\n        }\n    }\n\n    static class TestThread1 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i1++;\n            }\n        }\n    }\n\n    static class TestThread2 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                synchronized (LOCK) {\n                    i2 += 1;\n                }\n            }\n        }\n    }\n\n    static class TestThread3 implements Runnable {\n\n        @Override\n        public void run() {\n            for (int i = 0; i < LOOP_TIME; i++) {\n                i3.getAndAdd(1);\n            }\n        }\n    }\n\n    static class TestThread4 implements Runnable {\n\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                for (int i = 0; i < LOOP_TIME; i++) {\n                    i4++;\n                }\n            } finally {\n                lock.unlock();\n            }\n\n        }\n    }\n}\n```\n\n运行上述 main 方法，一个可能的结果如下：\n```\ni0 result is 48646 , equal 50000 : false\ni1 result is 48509 , equal 50000 : false\ni2 result is 50000 , equal 50000 : true\ni3 result is 50000 , equal 50000 : true\ni4 result is 50000 , equal 50000 : true\n\n```\n\n上述实验是计算 100 个线程同时对同一个 i 进行`i++`操作的累加结果。\n我们知道，`i++`操作其实分：读（getI()）、改（i=i+1）、写（setI(i)）三步进行的。\n对于 i0，这三个操作都不具备原子性保证，所以多线程下难免会发生数据丢失的问题。而至于i1-i4，其实分别用到了标题中的四个知识点，我们依次介绍下它们。\n\n### volatile\ni1 被 volatile 修饰，它是 Java 中的关键字，它修饰的变量具有可见性和原子性的特点。\n#### 可见性和原子性\n可见性：如果一个变量具有可见性，可以理解为任意时刻得到的都是该变量的最新值。\n原子性：指对该变量的操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。\n\n#### volatile 实现原理\nvolatile 修饰的变量在进行操作时，会在汇编代码中加上 `Lock` 前缀，这将导致两件事情：\n1. 所有处理器不会在本地内存中记录该变量，而是直接写到共享内存中。\n2. 所有处理器在读取该变量时，都直接从共享内存中读取。\n\n#### 结果分析\n根据实现原理，我们可以得知：**对 volatile 变量的读或写都可以保证原子性**。也就是上面的第一步和第三步是原子性的操作，但是第二步修改操作时却不能保证。\n当一个线程执行修改操作时，其他线程可能已经执行过写入操作了，所以当该线程执行写入操作时，就覆盖了前面的写入操作，导致数据丢失。\n\n### CAS\n我们先看下 i3，可以看到它使用了原子更新整型：`AtomicInteger`，我们在进行累加时，使用了它的`getAndAdd()`方法。\n这个方法其实最终调用了`Unsafe.compareAndSwapInt()`方法，这是个 native 方法，依赖 CAS（CompareAndSwap）原理实现。\n\n#### CAS 实现原理\nCAS 的实现使用了处理器提供的 `CMPXCHG`指令，这个指令也带有`Lock`前缀，在进行 CAS 操作时，会锁住相应的内存区域，其他不能操作相应内存区域的线程在外面循环进行尝试，实现多线程原子性。\n进行 CAS 时，需要对三个值进行操作：现在的值、预期的值、要替换的值。只有当预期的值和当前值一致时，才会进行修改。\n\n#### ABA问题\nCAS 操作可能会出现这样的问题：变量的值原来是A，被其他线程修改为了B，后来又被修改回A，当该线程进行CAS操作时，发现预期值与当前值一致，进行了修改。而其实变量已经被修改过了，这样就可能会导致其他的问题。JDK1.5开始，提供了`AtomicStampedReference`类来解决这个问题，变量会加一个类似乐观锁的版本号：1A-2B-3A。这样就可以准确的判断变量是否被修改过了。\n\n#### 结果分析\n根据原理，我们可以得知针对 i3 的每次修改都是原子性的，没啥好说的～\nsynchronized 和 ReentrantLock 也不再进行结果分析。\n\n#### 延伸\nvolatile 和 CAS 在 Java 中举足轻重。借一张图表示 Java concurrent 包的实现。\n\n{% asset_img concurrent包.png concurrent 包实现  %}\n\n### synchronized\n\nsynchronized 是 Java 提供的一个关键字，用来锁住一个对象，被锁的对象任意时刻只能被一个线程访问（同一个线程可以加多个锁进行重复访问）。\nsynchronized 修饰不同的地方，加的锁的类型也不一样：\n1. 修饰非静态方法，锁的是该方法所在的实例对象。\n2. 修饰静态方法，锁的是该类的类对象。\n3. 修饰代码块时，锁的是所指定的对象。\n\n\n#### 实现原理\n任何一个对象都有一个 monitor 与之关联，当 monitor 被持有后，它就将处于锁定状态。synchronized 就是通过获取和释放 monitor 实现的。\n\n{% asset_img synchronized.png synchronized（重量级锁）原理%}\n\n#### 锁状态\n大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，Java6 开始，引入了`偏向锁`和`轻量级`锁的概念。\n##### 偏向锁\n获取到锁后，锁默认处于`偏向锁`状态，在锁对象的对象头中储存一个线程ID，当下次该线程尝试获取该锁时，不需要进行循环CAS取锁，只需要检测偏向锁的线程ID是否与之一致即可。\n当多个线程对同一个锁竞争激烈时，偏向锁会升级为`轻量级锁`。\n##### 轻量级锁\n加锁：\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的 Mark Word 复制到锁记录中，官方称为 Displaced Mark Word。\n然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。\n解锁：\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。\n\n轻量级锁能提高程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，\n但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。\n\n### ReentrantLock\nReentrantLock 实现了 Lock 接口，也是 JDK 中该接口的唯一实现。Lock 接口是在Java5新增的，提供了与 synchronized 相似的功能。\n\n#### 与 synchronized 的区别\n1. `ReentrantLock`可以显示的进行加锁和解锁。\n2. `ReentrantLock`可中断的获取锁。\n3. `ReentrantLock`可以提供公平锁。\n4. `ReentrantLock`可以提供超时等待机制。\n\n#### 实现原理\nReentrantLock 的实现依赖于 AbstractQueueSynchronizer(AQS),它是实现锁或其他同步组件的基础框架。\nAQS 内部维护了一个同步状态变量和一个同步队列，获取到该同步状态的线程视为获取到锁；获取失败的线程连同它的等待状态信息会被构造成加入到同步队列中，并阻塞它。\n当同步状态被释放时，同步队列中的首节点会被唤醒尝试去获取同步状态。\n\n#### 读写锁\n如果一段代码中大部分时间都在执行读操作，多个读操作同时进行不会影响线程安全性，这时前面提到的独占锁明显会影响多线程的读取性能。\n`ReentrantReadWriteLock`是一个读写锁，多个获取了读锁之间的线程可以同步执行；而写锁不可以和读/写锁同步执行。\n读写锁锁降级：一个线程在获取了写锁后，有获取了读锁，在释放写锁后，就变成了只获取了读锁，即锁降级。\n\n#### Condition\nReentrantLock 使用 Condition 的 `await()`、`signal()`、`signalAll()`方法分别代替 Object 的`wait()`、`notify()`、`notifyAll()` 方法。\n\n\n### 结语\n以上是关于这四者的简单介绍，为了后面的系列内容做下铺垫，想要了解详情可以参考更多书籍、资料。\n\n\n*********************\n{% asset_img img-6806f.gif %}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"volatile、CAS、synchronized、ReentrantLock-简介","published":1,"updated":"2018-11-24T14:58:22.826Z","_id":"cjovkdwtu0017ayqcf3x1yc4c","comments":1,"layout":"post","photos":[],"link":"","content":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>volatile、CAS、synchronized、ReentrantLock 都是多线程中需要理解的重要知识，本文把它们放一起对比下，做个简单的介绍，为后面分析concurrent包源码打好基础。<br>其中 volatile 和 CAS 是用来保证对变量的操作的线程安全性，synchronized 和 Lock 是用来保证多个操作的线程安全性。</p>\n<h3 id=\"一个实验\"><a href=\"#一个实验\" class=\"headerlink\" title=\"一个实验\"></a>一个实验</h3><p>我们先通过一个小实验来简单了解下他们的使用方法和区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AtomicLab &#123;</span><br><span class=\"line\">    private static final int LOOP_TIME = 500;</span><br><span class=\"line\">    private static final Object LOCK = new Object();</span><br><span class=\"line\">    private static Integer availableProcessors = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    private static Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Integer i0 = 0;</span><br><span class=\"line\">    private static volatile Integer i1 = 0;</span><br><span class=\"line\">    private static Integer i2 = 0;</span><br><span class=\"line\">    private static AtomicInteger i3 = new AtomicInteger();</span><br><span class=\"line\">    private static Integer i4 = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&quot;jasonLab-%d&quot;).build();</span><br><span class=\"line\">        ExecutorService service = new ThreadPoolExecutor(availableProcessors + 1, availableProcessors * 2,</span><br><span class=\"line\">                60L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(5000), threadFactory);</span><br><span class=\"line\">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">            service.execute(new TestThread0());</span><br><span class=\"line\">            service.execute(new TestThread1());</span><br><span class=\"line\">            service.execute(new TestThread2());</span><br><span class=\"line\">            service.execute(new TestThread3());</span><br><span class=\"line\">            service.execute(new TestThread4());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Thread.sleep(1000L);</span><br><span class=\"line\">        System.out.println(&quot;i0 result is &quot; + i0 + &quot; , equal 50000 : &quot; + (i0 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i1 result is &quot; + i1 + &quot; , equal 50000 : &quot; + (i1 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i2 result is &quot; + i2 + &quot; , equal 50000 : &quot; + (i2 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i3 result is &quot; + i3 + &quot; , equal 50000 : &quot; + (i3.get() == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i4 result is &quot; + i4 + &quot; , equal 50000 : &quot; + (i4 == 50000));</span><br><span class=\"line\"></span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread0 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i0 += 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread1 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread2 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                synchronized (LOCK) &#123;</span><br><span class=\"line\">                    i2 += 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread3 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i3.getAndAdd(1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread4 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                    i4++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上述 main 方法，一个可能的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i0 result is 48646 , equal 50000 : false</span><br><span class=\"line\">i1 result is 48509 , equal 50000 : false</span><br><span class=\"line\">i2 result is 50000 , equal 50000 : true</span><br><span class=\"line\">i3 result is 50000 , equal 50000 : true</span><br><span class=\"line\">i4 result is 50000 , equal 50000 : true</span><br></pre></td></tr></table></figure></p>\n<p>上述实验是计算 100 个线程同时对同一个 i 进行<code>i++</code>操作的累加结果。<br>我们知道，<code>i++</code>操作其实分：读（getI()）、改（i=i+1）、写（setI(i)）三步进行的。<br>对于 i0，这三个操作都不具备原子性保证，所以多线程下难免会发生数据丢失的问题。而至于i1-i4，其实分别用到了标题中的四个知识点，我们依次介绍下它们。</p>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>i1 被 volatile 修饰，它是 Java 中的关键字，它修饰的变量具有可见性和原子性的特点。</p>\n<h4 id=\"可见性和原子性\"><a href=\"#可见性和原子性\" class=\"headerlink\" title=\"可见性和原子性\"></a>可见性和原子性</h4><p>可见性：如果一个变量具有可见性，可以理解为任意时刻得到的都是该变量的最新值。<br>原子性：指对该变量的操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。</p>\n<h4 id=\"volatile-实现原理\"><a href=\"#volatile-实现原理\" class=\"headerlink\" title=\"volatile 实现原理\"></a>volatile 实现原理</h4><p>volatile 修饰的变量在进行操作时，会在汇编代码中加上 <code>Lock</code> 前缀，这将导致两件事情：</p>\n<ol>\n<li>所有处理器不会在本地内存中记录该变量，而是直接写到共享内存中。</li>\n<li>所有处理器在读取该变量时，都直接从共享内存中读取。</li>\n</ol>\n<h4 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><p>根据实现原理，我们可以得知：<strong>对 volatile 变量的读或写都可以保证原子性</strong>。也就是上面的第一步和第三步是原子性的操作，但是第二步修改操作时却不能保证。<br>当一个线程执行修改操作时，其他线程可能已经执行过写入操作了，所以当该线程执行写入操作时，就覆盖了前面的写入操作，导致数据丢失。</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>我们先看下 i3，可以看到它使用了原子更新整型：<code>AtomicInteger</code>，我们在进行累加时，使用了它的<code>getAndAdd()</code>方法。<br>这个方法其实最终调用了<code>Unsafe.compareAndSwapInt()</code>方法，这是个 native 方法，依赖 CAS（CompareAndSwap）原理实现。</p>\n<h4 id=\"CAS-实现原理\"><a href=\"#CAS-实现原理\" class=\"headerlink\" title=\"CAS 实现原理\"></a>CAS 实现原理</h4><p>CAS 的实现使用了处理器提供的 <code>CMPXCHG</code>指令，这个指令也带有<code>Lock</code>前缀，在进行 CAS 操作时，会锁住相应的内存区域，其他不能操作相应内存区域的线程在外面循环进行尝试，实现多线程原子性。<br>进行 CAS 时，需要对三个值进行操作：现在的值、预期的值、要替换的值。只有当预期的值和当前值一致时，才会进行修改。</p>\n<h4 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h4><p>CAS 操作可能会出现这样的问题：变量的值原来是A，被其他线程修改为了B，后来又被修改回A，当该线程进行CAS操作时，发现预期值与当前值一致，进行了修改。而其实变量已经被修改过了，这样就可能会导致其他的问题。JDK1.5开始，提供了<code>AtomicStampedReference</code>类来解决这个问题，变量会加一个类似乐观锁的版本号：1A-2B-3A。这样就可以准确的判断变量是否被修改过了。</p>\n<h4 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><p>根据原理，我们可以得知针对 i3 的每次修改都是原子性的，没啥好说的～<br>synchronized 和 ReentrantLock 也不再进行结果分析。</p>\n<h4 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h4><p>volatile 和 CAS 在 Java 中举足轻重。借一张图表示 Java concurrent 包的实现。</p>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/concurrent包.png\" title=\"concurrent 包实现\">\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 是 Java 提供的一个关键字，用来锁住一个对象，被锁的对象任意时刻只能被一个线程访问（同一个线程可以加多个锁进行重复访问）。<br>synchronized 修饰不同的地方，加的锁的类型也不一样：</p>\n<ol>\n<li>修饰非静态方法，锁的是该方法所在的实例对象。</li>\n<li>修饰静态方法，锁的是该类的类对象。</li>\n<li>修饰代码块时，锁的是所指定的对象。</li>\n</ol>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>任何一个对象都有一个 monitor 与之关联，当 monitor 被持有后，它就将处于锁定状态。synchronized 就是通过获取和释放 monitor 实现的。</p>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/synchronized.png\" title=\"synchronized（重量级锁）原理\">\n<h4 id=\"锁状态\"><a href=\"#锁状态\" class=\"headerlink\" title=\"锁状态\"></a>锁状态</h4><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，Java6 开始，引入了<code>偏向锁</code>和<code>轻量级</code>锁的概念。</p>\n<h5 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h5><p>获取到锁后，锁默认处于<code>偏向锁</code>状态，在锁对象的对象头中储存一个线程ID，当下次该线程尝试获取该锁时，不需要进行循环CAS取锁，只需要检测偏向锁的线程ID是否与之一致即可。<br>当多个线程对同一个锁竞争激烈时，偏向锁会升级为<code>轻量级锁</code>。</p>\n<h5 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h5><p>加锁：<br>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的 Mark Word 复制到锁记录中，官方称为 Displaced Mark Word。<br>然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。<br>解锁：<br>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p>\n<p>轻量级锁能提高程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，<br>但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock 实现了 Lock 接口，也是 JDK 中该接口的唯一实现。Lock 接口是在Java5新增的，提供了与 synchronized 相似的功能。</p>\n<h4 id=\"与-synchronized-的区别\"><a href=\"#与-synchronized-的区别\" class=\"headerlink\" title=\"与 synchronized 的区别\"></a>与 synchronized 的区别</h4><ol>\n<li><code>ReentrantLock</code>可以显示的进行加锁和解锁。</li>\n<li><code>ReentrantLock</code>可中断的获取锁。</li>\n<li><code>ReentrantLock</code>可以提供公平锁。</li>\n<li><code>ReentrantLock</code>可以提供超时等待机制。</li>\n</ol>\n<h4 id=\"实现原理-1\"><a href=\"#实现原理-1\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>ReentrantLock 的实现依赖于 AbstractQueueSynchronizer(AQS),它是实现锁或其他同步组件的基础框架。<br>AQS 内部维护了一个同步状态变量和一个同步队列，获取到该同步状态的线程视为获取到锁；获取失败的线程连同它的等待状态信息会被构造成加入到同步队列中，并阻塞它。<br>当同步状态被释放时，同步队列中的首节点会被唤醒尝试去获取同步状态。</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><p>如果一段代码中大部分时间都在执行读操作，多个读操作同时进行不会影响线程安全性，这时前面提到的独占锁明显会影响多线程的读取性能。<br><code>ReentrantReadWriteLock</code>是一个读写锁，多个获取了读锁之间的线程可以同步执行；而写锁不可以和读/写锁同步执行。<br>读写锁锁降级：一个线程在获取了写锁后，有获取了读锁，在释放写锁后，就变成了只获取了读锁，即锁降级。</p>\n<h4 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h4><p>ReentrantLock 使用 Condition 的 <code>await()</code>、<code>signal()</code>、<code>signalAll()</code>方法分别代替 Object 的<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 方法。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>以上是关于这四者的简单介绍，为了后面的系列内容做下铺垫，想要了解详情可以参考更多书籍、资料。</p>\n<hr>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/img-6806f.gif\">\n","site":{"data":{}},"excerpt":"","more":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>volatile、CAS、synchronized、ReentrantLock 都是多线程中需要理解的重要知识，本文把它们放一起对比下，做个简单的介绍，为后面分析concurrent包源码打好基础。<br>其中 volatile 和 CAS 是用来保证对变量的操作的线程安全性，synchronized 和 Lock 是用来保证多个操作的线程安全性。</p>\n<h3 id=\"一个实验\"><a href=\"#一个实验\" class=\"headerlink\" title=\"一个实验\"></a>一个实验</h3><p>我们先通过一个小实验来简单了解下他们的使用方法和区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AtomicLab &#123;</span><br><span class=\"line\">    private static final int LOOP_TIME = 500;</span><br><span class=\"line\">    private static final Object LOCK = new Object();</span><br><span class=\"line\">    private static Integer availableProcessors = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    private static Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Integer i0 = 0;</span><br><span class=\"line\">    private static volatile Integer i1 = 0;</span><br><span class=\"line\">    private static Integer i2 = 0;</span><br><span class=\"line\">    private static AtomicInteger i3 = new AtomicInteger();</span><br><span class=\"line\">    private static Integer i4 = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(&quot;jasonLab-%d&quot;).build();</span><br><span class=\"line\">        ExecutorService service = new ThreadPoolExecutor(availableProcessors + 1, availableProcessors * 2,</span><br><span class=\"line\">                60L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(5000), threadFactory);</span><br><span class=\"line\">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">            service.execute(new TestThread0());</span><br><span class=\"line\">            service.execute(new TestThread1());</span><br><span class=\"line\">            service.execute(new TestThread2());</span><br><span class=\"line\">            service.execute(new TestThread3());</span><br><span class=\"line\">            service.execute(new TestThread4());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Thread.sleep(1000L);</span><br><span class=\"line\">        System.out.println(&quot;i0 result is &quot; + i0 + &quot; , equal 50000 : &quot; + (i0 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i1 result is &quot; + i1 + &quot; , equal 50000 : &quot; + (i1 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i2 result is &quot; + i2 + &quot; , equal 50000 : &quot; + (i2 == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i3 result is &quot; + i3 + &quot; , equal 50000 : &quot; + (i3.get() == 50000));</span><br><span class=\"line\">        System.out.println(&quot;i4 result is &quot; + i4 + &quot; , equal 50000 : &quot; + (i4 == 50000));</span><br><span class=\"line\"></span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread0 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i0 += 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread1 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread2 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                synchronized (LOCK) &#123;</span><br><span class=\"line\">                    i2 += 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread3 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                i3.getAndAdd(1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class TestThread4 implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; LOOP_TIME; i++) &#123;</span><br><span class=\"line\">                    i4++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上述 main 方法，一个可能的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i0 result is 48646 , equal 50000 : false</span><br><span class=\"line\">i1 result is 48509 , equal 50000 : false</span><br><span class=\"line\">i2 result is 50000 , equal 50000 : true</span><br><span class=\"line\">i3 result is 50000 , equal 50000 : true</span><br><span class=\"line\">i4 result is 50000 , equal 50000 : true</span><br></pre></td></tr></table></figure></p>\n<p>上述实验是计算 100 个线程同时对同一个 i 进行<code>i++</code>操作的累加结果。<br>我们知道，<code>i++</code>操作其实分：读（getI()）、改（i=i+1）、写（setI(i)）三步进行的。<br>对于 i0，这三个操作都不具备原子性保证，所以多线程下难免会发生数据丢失的问题。而至于i1-i4，其实分别用到了标题中的四个知识点，我们依次介绍下它们。</p>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>i1 被 volatile 修饰，它是 Java 中的关键字，它修饰的变量具有可见性和原子性的特点。</p>\n<h4 id=\"可见性和原子性\"><a href=\"#可见性和原子性\" class=\"headerlink\" title=\"可见性和原子性\"></a>可见性和原子性</h4><p>可见性：如果一个变量具有可见性，可以理解为任意时刻得到的都是该变量的最新值。<br>原子性：指对该变量的操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。</p>\n<h4 id=\"volatile-实现原理\"><a href=\"#volatile-实现原理\" class=\"headerlink\" title=\"volatile 实现原理\"></a>volatile 实现原理</h4><p>volatile 修饰的变量在进行操作时，会在汇编代码中加上 <code>Lock</code> 前缀，这将导致两件事情：</p>\n<ol>\n<li>所有处理器不会在本地内存中记录该变量，而是直接写到共享内存中。</li>\n<li>所有处理器在读取该变量时，都直接从共享内存中读取。</li>\n</ol>\n<h4 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><p>根据实现原理，我们可以得知：<strong>对 volatile 变量的读或写都可以保证原子性</strong>。也就是上面的第一步和第三步是原子性的操作，但是第二步修改操作时却不能保证。<br>当一个线程执行修改操作时，其他线程可能已经执行过写入操作了，所以当该线程执行写入操作时，就覆盖了前面的写入操作，导致数据丢失。</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>我们先看下 i3，可以看到它使用了原子更新整型：<code>AtomicInteger</code>，我们在进行累加时，使用了它的<code>getAndAdd()</code>方法。<br>这个方法其实最终调用了<code>Unsafe.compareAndSwapInt()</code>方法，这是个 native 方法，依赖 CAS（CompareAndSwap）原理实现。</p>\n<h4 id=\"CAS-实现原理\"><a href=\"#CAS-实现原理\" class=\"headerlink\" title=\"CAS 实现原理\"></a>CAS 实现原理</h4><p>CAS 的实现使用了处理器提供的 <code>CMPXCHG</code>指令，这个指令也带有<code>Lock</code>前缀，在进行 CAS 操作时，会锁住相应的内存区域，其他不能操作相应内存区域的线程在外面循环进行尝试，实现多线程原子性。<br>进行 CAS 时，需要对三个值进行操作：现在的值、预期的值、要替换的值。只有当预期的值和当前值一致时，才会进行修改。</p>\n<h4 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h4><p>CAS 操作可能会出现这样的问题：变量的值原来是A，被其他线程修改为了B，后来又被修改回A，当该线程进行CAS操作时，发现预期值与当前值一致，进行了修改。而其实变量已经被修改过了，这样就可能会导致其他的问题。JDK1.5开始，提供了<code>AtomicStampedReference</code>类来解决这个问题，变量会加一个类似乐观锁的版本号：1A-2B-3A。这样就可以准确的判断变量是否被修改过了。</p>\n<h4 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><p>根据原理，我们可以得知针对 i3 的每次修改都是原子性的，没啥好说的～<br>synchronized 和 ReentrantLock 也不再进行结果分析。</p>\n<h4 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h4><p>volatile 和 CAS 在 Java 中举足轻重。借一张图表示 Java concurrent 包的实现。</p>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/concurrent包.png\" title=\"concurrent 包实现\">\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 是 Java 提供的一个关键字，用来锁住一个对象，被锁的对象任意时刻只能被一个线程访问（同一个线程可以加多个锁进行重复访问）。<br>synchronized 修饰不同的地方，加的锁的类型也不一样：</p>\n<ol>\n<li>修饰非静态方法，锁的是该方法所在的实例对象。</li>\n<li>修饰静态方法，锁的是该类的类对象。</li>\n<li>修饰代码块时，锁的是所指定的对象。</li>\n</ol>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>任何一个对象都有一个 monitor 与之关联，当 monitor 被持有后，它就将处于锁定状态。synchronized 就是通过获取和释放 monitor 实现的。</p>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/synchronized.png\" title=\"synchronized（重量级锁）原理\">\n<h4 id=\"锁状态\"><a href=\"#锁状态\" class=\"headerlink\" title=\"锁状态\"></a>锁状态</h4><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，Java6 开始，引入了<code>偏向锁</code>和<code>轻量级</code>锁的概念。</p>\n<h5 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h5><p>获取到锁后，锁默认处于<code>偏向锁</code>状态，在锁对象的对象头中储存一个线程ID，当下次该线程尝试获取该锁时，不需要进行循环CAS取锁，只需要检测偏向锁的线程ID是否与之一致即可。<br>当多个线程对同一个锁竞争激烈时，偏向锁会升级为<code>轻量级锁</code>。</p>\n<h5 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h5><p>加锁：<br>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的 Mark Word 复制到锁记录中，官方称为 Displaced Mark Word。<br>然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。<br>解锁：<br>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p>\n<p>轻量级锁能提高程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，<br>但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock 实现了 Lock 接口，也是 JDK 中该接口的唯一实现。Lock 接口是在Java5新增的，提供了与 synchronized 相似的功能。</p>\n<h4 id=\"与-synchronized-的区别\"><a href=\"#与-synchronized-的区别\" class=\"headerlink\" title=\"与 synchronized 的区别\"></a>与 synchronized 的区别</h4><ol>\n<li><code>ReentrantLock</code>可以显示的进行加锁和解锁。</li>\n<li><code>ReentrantLock</code>可中断的获取锁。</li>\n<li><code>ReentrantLock</code>可以提供公平锁。</li>\n<li><code>ReentrantLock</code>可以提供超时等待机制。</li>\n</ol>\n<h4 id=\"实现原理-1\"><a href=\"#实现原理-1\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>ReentrantLock 的实现依赖于 AbstractQueueSynchronizer(AQS),它是实现锁或其他同步组件的基础框架。<br>AQS 内部维护了一个同步状态变量和一个同步队列，获取到该同步状态的线程视为获取到锁；获取失败的线程连同它的等待状态信息会被构造成加入到同步队列中，并阻塞它。<br>当同步状态被释放时，同步队列中的首节点会被唤醒尝试去获取同步状态。</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><p>如果一段代码中大部分时间都在执行读操作，多个读操作同时进行不会影响线程安全性，这时前面提到的独占锁明显会影响多线程的读取性能。<br><code>ReentrantReadWriteLock</code>是一个读写锁，多个获取了读锁之间的线程可以同步执行；而写锁不可以和读/写锁同步执行。<br>读写锁锁降级：一个线程在获取了写锁后，有获取了读锁，在释放写锁后，就变成了只获取了读锁，即锁降级。</p>\n<h4 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h4><p>ReentrantLock 使用 Condition 的 <code>await()</code>、<code>signal()</code>、<code>signalAll()</code>方法分别代替 Object 的<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 方法。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>以上是关于这四者的简单介绍，为了后面的系列内容做下铺垫，想要了解详情可以参考更多书籍、资料。</p>\n<hr>\n<img src=\"/2018/11/24/volatile、CAS、synchronized、ReentrantLock-简介/img-6806f.gif\">\n"},{"title":"克拉丝的JVM工厂之旅（上）","date":"2018-04-15T02:37:32.000Z","_content":"见链接：https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw","source":"_posts/克拉丝的JVM工厂之旅（上）.md","raw":"---\ntitle: 克拉丝的JVM工厂之旅（上）\ndate: 2018-04-15 10:37:32\ncategories:\n- Java\ntags:\n- 公众号文章\n- JVM\n- 类加载\n---\n见链接：https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw","slug":"克拉丝的JVM工厂之旅（上）","published":1,"updated":"2018-09-22T02:52:12.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtv001bayqcaqi84hb8","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/X_tO5Lgjof_RTlyN_xtSHw</a></p>\n"},{"title":"Java8 ArrayList 源码解读","date":"2018-11-12T13:07:33.000Z","_content":"\n\n*推荐阅读时间：10分钟*\n\n### 简介\nArrayList 是日常开发中很常见的集合类型，在 Java 集合中相对容易阅读。它是基于数组实现的一种列表，读取、修改的时间复杂度很小（O(1)）, 插入、remove 时时间复杂度为O(n)。ArrayList 可以存放 null 值，列表清空就是通过把所有的元素置为 null 实现的。\n\n### Arrays.copyOf() 和 System.arraycopy()\n\n首先我们先看下代码里反复出现的两个方法：Arrays.copyOf() 和 System.arraycopy()。其实 ` public static <T> T[] copyOf(T[] original, int newLength)` 是通过调用后者实现的，输入待拷贝的数组和要返回数组的长度，拷贝出一个新的数组。而`public static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos,int length)`是真正执行拷贝的方法。它是个 native 方法，五个参数分别代表 待拷贝数组、待拷贝数组的起始位置、目标数组、目标数组的插入位置、拷贝的长度。每次拷贝都是全量拷贝，因此容量变化的操作较多时，会对它造成性能影响。\n\n\n### RandomAccess\n\nArrayList 实现了 RandomAccess 接口表示支持快速随机访问，将使用 for 循环查找元素。如果没有实现该接口（如 LinkedList），在查找时，只能通过 迭代器 进行查找，查找速度要低于前者。\n\nJava doc 中具体解释如下：\n```\n * <pre>\n *     for (int i=0, n=list.size(); i &lt; n; i++)\n *         list.get(i);\n * </pre>\n * runs faster than this loop:\n * <pre>\n *     for (Iterator i=list.iterator(); i.hasNext(); )\n *         i.next();\n * </pre>\n```\n\n\n### ⭐注释版源码⭐\n\n\n```\n\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认的初始化容量：10\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * Object[]，用来存储列表元素\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n    /**\n     * 按默认容量创建的空列表共享的存储对象\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n    /**\n     * 指定容量创建的空列表共享的存储对象\n     */\n    private static final Object[]\n            EMPTY_ELEMENTDATA = {};\n    /**\n     * 列表中元素数量\n     */\n    private int size;\n\n    /**\n     * 构造函数，指定容量大小\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            //如果指定容量为0，使用 EMPTY_ELEMENTDATA\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                    initialCapacity);\n        }\n    }\n\n    /**\n     * 无参构造函数\n     */\n    public ArrayList() {\n        //使用 DEFAULTCAPACITY_EMPTY_ELEMENTDATA\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 构造函数，入参为一个集合类型\n     */\n    public ArrayList(Collection<? extends E> c) {\n        //调用 Collection 的 toArray() 方法，转换为 Object[]\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray 方法可能会转换出错，导致生成 Object[] 失败\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     * 按实际元素数量重新申请存储空间以减少内存使用\n     */\n    public void trimToSize() {\n        //修改次数。记录该 ArrayList 对象修改次数，防止并发执行修改操作导致数据不一致。\n        modCount++;\n        if (size < elementData.length) {\n            elementData = (size == 0)\n                    ? EMPTY_ELEMENTDATA\n                    : Arrays.copyOf(elementData, size);\n        }\n    }\n\n    /**\n     * 确保容量足够，如果容量不够就扩容\n     */\n    public void ensureCapacity(int minCapacity) {\n        //如果是按默认容量创建的空 ArrayList,则当指定的容量超过10时，才会扩容\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n                // any size if not default element table\n                ? 0\n                // larger than default for default empty table. It's already supposed to be at default size.\n                : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n    //计算最小容量\n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n\n    //计算出需要扩容的最小容量然后确保增加到该容量\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n\n    //确保增加到指定的容量\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 元素最大数量。因为有的虚拟机预留了用于保存数组对象大小等信息的元数据，故减去了8位。\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * 实际执行 扩容方法\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        //扩容到原来的 1.5倍\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        //如果扩容后仍小于要最小容量则直接取最小容量作为新的容量\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        //如果扩容后大于最大允许的容量，则执行 hugeCapacity\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    /**\n     * 求扩容容量，如果实际指定的最小容量超过 MAX_ARRAY_SIZE ，\n     * 则取 Integer.MAX_VALUE。否则取 MAX_ARRAY_SIZE。\n     */\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n                Integer.MAX_VALUE :\n                MAX_ARRAY_SIZE;\n    }\n\n    /**\n     * 返回实际元素个数\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 是否为空\n     */\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    /**\n     * 是否包含一个元素\n     */\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n\n    /**\n     * 求指定元素首次出现的下标。-1 表示不存在\n     */\n    public int indexOf(Object o) {\n        //单独考虑所查元素为 null 时的情况\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 指定元素最后一次出现的下标。靠从后面遍历来实现的。\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 浅拷贝，只拷贝一个新的数组，元素未拷贝。\n     */\n    public Object clone() {\n        try {\n            ArrayList<?> v = (ArrayList<?>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError(e);\n        }\n    }\n\n    /**\n     * 转换为 Object[]\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n\n    /**\n     * 转换为指定类型数组。\n     * 注意：若指定数组类型不是列表元素的超类，则会报 ArrayStoreException 异常。\n     * 若指定数组为 null ,会报空指针异常。\n     */\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n\n    // Positional Access Operations\n\n    @SuppressWarnings(\"unchecked\")\n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n\n    /**\n     * get\n     */\n    public E get(int index) {\n        //检测下标是否越界\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n\n    /**\n     * set\n     */\n    public E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n\n    /**\n     * add\n     */\n    public boolean add(E e) {\n        //先判断容量是否足够\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * 根据下标删除\n     */\n    public E remove(int index) {\n        rangeCheck(index);\n\n        modCount++;\n        E oldValue = elementData(index);\n        //需要移动的元素数量\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                    numMoved);\n        //将数组最后一个元素设为 null,通过GC机制自动去回收空间\n        elementData[--size] = null; // clear to let GC do its work\n\n        return oldValue;\n    }\n\n    /**\n     * 根据元素删除\n     */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    /**\n     * 与 remove(int index) 方法基本一致，只是没有下标越界检查、不返回旧值。\n     * 提升删除性能，作为私有方法。\n     */\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                    numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n\n    /**\n     * 所有元素全部置为 null\n     */\n    public void clear() {\n        modCount++;\n\n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\n    /**\n     * 追加一个集合的元素\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 插入一个集合的元素\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                    numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 删除指定下标范围的元素\n     */\n    protected void removeRange(int fromIndex, int toIndex) {\n        modCount++;\n        int numMoved = size - toIndex;\n        System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                numMoved);\n\n        // clear to let GC do its work\n        int newSize = size - (toIndex-fromIndex);\n        for (int i = newSize; i < size; i++) {\n            elementData[i] = null;\n        }\n        size = newSize;\n    }\n\n    /**\n     * 检测下标是否越界\n     */\n    private void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * add 和 addAll 方法中 检测下标是否越界。\n     */\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private String outOfBoundsMsg(int index) {\n        return \"Index: \"+index+\", Size: \"+size;\n    }\n\n    /**\n     * 删除在集合中出现的元素\n     * 可能会报 ClassCastException 和 空指针异常\n     */\n    public boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, false);\n    }\n\n    /**\n     * 保留在集合中存在的元素\n     * 可能会报 ClassCastException 和 空指针异常\n     */\n    public boolean retainAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, true);\n    }\n\n    private boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            //遍历列表，根据 complement，选择是否保留元素\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            //如果遍历过程中报错了，将剩余未遍历的元素追加到不完整的新列表的后面\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                        elementData, w,\n                        size - r);\n                w += size - r;\n            }\n            //如果列表有被修改，则将无效存储位置置为 null\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        //返回是否做了修改\n        return modified;\n    }\n\n    /**\n     * 对象序列化函数\n     */\n    private void writeObject(java.io.ObjectOutputStream s)\n            throws java.io.IOException{\n        // Write out element count, and any hidden stuff\n        int expectedModCount = modCount;\n        //执行默认的序列化函数，将除 elementData[] 外的属性序列化\n        s.defaultWriteObject();\n\n        // Write out size as capacity for behavioural compatibility with clone()\n        // 写入 size\n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        // 将 elementData[] 中的元素序列化进去\n        for (int i=0; i<size; i++) {\n            s.writeObject(elementData[i]);\n        }\n        //序列化过程中对象被修改，则报 ConcurrentModificationException 异常\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    /**\n     * 反序列化函数\n     */\n    private void readObject(java.io.ObjectInputStream s)\n            throws java.io.IOException, ClassNotFoundException {\n        elementData = EMPTY_ELEMENTDATA;\n\n        // Read in size, and any hidden stuff\n        // 反序列化出除 elementData[] 外的属性\n        s.defaultReadObject();\n\n        // Read in capacity\n        // 读出 size ,可忽略\n        s.readInt(); // ignored\n\n        if (size > 0) {\n            // be like clone(), allocate array based upon size not capacity\n            // 计算出实际容量\n            int capacity = calculateCapacity(elementData, size);\n            // 检查是否转换为数组类型，容量是否小于0。此处实际上不需要第一个参数。\n            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);\n            ensureCapacityInternal(size);\n\n\n            Object[] a = elementData;\n            // Read in all elements in the proper order.\n            // 执行反序列化\n            for (int i=0; i<size; i++) {\n                a[i] = s.readObject();\n            }\n        }\n    }\n\n    /**\n     * 返回一个迭代器 ListIterator\n     */\n    public ListIterator<E> listIterator() {\n        return new ListItr(0);\n    }\n\n    /**\n     * 返回一个迭代器 ListIterator，指定初始迭代位置\n     */\n    public ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > size)\n            throw new IndexOutOfBoundsException(\"Index: \"+index);\n        return new ListItr(index);\n    }\n\n    /**\n     * 返回一个迭代器 Iterator\n     */\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n\n\n    /**\n     * 获取子list\n     */\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }\n\n    //子list范围检查\n    static void subListRangeCheck(int fromIndex, int toIndex, int size) {\n        if (fromIndex < 0)\n            throw new IndexOutOfBoundsException(\"fromIndex = \" + fromIndex);\n        if (toIndex > size)\n            throw new IndexOutOfBoundsException(\"toIndex = \" + toIndex);\n        if (fromIndex > toIndex)\n            throw new IllegalArgumentException(\"fromIndex(\" + fromIndex +\n                    \") > toIndex(\" + toIndex + \")\");\n    }\n\n\n    // Java8 新加，供函数式编程遍历\n    @Override\n    public void forEach(Consumer<? super E> action) {\n        Objects.requireNonNull(action);\n        final int expectedModCount = modCount;\n        @SuppressWarnings(\"unchecked\")\n        final E[] elementData = (E[]) this.elementData;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            action.accept(elementData[i]);\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    /**\n     * 返回一个 Spliterator 对象。\n     * Spliterator 是 Java8 新加的、可分割的迭代器(splitable iterator)，对于并行处理的能力大大增强。\n     */\n    @Override\n    public Spliterator<E> spliterator() {\n        return new ArrayListSpliterator<>(this, 0, -1, 0);\n    }\n\n    /**\n     * Predicate 是Java8 新加的类，可以理解为一个用来断言的类。\n     * 该方法应该是为了函数式编程新加的。\n     */\n    @Override\n    public boolean removeIf(Predicate<? super E> filter) {\n        Objects.requireNonNull(filter);\n        // figure out which elements are to be removed\n        // any exception thrown from the filter predicate at this stage\n        // will leave the collection unmodified\n        int removeCount = 0;\n        final BitSet removeSet = new BitSet(size);\n        final int expectedModCount = modCount;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            @SuppressWarnings(\"unchecked\")\n            final E element = (E) elementData[i];\n            if (filter.test(element)) {\n                removeSet.set(i);\n                removeCount++;\n            }\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n\n        // shift surviving elements left over the spaces left by removed elements\n        final boolean anyToRemove = removeCount > 0;\n        if (anyToRemove) {\n            final int newSize = size - removeCount;\n            for (int i=0, j=0; (i < size) && (j < newSize); i++, j++) {\n                i = removeSet.nextClearBit(i);\n                elementData[j] = elementData[i];\n            }\n            for (int k=newSize; k < size; k++) {\n                elementData[k] = null;  // Let gc do its work\n            }\n            this.size = newSize;\n            if (modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            modCount++;\n        }\n\n        return anyToRemove;\n    }\n\n    /**\n     * Java8 新加，可以按指定规则替换所有元素。\n     * UnaryOperator 实现了 Function 接口，可以接收一个入参，处理后返回。\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void replaceAll(UnaryOperator<E> operator) {\n        Objects.requireNonNull(operator);\n        final int expectedModCount = modCount;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            elementData[i] = operator.apply((E) elementData[i]);\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n\n    /**\n     * 排序，Comparator 指定排序规则\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void sort(Comparator<? super E> c) {\n        final int expectedModCount = modCount;\n        //调用 Arrays 的排序方法，瞄了一眼，很复杂的样子...\n        Arrays.sort((E[]) elementData, 0, size, c);\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n}\n```\n\n### writeObject 和 readObject\nArrayList 实现了 Serializable 接口，所以对象会被序列化。而存放元素的 elementData 中可能会存在元素数量比数组容量小很多的情况，序列化时就会造成大量的空间浪费，因此通过实现 writeObject 和 readObject 方法，即可重新定义序列化与反序列化的规则。ArrayList 在 elementData 前加上了 transient 取消其默认序列化规则，其他属性则执行默认的规则。\n\n### 迭代器\n`iterator()`方法会返回一个 Iterator 迭代器，遍历时较常见。\n源码如下：\n\n```\n/**\n * AbstractList.Itr 的优化版 迭代器\n */\nprivate class Itr implements Iterator<E> {\n    // 当前下标\n    int cursor;       // index of next element to return\n    // 上一个元素的下标，-1 表示还没有上一个元素\n    int lastRet = -1; // index of last element returned; -1 if no such\n    int expectedModCount = modCount;\n\n    Itr() {}\n\n    public boolean hasNext() {\n        return cursor != size;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E next() {\n        checkForComodification();\n        int i = cursor;\n        if (i >= size)\n            throw new NoSuchElementException();\n        Object[] elementData = ArrayList.this.elementData;\n        if (i >= elementData.length)\n            throw new ConcurrentModificationException();\n        cursor = i + 1;\n        return (E) elementData[lastRet = i];\n    }\n\n    public void remove() {\n        //\n        if (lastRet < 0)\n            throw new IllegalStateException();\n        checkForComodification();\n\n        try {\n            ArrayList.this.remove(lastRet);\n            cursor = lastRet;\n            lastRet = -1;\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException ex) {\n            throw new ConcurrentModificationException();\n        }\n    }\n    //Java8 新加的 遍历方法，供函数式编程使用\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void forEachRemaining(Consumer<? super E> consumer) {\n        Objects.requireNonNull(consumer);\n        final int size = ArrayList.this.size;\n        int i = cursor;\n        if (i >= size) {\n            return;\n        }\n        final Object[] elementData = ArrayList.this.elementData;\n        if (i >= elementData.length) {\n            throw new ConcurrentModificationException();\n        }\n        while (i != size && modCount == expectedModCount) {\n            consumer.accept((E) elementData[i++]);\n        }\n        // update once at end of iteration to reduce heap write traffic\n        cursor = i;\n        lastRet = i - 1;\n        checkForComodification();\n    }\n\n    // 检查是否被修改过\n    final void checkForComodification() {\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n    }\n}\n\n```\n\n`listIterator(int index)`、`listIterator()`这两个方法返回的是 ListIterator 迭代器，与 Iterator 相比，它支持反向遍历和 add() 方法，比较容易理解，不再赘述。\n\n此外，还有一个 `spliterator()`方法，它返回的是一个 Java8 新加的 Spliterator 迭代器。Spliterator 是一个可分割迭代器(splitable iterator)，为了并行遍历元素而设计。如果有机会我们再分析它。\n\n\n### sublist\n\nArrayList 提供的`public List<E> subList(int fromIndex, int toIndex)`方法允许返回一个子list。\n根据注释得知：\n1. 该方法返回的是父list的一个视图，从fromIndex（包含），到toIndex（不包含）。fromIndex=toIndex 表示子list为空\n2. 父子list做的非结构性修改（non-structural changes）都会影响到彼此：所谓的“非结构性修改”，是指不涉及到list的大小改变的修改。相反，结构性修改，指改变了list大小的修改。\n3. 对于结构性修改，子list的所有操作都会反映到父list上。但父list的修改将会导致返回的子list失效。\n4. tips：删除list中的某段数据的方法：`list.subList(from, to).clear();`\n\n\n\n\n*********************\n\n觉得有点收获的同学可以在手机上点击这个[链接](https://m.luckincoffee.com/invited/register?activityNo=NR201801030001&inviteCode=8lB4421fo_6iv_eidD4_Fg%3D%3D&secondfrom=0&title=%E4%BB%8A%E5%A4%A9%E6%98%9F%E6%9C%9F%E4%B8%89%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E6%96%B9%E6%A1%88%E4%B8%80%E7%A8%BF%E8%BF%87&timestamp=1542129222502&from=singlemessage) 免费领取一杯咖啡（瑞幸咖啡券，使用后我也得一张😃）\n\n\n\n","source":"_posts/Java-ArrayList-源码解读.md","raw":"---\ntitle: Java8 ArrayList 源码解读\ndate: 2018-11-12 21:07:33\ncategories:\n- Java\ntags:\n- Java\n- ArrayList\n---\n\n\n*推荐阅读时间：10分钟*\n\n### 简介\nArrayList 是日常开发中很常见的集合类型，在 Java 集合中相对容易阅读。它是基于数组实现的一种列表，读取、修改的时间复杂度很小（O(1)）, 插入、remove 时时间复杂度为O(n)。ArrayList 可以存放 null 值，列表清空就是通过把所有的元素置为 null 实现的。\n\n### Arrays.copyOf() 和 System.arraycopy()\n\n首先我们先看下代码里反复出现的两个方法：Arrays.copyOf() 和 System.arraycopy()。其实 ` public static <T> T[] copyOf(T[] original, int newLength)` 是通过调用后者实现的，输入待拷贝的数组和要返回数组的长度，拷贝出一个新的数组。而`public static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos,int length)`是真正执行拷贝的方法。它是个 native 方法，五个参数分别代表 待拷贝数组、待拷贝数组的起始位置、目标数组、目标数组的插入位置、拷贝的长度。每次拷贝都是全量拷贝，因此容量变化的操作较多时，会对它造成性能影响。\n\n\n### RandomAccess\n\nArrayList 实现了 RandomAccess 接口表示支持快速随机访问，将使用 for 循环查找元素。如果没有实现该接口（如 LinkedList），在查找时，只能通过 迭代器 进行查找，查找速度要低于前者。\n\nJava doc 中具体解释如下：\n```\n * <pre>\n *     for (int i=0, n=list.size(); i &lt; n; i++)\n *         list.get(i);\n * </pre>\n * runs faster than this loop:\n * <pre>\n *     for (Iterator i=list.iterator(); i.hasNext(); )\n *         i.next();\n * </pre>\n```\n\n\n### ⭐注释版源码⭐\n\n\n```\n\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认的初始化容量：10\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * Object[]，用来存储列表元素\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n    /**\n     * 按默认容量创建的空列表共享的存储对象\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n    /**\n     * 指定容量创建的空列表共享的存储对象\n     */\n    private static final Object[]\n            EMPTY_ELEMENTDATA = {};\n    /**\n     * 列表中元素数量\n     */\n    private int size;\n\n    /**\n     * 构造函数，指定容量大小\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            //如果指定容量为0，使用 EMPTY_ELEMENTDATA\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                    initialCapacity);\n        }\n    }\n\n    /**\n     * 无参构造函数\n     */\n    public ArrayList() {\n        //使用 DEFAULTCAPACITY_EMPTY_ELEMENTDATA\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 构造函数，入参为一个集合类型\n     */\n    public ArrayList(Collection<? extends E> c) {\n        //调用 Collection 的 toArray() 方法，转换为 Object[]\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray 方法可能会转换出错，导致生成 Object[] 失败\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     * 按实际元素数量重新申请存储空间以减少内存使用\n     */\n    public void trimToSize() {\n        //修改次数。记录该 ArrayList 对象修改次数，防止并发执行修改操作导致数据不一致。\n        modCount++;\n        if (size < elementData.length) {\n            elementData = (size == 0)\n                    ? EMPTY_ELEMENTDATA\n                    : Arrays.copyOf(elementData, size);\n        }\n    }\n\n    /**\n     * 确保容量足够，如果容量不够就扩容\n     */\n    public void ensureCapacity(int minCapacity) {\n        //如果是按默认容量创建的空 ArrayList,则当指定的容量超过10时，才会扩容\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n                // any size if not default element table\n                ? 0\n                // larger than default for default empty table. It's already supposed to be at default size.\n                : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n    //计算最小容量\n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n\n    //计算出需要扩容的最小容量然后确保增加到该容量\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n\n    //确保增加到指定的容量\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 元素最大数量。因为有的虚拟机预留了用于保存数组对象大小等信息的元数据，故减去了8位。\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * 实际执行 扩容方法\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        //扩容到原来的 1.5倍\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        //如果扩容后仍小于要最小容量则直接取最小容量作为新的容量\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        //如果扩容后大于最大允许的容量，则执行 hugeCapacity\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    /**\n     * 求扩容容量，如果实际指定的最小容量超过 MAX_ARRAY_SIZE ，\n     * 则取 Integer.MAX_VALUE。否则取 MAX_ARRAY_SIZE。\n     */\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n                Integer.MAX_VALUE :\n                MAX_ARRAY_SIZE;\n    }\n\n    /**\n     * 返回实际元素个数\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 是否为空\n     */\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    /**\n     * 是否包含一个元素\n     */\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n\n    /**\n     * 求指定元素首次出现的下标。-1 表示不存在\n     */\n    public int indexOf(Object o) {\n        //单独考虑所查元素为 null 时的情况\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 指定元素最后一次出现的下标。靠从后面遍历来实现的。\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 浅拷贝，只拷贝一个新的数组，元素未拷贝。\n     */\n    public Object clone() {\n        try {\n            ArrayList<?> v = (ArrayList<?>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError(e);\n        }\n    }\n\n    /**\n     * 转换为 Object[]\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n\n    /**\n     * 转换为指定类型数组。\n     * 注意：若指定数组类型不是列表元素的超类，则会报 ArrayStoreException 异常。\n     * 若指定数组为 null ,会报空指针异常。\n     */\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n\n    // Positional Access Operations\n\n    @SuppressWarnings(\"unchecked\")\n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n\n    /**\n     * get\n     */\n    public E get(int index) {\n        //检测下标是否越界\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n\n    /**\n     * set\n     */\n    public E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n\n    /**\n     * add\n     */\n    public boolean add(E e) {\n        //先判断容量是否足够\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * 根据下标删除\n     */\n    public E remove(int index) {\n        rangeCheck(index);\n\n        modCount++;\n        E oldValue = elementData(index);\n        //需要移动的元素数量\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                    numMoved);\n        //将数组最后一个元素设为 null,通过GC机制自动去回收空间\n        elementData[--size] = null; // clear to let GC do its work\n\n        return oldValue;\n    }\n\n    /**\n     * 根据元素删除\n     */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    /**\n     * 与 remove(int index) 方法基本一致，只是没有下标越界检查、不返回旧值。\n     * 提升删除性能，作为私有方法。\n     */\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                    numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n\n    /**\n     * 所有元素全部置为 null\n     */\n    public void clear() {\n        modCount++;\n\n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\n    /**\n     * 追加一个集合的元素\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 插入一个集合的元素\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                    numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 删除指定下标范围的元素\n     */\n    protected void removeRange(int fromIndex, int toIndex) {\n        modCount++;\n        int numMoved = size - toIndex;\n        System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                numMoved);\n\n        // clear to let GC do its work\n        int newSize = size - (toIndex-fromIndex);\n        for (int i = newSize; i < size; i++) {\n            elementData[i] = null;\n        }\n        size = newSize;\n    }\n\n    /**\n     * 检测下标是否越界\n     */\n    private void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * add 和 addAll 方法中 检测下标是否越界。\n     */\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private String outOfBoundsMsg(int index) {\n        return \"Index: \"+index+\", Size: \"+size;\n    }\n\n    /**\n     * 删除在集合中出现的元素\n     * 可能会报 ClassCastException 和 空指针异常\n     */\n    public boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, false);\n    }\n\n    /**\n     * 保留在集合中存在的元素\n     * 可能会报 ClassCastException 和 空指针异常\n     */\n    public boolean retainAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, true);\n    }\n\n    private boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            //遍历列表，根据 complement，选择是否保留元素\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            //如果遍历过程中报错了，将剩余未遍历的元素追加到不完整的新列表的后面\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                        elementData, w,\n                        size - r);\n                w += size - r;\n            }\n            //如果列表有被修改，则将无效存储位置置为 null\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        //返回是否做了修改\n        return modified;\n    }\n\n    /**\n     * 对象序列化函数\n     */\n    private void writeObject(java.io.ObjectOutputStream s)\n            throws java.io.IOException{\n        // Write out element count, and any hidden stuff\n        int expectedModCount = modCount;\n        //执行默认的序列化函数，将除 elementData[] 外的属性序列化\n        s.defaultWriteObject();\n\n        // Write out size as capacity for behavioural compatibility with clone()\n        // 写入 size\n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        // 将 elementData[] 中的元素序列化进去\n        for (int i=0; i<size; i++) {\n            s.writeObject(elementData[i]);\n        }\n        //序列化过程中对象被修改，则报 ConcurrentModificationException 异常\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    /**\n     * 反序列化函数\n     */\n    private void readObject(java.io.ObjectInputStream s)\n            throws java.io.IOException, ClassNotFoundException {\n        elementData = EMPTY_ELEMENTDATA;\n\n        // Read in size, and any hidden stuff\n        // 反序列化出除 elementData[] 外的属性\n        s.defaultReadObject();\n\n        // Read in capacity\n        // 读出 size ,可忽略\n        s.readInt(); // ignored\n\n        if (size > 0) {\n            // be like clone(), allocate array based upon size not capacity\n            // 计算出实际容量\n            int capacity = calculateCapacity(elementData, size);\n            // 检查是否转换为数组类型，容量是否小于0。此处实际上不需要第一个参数。\n            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);\n            ensureCapacityInternal(size);\n\n\n            Object[] a = elementData;\n            // Read in all elements in the proper order.\n            // 执行反序列化\n            for (int i=0; i<size; i++) {\n                a[i] = s.readObject();\n            }\n        }\n    }\n\n    /**\n     * 返回一个迭代器 ListIterator\n     */\n    public ListIterator<E> listIterator() {\n        return new ListItr(0);\n    }\n\n    /**\n     * 返回一个迭代器 ListIterator，指定初始迭代位置\n     */\n    public ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > size)\n            throw new IndexOutOfBoundsException(\"Index: \"+index);\n        return new ListItr(index);\n    }\n\n    /**\n     * 返回一个迭代器 Iterator\n     */\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n\n\n    /**\n     * 获取子list\n     */\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }\n\n    //子list范围检查\n    static void subListRangeCheck(int fromIndex, int toIndex, int size) {\n        if (fromIndex < 0)\n            throw new IndexOutOfBoundsException(\"fromIndex = \" + fromIndex);\n        if (toIndex > size)\n            throw new IndexOutOfBoundsException(\"toIndex = \" + toIndex);\n        if (fromIndex > toIndex)\n            throw new IllegalArgumentException(\"fromIndex(\" + fromIndex +\n                    \") > toIndex(\" + toIndex + \")\");\n    }\n\n\n    // Java8 新加，供函数式编程遍历\n    @Override\n    public void forEach(Consumer<? super E> action) {\n        Objects.requireNonNull(action);\n        final int expectedModCount = modCount;\n        @SuppressWarnings(\"unchecked\")\n        final E[] elementData = (E[]) this.elementData;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            action.accept(elementData[i]);\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    /**\n     * 返回一个 Spliterator 对象。\n     * Spliterator 是 Java8 新加的、可分割的迭代器(splitable iterator)，对于并行处理的能力大大增强。\n     */\n    @Override\n    public Spliterator<E> spliterator() {\n        return new ArrayListSpliterator<>(this, 0, -1, 0);\n    }\n\n    /**\n     * Predicate 是Java8 新加的类，可以理解为一个用来断言的类。\n     * 该方法应该是为了函数式编程新加的。\n     */\n    @Override\n    public boolean removeIf(Predicate<? super E> filter) {\n        Objects.requireNonNull(filter);\n        // figure out which elements are to be removed\n        // any exception thrown from the filter predicate at this stage\n        // will leave the collection unmodified\n        int removeCount = 0;\n        final BitSet removeSet = new BitSet(size);\n        final int expectedModCount = modCount;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            @SuppressWarnings(\"unchecked\")\n            final E element = (E) elementData[i];\n            if (filter.test(element)) {\n                removeSet.set(i);\n                removeCount++;\n            }\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n\n        // shift surviving elements left over the spaces left by removed elements\n        final boolean anyToRemove = removeCount > 0;\n        if (anyToRemove) {\n            final int newSize = size - removeCount;\n            for (int i=0, j=0; (i < size) && (j < newSize); i++, j++) {\n                i = removeSet.nextClearBit(i);\n                elementData[j] = elementData[i];\n            }\n            for (int k=newSize; k < size; k++) {\n                elementData[k] = null;  // Let gc do its work\n            }\n            this.size = newSize;\n            if (modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            modCount++;\n        }\n\n        return anyToRemove;\n    }\n\n    /**\n     * Java8 新加，可以按指定规则替换所有元素。\n     * UnaryOperator 实现了 Function 接口，可以接收一个入参，处理后返回。\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void replaceAll(UnaryOperator<E> operator) {\n        Objects.requireNonNull(operator);\n        final int expectedModCount = modCount;\n        final int size = this.size;\n        for (int i=0; modCount == expectedModCount && i < size; i++) {\n            elementData[i] = operator.apply((E) elementData[i]);\n        }\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n\n    /**\n     * 排序，Comparator 指定排序规则\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void sort(Comparator<? super E> c) {\n        final int expectedModCount = modCount;\n        //调用 Arrays 的排序方法，瞄了一眼，很复杂的样子...\n        Arrays.sort((E[]) elementData, 0, size, c);\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n}\n```\n\n### writeObject 和 readObject\nArrayList 实现了 Serializable 接口，所以对象会被序列化。而存放元素的 elementData 中可能会存在元素数量比数组容量小很多的情况，序列化时就会造成大量的空间浪费，因此通过实现 writeObject 和 readObject 方法，即可重新定义序列化与反序列化的规则。ArrayList 在 elementData 前加上了 transient 取消其默认序列化规则，其他属性则执行默认的规则。\n\n### 迭代器\n`iterator()`方法会返回一个 Iterator 迭代器，遍历时较常见。\n源码如下：\n\n```\n/**\n * AbstractList.Itr 的优化版 迭代器\n */\nprivate class Itr implements Iterator<E> {\n    // 当前下标\n    int cursor;       // index of next element to return\n    // 上一个元素的下标，-1 表示还没有上一个元素\n    int lastRet = -1; // index of last element returned; -1 if no such\n    int expectedModCount = modCount;\n\n    Itr() {}\n\n    public boolean hasNext() {\n        return cursor != size;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E next() {\n        checkForComodification();\n        int i = cursor;\n        if (i >= size)\n            throw new NoSuchElementException();\n        Object[] elementData = ArrayList.this.elementData;\n        if (i >= elementData.length)\n            throw new ConcurrentModificationException();\n        cursor = i + 1;\n        return (E) elementData[lastRet = i];\n    }\n\n    public void remove() {\n        //\n        if (lastRet < 0)\n            throw new IllegalStateException();\n        checkForComodification();\n\n        try {\n            ArrayList.this.remove(lastRet);\n            cursor = lastRet;\n            lastRet = -1;\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException ex) {\n            throw new ConcurrentModificationException();\n        }\n    }\n    //Java8 新加的 遍历方法，供函数式编程使用\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void forEachRemaining(Consumer<? super E> consumer) {\n        Objects.requireNonNull(consumer);\n        final int size = ArrayList.this.size;\n        int i = cursor;\n        if (i >= size) {\n            return;\n        }\n        final Object[] elementData = ArrayList.this.elementData;\n        if (i >= elementData.length) {\n            throw new ConcurrentModificationException();\n        }\n        while (i != size && modCount == expectedModCount) {\n            consumer.accept((E) elementData[i++]);\n        }\n        // update once at end of iteration to reduce heap write traffic\n        cursor = i;\n        lastRet = i - 1;\n        checkForComodification();\n    }\n\n    // 检查是否被修改过\n    final void checkForComodification() {\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n    }\n}\n\n```\n\n`listIterator(int index)`、`listIterator()`这两个方法返回的是 ListIterator 迭代器，与 Iterator 相比，它支持反向遍历和 add() 方法，比较容易理解，不再赘述。\n\n此外，还有一个 `spliterator()`方法，它返回的是一个 Java8 新加的 Spliterator 迭代器。Spliterator 是一个可分割迭代器(splitable iterator)，为了并行遍历元素而设计。如果有机会我们再分析它。\n\n\n### sublist\n\nArrayList 提供的`public List<E> subList(int fromIndex, int toIndex)`方法允许返回一个子list。\n根据注释得知：\n1. 该方法返回的是父list的一个视图，从fromIndex（包含），到toIndex（不包含）。fromIndex=toIndex 表示子list为空\n2. 父子list做的非结构性修改（non-structural changes）都会影响到彼此：所谓的“非结构性修改”，是指不涉及到list的大小改变的修改。相反，结构性修改，指改变了list大小的修改。\n3. 对于结构性修改，子list的所有操作都会反映到父list上。但父list的修改将会导致返回的子list失效。\n4. tips：删除list中的某段数据的方法：`list.subList(from, to).clear();`\n\n\n\n\n*********************\n\n觉得有点收获的同学可以在手机上点击这个[链接](https://m.luckincoffee.com/invited/register?activityNo=NR201801030001&inviteCode=8lB4421fo_6iv_eidD4_Fg%3D%3D&secondfrom=0&title=%E4%BB%8A%E5%A4%A9%E6%98%9F%E6%9C%9F%E4%B8%89%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E6%96%B9%E6%A1%88%E4%B8%80%E7%A8%BF%E8%BF%87&timestamp=1542129222502&from=singlemessage) 免费领取一杯咖啡（瑞幸咖啡券，使用后我也得一张😃）\n\n\n\n","slug":"Java-ArrayList-源码解读","published":1,"updated":"2018-11-15T12:31:07.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtx001eayqcmpyvour4","content":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>ArrayList 是日常开发中很常见的集合类型，在 Java 集合中相对容易阅读。它是基于数组实现的一种列表，读取、修改的时间复杂度很小（O(1)）, 插入、remove 时时间复杂度为O(n)。ArrayList 可以存放 null 值，列表清空就是通过把所有的元素置为 null 实现的。</p>\n<h3 id=\"Arrays-copyOf-和-System-arraycopy\"><a href=\"#Arrays-copyOf-和-System-arraycopy\" class=\"headerlink\" title=\"Arrays.copyOf() 和 System.arraycopy()\"></a>Arrays.copyOf() 和 System.arraycopy()</h3><p>首先我们先看下代码里反复出现的两个方法：Arrays.copyOf() 和 System.arraycopy()。其实 <code>public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</code> 是通过调用后者实现的，输入待拷贝的数组和要返回数组的长度，拷贝出一个新的数组。而<code>public static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos,int length)</code>是真正执行拷贝的方法。它是个 native 方法，五个参数分别代表 待拷贝数组、待拷贝数组的起始位置、目标数组、目标数组的插入位置、拷贝的长度。每次拷贝都是全量拷贝，因此容量变化的操作较多时，会对它造成性能影响。</p>\n<h3 id=\"RandomAccess\"><a href=\"#RandomAccess\" class=\"headerlink\" title=\"RandomAccess\"></a>RandomAccess</h3><p>ArrayList 实现了 RandomAccess 接口表示支持快速随机访问，将使用 for 循环查找元素。如果没有实现该接口（如 LinkedList），在查找时，只能通过 迭代器 进行查找，查找速度要低于前者。</p>\n<p>Java doc 中具体解释如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &lt;pre&gt;</span><br><span class=\"line\">*     for (int i=0, n=list.size(); i &amp;lt; n; i++)</span><br><span class=\"line\">*         list.get(i);</span><br><span class=\"line\">* &lt;/pre&gt;</span><br><span class=\"line\">* runs faster than this loop:</span><br><span class=\"line\">* &lt;pre&gt;</span><br><span class=\"line\">*     for (Iterator i=list.iterator(); i.hasNext(); )</span><br><span class=\"line\">*         i.next();</span><br><span class=\"line\">* &lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"⭐注释版源码⭐\"><a href=\"#⭐注释版源码⭐\" class=\"headerlink\" title=\"⭐注释版源码⭐\"></a>⭐注释版源码⭐</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8683452581122892189L;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认的初始化容量：10</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final int DEFAULT_CAPACITY = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Object[]，用来存储列表元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    transient Object[] elementData; // non-private to simplify nested class access</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 按默认容量创建的空列表共享的存储对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 指定容量创建的空列表共享的存储对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Object[]</span><br><span class=\"line\">            EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 列表中元素数量</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数，指定容量大小</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList(int initialCapacity) &#123;</span><br><span class=\"line\">        if (initialCapacity &gt; 0) &#123;</span><br><span class=\"line\">            this.elementData = new Object[initialCapacity];</span><br><span class=\"line\">        &#125; else if (initialCapacity == 0) &#123;</span><br><span class=\"line\">            //如果指定容量为0，使用 EMPTY_ELEMENTDATA</span><br><span class=\"line\">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class=\"line\">                    initialCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 无参构造函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList() &#123;</span><br><span class=\"line\">        //使用 DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class=\"line\">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数，入参为一个集合类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        //调用 Collection 的 toArray() 方法，转换为 Object[]</span><br><span class=\"line\">        elementData = c.toArray();</span><br><span class=\"line\">        if ((size = elementData.length) != 0) &#123;</span><br><span class=\"line\">            // c.toArray 方法可能会转换出错，导致生成 Object[] 失败</span><br><span class=\"line\">            if (elementData.getClass() != Object[].class)</span><br><span class=\"line\">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // replace with empty array.</span><br><span class=\"line\">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 按实际元素数量重新申请存储空间以减少内存使用</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void trimToSize() &#123;</span><br><span class=\"line\">        //修改次数。记录该 ArrayList 对象修改次数，防止并发执行修改操作导致数据不一致。</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        if (size &lt; elementData.length) &#123;</span><br><span class=\"line\">            elementData = (size == 0)</span><br><span class=\"line\">                    ? EMPTY_ELEMENTDATA</span><br><span class=\"line\">                    : Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 确保容量足够，如果容量不够就扩容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void ensureCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        //如果是按默认容量创建的空 ArrayList,则当指定的容量超过10时，才会扩容</span><br><span class=\"line\">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">                // any size if not default element table</span><br><span class=\"line\">                ? 0</span><br><span class=\"line\">                // larger than default for default empty table. It&apos;s already supposed to be at default size.</span><br><span class=\"line\">                : DEFAULT_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">            ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计算最小容量</span><br><span class=\"line\">    private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return minCapacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计算出需要扩容的最小容量然后确保增加到该容量</span><br><span class=\"line\">    private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //确保增加到指定的容量</span><br><span class=\"line\">    private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // overflow-conscious code</span><br><span class=\"line\">        if (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 元素最大数量。因为有的虚拟机预留了用于保存数组对象大小等信息的元数据，故减去了8位。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 实际执行 扩容方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void grow(int minCapacity) &#123;</span><br><span class=\"line\">        // overflow-conscious code</span><br><span class=\"line\">        int oldCapacity = elementData.length;</span><br><span class=\"line\">        //扩容到原来的 1.5倍</span><br><span class=\"line\">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">        //如果扩容后仍小于要最小容量则直接取最小容量作为新的容量</span><br><span class=\"line\">        if (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        //如果扩容后大于最大允许的容量，则执行 hugeCapacity</span><br><span class=\"line\">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        // minCapacity is usually close to size, so this is a win:</span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求扩容容量，如果实际指定的最小容量超过 MAX_ARRAY_SIZE ，</span><br><span class=\"line\">     * 则取 Integer.MAX_VALUE。否则取 MAX_ARRAY_SIZE。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static int hugeCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        if (minCapacity &lt; 0) // overflow</span><br><span class=\"line\">            throw new OutOfMemoryError();</span><br><span class=\"line\">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">                Integer.MAX_VALUE :</span><br><span class=\"line\">                MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回实际元素个数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否为空</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean isEmpty() &#123;</span><br><span class=\"line\">        return size == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否包含一个元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean contains(Object o) &#123;</span><br><span class=\"line\">        return indexOf(o) &gt;= 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求指定元素首次出现的下标。-1 表示不存在</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int indexOf(Object o) &#123;</span><br><span class=\"line\">        //单独考虑所查元素为 null 时的情况</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">                if (elementData[i]==null)</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">                if (o.equals(elementData[i]))</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 指定元素最后一次出现的下标。靠从后面遍历来实现的。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int lastIndexOf(Object o) &#123;</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class=\"line\">                if (elementData[i]==null)</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class=\"line\">                if (o.equals(elementData[i]))</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 浅拷贝，只拷贝一个新的数组，元素未拷贝。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Object clone() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();</span><br><span class=\"line\">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class=\"line\">            v.modCount = 0;</span><br><span class=\"line\">            return v;</span><br><span class=\"line\">        &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            // this shouldn&apos;t happen, since we are Cloneable</span><br><span class=\"line\">            throw new InternalError(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 转换为 Object[]</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Object[] toArray() &#123;</span><br><span class=\"line\">        return Arrays.copyOf(elementData, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 转换为指定类型数组。</span><br><span class=\"line\">     * 注意：若指定数组类型不是列表元素的超类，则会报 ArrayStoreException 异常。</span><br><span class=\"line\">     * 若指定数组为 null ,会报空指针异常。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">        if (a.length &lt; size)</span><br><span class=\"line\">            // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class=\"line\">            return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">        System.arraycopy(elementData, 0, a, 0, size);</span><br><span class=\"line\">        if (a.length &gt; size)</span><br><span class=\"line\">            a[size] = null;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Positional Access Operations</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    E elementData(int index) &#123;</span><br><span class=\"line\">        return (E) elementData[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * get</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E get(int index) &#123;</span><br><span class=\"line\">        //检测下标是否越界</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        return elementData(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * set</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E set(int index, E element) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        elementData[index] = element;</span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * add</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        //先判断容量是否足够</span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void add(int index, E element) &#123;</span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class=\"line\">                size - index);</span><br><span class=\"line\">        elementData[index] = element;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据下标删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E remove(int index) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        //需要移动的元素数量</span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        //将数组最后一个元素设为 null,通过GC机制自动去回收空间</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\"></span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据元素删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean remove(Object o) &#123;</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int index = 0; index &lt; size; index++)</span><br><span class=\"line\">                if (elementData[index] == null) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int index = 0; index &lt; size; index++)</span><br><span class=\"line\">                if (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 与 remove(int index) 方法基本一致，只是没有下标越界检查、不返回旧值。</span><br><span class=\"line\">     * 提升删除性能，作为私有方法。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void fastRemove(int index) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 所有元素全部置为 null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // clear to let GC do its work</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">            elementData[i] = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        size = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 追加一个集合的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        Object[] a = c.toArray();</span><br><span class=\"line\">        int numNew = a.length;</span><br><span class=\"line\">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class=\"line\">        System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class=\"line\">        size += numNew;</span><br><span class=\"line\">        return numNew != 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 插入一个集合的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object[] a = c.toArray();</span><br><span class=\"line\">        int numNew = a.length;</span><br><span class=\"line\">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class=\"line\"></span><br><span class=\"line\">        int numMoved = size - index;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.arraycopy(a, 0, elementData, index, numNew);</span><br><span class=\"line\">        size += numNew;</span><br><span class=\"line\">        return numNew != 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除指定下标范围的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        int numMoved = size - toIndex;</span><br><span class=\"line\">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class=\"line\">                numMoved);</span><br><span class=\"line\"></span><br><span class=\"line\">        // clear to let GC do its work</span><br><span class=\"line\">        int newSize = size - (toIndex-fromIndex);</span><br><span class=\"line\">        for (int i = newSize; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = newSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测下标是否越界</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void rangeCheck(int index) &#123;</span><br><span class=\"line\">        if (index &gt;= size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * add 和 addAll 方法中 检测下标是否越界。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void rangeCheckForAdd(int index) &#123;</span><br><span class=\"line\">        if (index &gt; size || index &lt; 0)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String outOfBoundsMsg(int index) &#123;</span><br><span class=\"line\">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除在集合中出现的元素</span><br><span class=\"line\">     * 可能会报 ClassCastException 和 空指针异常</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(c);</span><br><span class=\"line\">        return batchRemove(c, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保留在集合中存在的元素</span><br><span class=\"line\">     * 可能会报 ClassCastException 和 空指针异常</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(c);</span><br><span class=\"line\">        return batchRemove(c, true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class=\"line\">        final Object[] elementData = this.elementData;</span><br><span class=\"line\">        int r = 0, w = 0;</span><br><span class=\"line\">        boolean modified = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //遍历列表，根据 complement，选择是否保留元素</span><br><span class=\"line\">            for (; r &lt; size; r++)</span><br><span class=\"line\">                if (c.contains(elementData[r]) == complement)</span><br><span class=\"line\">                    elementData[w++] = elementData[r];</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            //如果遍历过程中报错了，将剩余未遍历的元素追加到不完整的新列表的后面</span><br><span class=\"line\">            if (r != size) &#123;</span><br><span class=\"line\">                System.arraycopy(elementData, r,</span><br><span class=\"line\">                        elementData, w,</span><br><span class=\"line\">                        size - r);</span><br><span class=\"line\">                w += size - r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //如果列表有被修改，则将无效存储位置置为 null</span><br><span class=\"line\">            if (w != size) &#123;</span><br><span class=\"line\">                // clear to let GC do its work</span><br><span class=\"line\">                for (int i = w; i &lt; size; i++)</span><br><span class=\"line\">                    elementData[i] = null;</span><br><span class=\"line\">                modCount += size - w;</span><br><span class=\"line\">                size = w;</span><br><span class=\"line\">                modified = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //返回是否做了修改</span><br><span class=\"line\">        return modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 对象序列化函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void writeObject(java.io.ObjectOutputStream s)</span><br><span class=\"line\">            throws java.io.IOException&#123;</span><br><span class=\"line\">        // Write out element count, and any hidden stuff</span><br><span class=\"line\">        int expectedModCount = modCount;</span><br><span class=\"line\">        //执行默认的序列化函数，将除 elementData[] 外的属性序列化</span><br><span class=\"line\">        s.defaultWriteObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Write out size as capacity for behavioural compatibility with clone()</span><br><span class=\"line\">        // 写入 size</span><br><span class=\"line\">        s.writeInt(size);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Write out all elements in the proper order.</span><br><span class=\"line\">        // 将 elementData[] 中的元素序列化进去</span><br><span class=\"line\">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class=\"line\">            s.writeObject(elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //序列化过程中对象被修改，则报 ConcurrentModificationException 异常</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 反序列化函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void readObject(java.io.ObjectInputStream s)</span><br><span class=\"line\">            throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read in size, and any hidden stuff</span><br><span class=\"line\">        // 反序列化出除 elementData[] 外的属性</span><br><span class=\"line\">        s.defaultReadObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read in capacity</span><br><span class=\"line\">        // 读出 size ,可忽略</span><br><span class=\"line\">        s.readInt(); // ignored</span><br><span class=\"line\"></span><br><span class=\"line\">        if (size &gt; 0) &#123;</span><br><span class=\"line\">            // be like clone(), allocate array based upon size not capacity</span><br><span class=\"line\">            // 计算出实际容量</span><br><span class=\"line\">            int capacity = calculateCapacity(elementData, size);</span><br><span class=\"line\">            // 检查是否转换为数组类型，容量是否小于0。此处实际上不需要第一个参数。</span><br><span class=\"line\">            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);</span><br><span class=\"line\">            ensureCapacityInternal(size);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            Object[] a = elementData;</span><br><span class=\"line\">            // Read in all elements in the proper order.</span><br><span class=\"line\">            // 执行反序列化</span><br><span class=\"line\">            for (int i=0; i&lt;size; i++) &#123;</span><br><span class=\"line\">                a[i] = s.readObject();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 ListIterator</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ListIterator&lt;E&gt; listIterator() &#123;</span><br><span class=\"line\">        return new ListItr(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 ListIterator，指定初始迭代位置</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</span><br><span class=\"line\">        if (index &lt; 0 || index &gt; size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);</span><br><span class=\"line\">        return new ListItr(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 Iterator</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class=\"line\">        return new Itr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取子list</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class=\"line\">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class=\"line\">        return new SubList(this, 0, fromIndex, toIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //子list范围检查</span><br><span class=\"line\">    static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123;</span><br><span class=\"line\">        if (fromIndex &lt; 0)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);</span><br><span class=\"line\">        if (toIndex &gt; size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);</span><br><span class=\"line\">        if (fromIndex &gt; toIndex)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span><br><span class=\"line\">                    &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // Java8 新加，供函数式编程遍历</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(action);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        final E[] elementData = (E[]) this.elementData;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            action.accept(elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个 Spliterator 对象。</span><br><span class=\"line\">     * Spliterator 是 Java8 新加的、可分割的迭代器(splitable iterator)，对于并行处理的能力大大增强。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class=\"line\">        return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Predicate 是Java8 新加的类，可以理解为一个用来断言的类。</span><br><span class=\"line\">     * 该方法应该是为了函数式编程新加的。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean removeIf(Predicate&lt;? super E&gt; filter) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(filter);</span><br><span class=\"line\">        // figure out which elements are to be removed</span><br><span class=\"line\">        // any exception thrown from the filter predicate at this stage</span><br><span class=\"line\">        // will leave the collection unmodified</span><br><span class=\"line\">        int removeCount = 0;</span><br><span class=\"line\">        final BitSet removeSet = new BitSet(size);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            final E element = (E) elementData[i];</span><br><span class=\"line\">            if (filter.test(element)) &#123;</span><br><span class=\"line\">                removeSet.set(i);</span><br><span class=\"line\">                removeCount++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // shift surviving elements left over the spaces left by removed elements</span><br><span class=\"line\">        final boolean anyToRemove = removeCount &gt; 0;</span><br><span class=\"line\">        if (anyToRemove) &#123;</span><br><span class=\"line\">            final int newSize = size - removeCount;</span><br><span class=\"line\">            for (int i=0, j=0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class=\"line\">                i = removeSet.nextClearBit(i);</span><br><span class=\"line\">                elementData[j] = elementData[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int k=newSize; k &lt; size; k++) &#123;</span><br><span class=\"line\">                elementData[k] = null;  // Let gc do its work</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.size = newSize;</span><br><span class=\"line\">            if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">                throw new ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return anyToRemove;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Java8 新加，可以按指定规则替换所有元素。</span><br><span class=\"line\">     * UnaryOperator 实现了 Function 接口，可以接收一个入参，处理后返回。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(operator);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序，Comparator 指定排序规则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        //调用 Arrays 的排序方法，瞄了一眼，很复杂的样子...</span><br><span class=\"line\">        Arrays.sort((E[]) elementData, 0, size, c);</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"writeObject-和-readObject\"><a href=\"#writeObject-和-readObject\" class=\"headerlink\" title=\"writeObject 和 readObject\"></a>writeObject 和 readObject</h3><p>ArrayList 实现了 Serializable 接口，所以对象会被序列化。而存放元素的 elementData 中可能会存在元素数量比数组容量小很多的情况，序列化时就会造成大量的空间浪费，因此通过实现 writeObject 和 readObject 方法，即可重新定义序列化与反序列化的规则。ArrayList 在 elementData 前加上了 transient 取消其默认序列化规则，其他属性则执行默认的规则。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p><code>iterator()</code>方法会返回一个 Iterator 迭代器，遍历时较常见。<br>源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * AbstractList.Itr 的优化版 迭代器</span><br><span class=\"line\"> */</span><br><span class=\"line\">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class=\"line\">    // 当前下标</span><br><span class=\"line\">    int cursor;       // index of next element to return</span><br><span class=\"line\">    // 上一个元素的下标，-1 表示还没有上一个元素</span><br><span class=\"line\">    int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class=\"line\">    int expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    Itr() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasNext() &#123;</span><br><span class=\"line\">        return cursor != size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public E next() &#123;</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        int i = cursor;</span><br><span class=\"line\">        if (i &gt;= size)</span><br><span class=\"line\">            throw new NoSuchElementException();</span><br><span class=\"line\">        Object[] elementData = ArrayList.this.elementData;</span><br><span class=\"line\">        if (i &gt;= elementData.length)</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        cursor = i + 1;</span><br><span class=\"line\">        return (E) elementData[lastRet = i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void remove() &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">        if (lastRet &lt; 0)</span><br><span class=\"line\">            throw new IllegalStateException();</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ArrayList.this.remove(lastRet);</span><br><span class=\"line\">            cursor = lastRet;</span><br><span class=\"line\">            lastRet = -1;</span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">        &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //Java8 新加的 遍历方法，供函数式编程使用</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(consumer);</span><br><span class=\"line\">        final int size = ArrayList.this.size;</span><br><span class=\"line\">        int i = cursor;</span><br><span class=\"line\">        if (i &gt;= size) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final Object[] elementData = ArrayList.this.elementData;</span><br><span class=\"line\">        if (i &gt;= elementData.length) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class=\"line\">            consumer.accept((E) elementData[i++]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // update once at end of iteration to reduce heap write traffic</span><br><span class=\"line\">        cursor = i;</span><br><span class=\"line\">        lastRet = i - 1;</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 检查是否被修改过</span><br><span class=\"line\">    final void checkForComodification() &#123;</span><br><span class=\"line\">        if (modCount != expectedModCount)</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>listIterator(int index)</code>、<code>listIterator()</code>这两个方法返回的是 ListIterator 迭代器，与 Iterator 相比，它支持反向遍历和 add() 方法，比较容易理解，不再赘述。</p>\n<p>此外，还有一个 <code>spliterator()</code>方法，它返回的是一个 Java8 新加的 Spliterator 迭代器。Spliterator 是一个可分割迭代器(splitable iterator)，为了并行遍历元素而设计。如果有机会我们再分析它。</p>\n<h3 id=\"sublist\"><a href=\"#sublist\" class=\"headerlink\" title=\"sublist\"></a>sublist</h3><p>ArrayList 提供的<code>public List&lt;E&gt; subList(int fromIndex, int toIndex)</code>方法允许返回一个子list。<br>根据注释得知：</p>\n<ol>\n<li>该方法返回的是父list的一个视图，从fromIndex（包含），到toIndex（不包含）。fromIndex=toIndex 表示子list为空</li>\n<li>父子list做的非结构性修改（non-structural changes）都会影响到彼此：所谓的“非结构性修改”，是指不涉及到list的大小改变的修改。相反，结构性修改，指改变了list大小的修改。</li>\n<li>对于结构性修改，子list的所有操作都会反映到父list上。但父list的修改将会导致返回的子list失效。</li>\n<li>tips：删除list中的某段数据的方法：<code>list.subList(from, to).clear();</code></li>\n</ol>\n<hr>\n<p>觉得有点收获的同学可以在手机上点击这个<a href=\"https://m.luckincoffee.com/invited/register?activityNo=NR201801030001&amp;inviteCode=8lB4421fo_6iv_eidD4_Fg%3D%3D&amp;secondfrom=0&amp;title=%E4%BB%8A%E5%A4%A9%E6%98%9F%E6%9C%9F%E4%B8%89%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E6%96%B9%E6%A1%88%E4%B8%80%E7%A8%BF%E8%BF%87&amp;timestamp=1542129222502&amp;from=singlemessage\" target=\"_blank\" rel=\"noopener\">链接</a> 免费领取一杯咖啡（瑞幸咖啡券，使用后我也得一张😃）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>推荐阅读时间：10分钟</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>ArrayList 是日常开发中很常见的集合类型，在 Java 集合中相对容易阅读。它是基于数组实现的一种列表，读取、修改的时间复杂度很小（O(1)）, 插入、remove 时时间复杂度为O(n)。ArrayList 可以存放 null 值，列表清空就是通过把所有的元素置为 null 实现的。</p>\n<h3 id=\"Arrays-copyOf-和-System-arraycopy\"><a href=\"#Arrays-copyOf-和-System-arraycopy\" class=\"headerlink\" title=\"Arrays.copyOf() 和 System.arraycopy()\"></a>Arrays.copyOf() 和 System.arraycopy()</h3><p>首先我们先看下代码里反复出现的两个方法：Arrays.copyOf() 和 System.arraycopy()。其实 <code>public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</code> 是通过调用后者实现的，输入待拷贝的数组和要返回数组的长度，拷贝出一个新的数组。而<code>public static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos,int length)</code>是真正执行拷贝的方法。它是个 native 方法，五个参数分别代表 待拷贝数组、待拷贝数组的起始位置、目标数组、目标数组的插入位置、拷贝的长度。每次拷贝都是全量拷贝，因此容量变化的操作较多时，会对它造成性能影响。</p>\n<h3 id=\"RandomAccess\"><a href=\"#RandomAccess\" class=\"headerlink\" title=\"RandomAccess\"></a>RandomAccess</h3><p>ArrayList 实现了 RandomAccess 接口表示支持快速随机访问，将使用 for 循环查找元素。如果没有实现该接口（如 LinkedList），在查找时，只能通过 迭代器 进行查找，查找速度要低于前者。</p>\n<p>Java doc 中具体解释如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &lt;pre&gt;</span><br><span class=\"line\">*     for (int i=0, n=list.size(); i &amp;lt; n; i++)</span><br><span class=\"line\">*         list.get(i);</span><br><span class=\"line\">* &lt;/pre&gt;</span><br><span class=\"line\">* runs faster than this loop:</span><br><span class=\"line\">* &lt;pre&gt;</span><br><span class=\"line\">*     for (Iterator i=list.iterator(); i.hasNext(); )</span><br><span class=\"line\">*         i.next();</span><br><span class=\"line\">* &lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"⭐注释版源码⭐\"><a href=\"#⭐注释版源码⭐\" class=\"headerlink\" title=\"⭐注释版源码⭐\"></a>⭐注释版源码⭐</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8683452581122892189L;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认的初始化容量：10</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final int DEFAULT_CAPACITY = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Object[]，用来存储列表元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    transient Object[] elementData; // non-private to simplify nested class access</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 按默认容量创建的空列表共享的存储对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 指定容量创建的空列表共享的存储对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Object[]</span><br><span class=\"line\">            EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 列表中元素数量</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数，指定容量大小</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList(int initialCapacity) &#123;</span><br><span class=\"line\">        if (initialCapacity &gt; 0) &#123;</span><br><span class=\"line\">            this.elementData = new Object[initialCapacity];</span><br><span class=\"line\">        &#125; else if (initialCapacity == 0) &#123;</span><br><span class=\"line\">            //如果指定容量为0，使用 EMPTY_ELEMENTDATA</span><br><span class=\"line\">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class=\"line\">                    initialCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 无参构造函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList() &#123;</span><br><span class=\"line\">        //使用 DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class=\"line\">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数，入参为一个集合类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        //调用 Collection 的 toArray() 方法，转换为 Object[]</span><br><span class=\"line\">        elementData = c.toArray();</span><br><span class=\"line\">        if ((size = elementData.length) != 0) &#123;</span><br><span class=\"line\">            // c.toArray 方法可能会转换出错，导致生成 Object[] 失败</span><br><span class=\"line\">            if (elementData.getClass() != Object[].class)</span><br><span class=\"line\">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // replace with empty array.</span><br><span class=\"line\">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 按实际元素数量重新申请存储空间以减少内存使用</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void trimToSize() &#123;</span><br><span class=\"line\">        //修改次数。记录该 ArrayList 对象修改次数，防止并发执行修改操作导致数据不一致。</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        if (size &lt; elementData.length) &#123;</span><br><span class=\"line\">            elementData = (size == 0)</span><br><span class=\"line\">                    ? EMPTY_ELEMENTDATA</span><br><span class=\"line\">                    : Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 确保容量足够，如果容量不够就扩容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void ensureCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        //如果是按默认容量创建的空 ArrayList,则当指定的容量超过10时，才会扩容</span><br><span class=\"line\">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">                // any size if not default element table</span><br><span class=\"line\">                ? 0</span><br><span class=\"line\">                // larger than default for default empty table. It&apos;s already supposed to be at default size.</span><br><span class=\"line\">                : DEFAULT_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">            ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计算最小容量</span><br><span class=\"line\">    private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return minCapacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计算出需要扩容的最小容量然后确保增加到该容量</span><br><span class=\"line\">    private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //确保增加到指定的容量</span><br><span class=\"line\">    private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // overflow-conscious code</span><br><span class=\"line\">        if (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 元素最大数量。因为有的虚拟机预留了用于保存数组对象大小等信息的元数据，故减去了8位。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 实际执行 扩容方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void grow(int minCapacity) &#123;</span><br><span class=\"line\">        // overflow-conscious code</span><br><span class=\"line\">        int oldCapacity = elementData.length;</span><br><span class=\"line\">        //扩容到原来的 1.5倍</span><br><span class=\"line\">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">        //如果扩容后仍小于要最小容量则直接取最小容量作为新的容量</span><br><span class=\"line\">        if (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        //如果扩容后大于最大允许的容量，则执行 hugeCapacity</span><br><span class=\"line\">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        // minCapacity is usually close to size, so this is a win:</span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求扩容容量，如果实际指定的最小容量超过 MAX_ARRAY_SIZE ，</span><br><span class=\"line\">     * 则取 Integer.MAX_VALUE。否则取 MAX_ARRAY_SIZE。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static int hugeCapacity(int minCapacity) &#123;</span><br><span class=\"line\">        if (minCapacity &lt; 0) // overflow</span><br><span class=\"line\">            throw new OutOfMemoryError();</span><br><span class=\"line\">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">                Integer.MAX_VALUE :</span><br><span class=\"line\">                MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回实际元素个数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否为空</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean isEmpty() &#123;</span><br><span class=\"line\">        return size == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否包含一个元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean contains(Object o) &#123;</span><br><span class=\"line\">        return indexOf(o) &gt;= 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求指定元素首次出现的下标。-1 表示不存在</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int indexOf(Object o) &#123;</span><br><span class=\"line\">        //单独考虑所查元素为 null 时的情况</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">                if (elementData[i]==null)</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">                if (o.equals(elementData[i]))</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 指定元素最后一次出现的下标。靠从后面遍历来实现的。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int lastIndexOf(Object o) &#123;</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class=\"line\">                if (elementData[i]==null)</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class=\"line\">                if (o.equals(elementData[i]))</span><br><span class=\"line\">                    return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 浅拷贝，只拷贝一个新的数组，元素未拷贝。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Object clone() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();</span><br><span class=\"line\">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class=\"line\">            v.modCount = 0;</span><br><span class=\"line\">            return v;</span><br><span class=\"line\">        &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            // this shouldn&apos;t happen, since we are Cloneable</span><br><span class=\"line\">            throw new InternalError(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 转换为 Object[]</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Object[] toArray() &#123;</span><br><span class=\"line\">        return Arrays.copyOf(elementData, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 转换为指定类型数组。</span><br><span class=\"line\">     * 注意：若指定数组类型不是列表元素的超类，则会报 ArrayStoreException 异常。</span><br><span class=\"line\">     * 若指定数组为 null ,会报空指针异常。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">        if (a.length &lt; size)</span><br><span class=\"line\">            // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class=\"line\">            return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">        System.arraycopy(elementData, 0, a, 0, size);</span><br><span class=\"line\">        if (a.length &gt; size)</span><br><span class=\"line\">            a[size] = null;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Positional Access Operations</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    E elementData(int index) &#123;</span><br><span class=\"line\">        return (E) elementData[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * get</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E get(int index) &#123;</span><br><span class=\"line\">        //检测下标是否越界</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        return elementData(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * set</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E set(int index, E element) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        elementData[index] = element;</span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * add</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        //先判断容量是否足够</span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void add(int index, E element) &#123;</span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class=\"line\">                size - index);</span><br><span class=\"line\">        elementData[index] = element;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据下标删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public E remove(int index) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        //需要移动的元素数量</span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        //将数组最后一个元素设为 null,通过GC机制自动去回收空间</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\"></span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据元素删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean remove(Object o) &#123;</span><br><span class=\"line\">        if (o == null) &#123;</span><br><span class=\"line\">            for (int index = 0; index &lt; size; index++)</span><br><span class=\"line\">                if (elementData[index] == null) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (int index = 0; index &lt; size; index++)</span><br><span class=\"line\">                if (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 与 remove(int index) 方法基本一致，只是没有下标越界检查、不返回旧值。</span><br><span class=\"line\">     * 提升删除性能，作为私有方法。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void fastRemove(int index) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 所有元素全部置为 null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // clear to let GC do its work</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">            elementData[i] = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        size = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 追加一个集合的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        Object[] a = c.toArray();</span><br><span class=\"line\">        int numNew = a.length;</span><br><span class=\"line\">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class=\"line\">        System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class=\"line\">        size += numNew;</span><br><span class=\"line\">        return numNew != 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 插入一个集合的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object[] a = c.toArray();</span><br><span class=\"line\">        int numNew = a.length;</span><br><span class=\"line\">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class=\"line\"></span><br><span class=\"line\">        int numMoved = size - index;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.arraycopy(a, 0, elementData, index, numNew);</span><br><span class=\"line\">        size += numNew;</span><br><span class=\"line\">        return numNew != 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除指定下标范围的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        int numMoved = size - toIndex;</span><br><span class=\"line\">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class=\"line\">                numMoved);</span><br><span class=\"line\"></span><br><span class=\"line\">        // clear to let GC do its work</span><br><span class=\"line\">        int newSize = size - (toIndex-fromIndex);</span><br><span class=\"line\">        for (int i = newSize; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = newSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测下标是否越界</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void rangeCheck(int index) &#123;</span><br><span class=\"line\">        if (index &gt;= size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * add 和 addAll 方法中 检测下标是否越界。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void rangeCheckForAdd(int index) &#123;</span><br><span class=\"line\">        if (index &gt; size || index &lt; 0)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String outOfBoundsMsg(int index) &#123;</span><br><span class=\"line\">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除在集合中出现的元素</span><br><span class=\"line\">     * 可能会报 ClassCastException 和 空指针异常</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(c);</span><br><span class=\"line\">        return batchRemove(c, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保留在集合中存在的元素</span><br><span class=\"line\">     * 可能会报 ClassCastException 和 空指针异常</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(c);</span><br><span class=\"line\">        return batchRemove(c, true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class=\"line\">        final Object[] elementData = this.elementData;</span><br><span class=\"line\">        int r = 0, w = 0;</span><br><span class=\"line\">        boolean modified = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //遍历列表，根据 complement，选择是否保留元素</span><br><span class=\"line\">            for (; r &lt; size; r++)</span><br><span class=\"line\">                if (c.contains(elementData[r]) == complement)</span><br><span class=\"line\">                    elementData[w++] = elementData[r];</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            //如果遍历过程中报错了，将剩余未遍历的元素追加到不完整的新列表的后面</span><br><span class=\"line\">            if (r != size) &#123;</span><br><span class=\"line\">                System.arraycopy(elementData, r,</span><br><span class=\"line\">                        elementData, w,</span><br><span class=\"line\">                        size - r);</span><br><span class=\"line\">                w += size - r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //如果列表有被修改，则将无效存储位置置为 null</span><br><span class=\"line\">            if (w != size) &#123;</span><br><span class=\"line\">                // clear to let GC do its work</span><br><span class=\"line\">                for (int i = w; i &lt; size; i++)</span><br><span class=\"line\">                    elementData[i] = null;</span><br><span class=\"line\">                modCount += size - w;</span><br><span class=\"line\">                size = w;</span><br><span class=\"line\">                modified = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //返回是否做了修改</span><br><span class=\"line\">        return modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 对象序列化函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void writeObject(java.io.ObjectOutputStream s)</span><br><span class=\"line\">            throws java.io.IOException&#123;</span><br><span class=\"line\">        // Write out element count, and any hidden stuff</span><br><span class=\"line\">        int expectedModCount = modCount;</span><br><span class=\"line\">        //执行默认的序列化函数，将除 elementData[] 外的属性序列化</span><br><span class=\"line\">        s.defaultWriteObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Write out size as capacity for behavioural compatibility with clone()</span><br><span class=\"line\">        // 写入 size</span><br><span class=\"line\">        s.writeInt(size);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Write out all elements in the proper order.</span><br><span class=\"line\">        // 将 elementData[] 中的元素序列化进去</span><br><span class=\"line\">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class=\"line\">            s.writeObject(elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //序列化过程中对象被修改，则报 ConcurrentModificationException 异常</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 反序列化函数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void readObject(java.io.ObjectInputStream s)</span><br><span class=\"line\">            throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read in size, and any hidden stuff</span><br><span class=\"line\">        // 反序列化出除 elementData[] 外的属性</span><br><span class=\"line\">        s.defaultReadObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read in capacity</span><br><span class=\"line\">        // 读出 size ,可忽略</span><br><span class=\"line\">        s.readInt(); // ignored</span><br><span class=\"line\"></span><br><span class=\"line\">        if (size &gt; 0) &#123;</span><br><span class=\"line\">            // be like clone(), allocate array based upon size not capacity</span><br><span class=\"line\">            // 计算出实际容量</span><br><span class=\"line\">            int capacity = calculateCapacity(elementData, size);</span><br><span class=\"line\">            // 检查是否转换为数组类型，容量是否小于0。此处实际上不需要第一个参数。</span><br><span class=\"line\">            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);</span><br><span class=\"line\">            ensureCapacityInternal(size);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            Object[] a = elementData;</span><br><span class=\"line\">            // Read in all elements in the proper order.</span><br><span class=\"line\">            // 执行反序列化</span><br><span class=\"line\">            for (int i=0; i&lt;size; i++) &#123;</span><br><span class=\"line\">                a[i] = s.readObject();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 ListIterator</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ListIterator&lt;E&gt; listIterator() &#123;</span><br><span class=\"line\">        return new ListItr(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 ListIterator，指定初始迭代位置</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</span><br><span class=\"line\">        if (index &lt; 0 || index &gt; size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);</span><br><span class=\"line\">        return new ListItr(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个迭代器 Iterator</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class=\"line\">        return new Itr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取子list</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class=\"line\">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class=\"line\">        return new SubList(this, 0, fromIndex, toIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //子list范围检查</span><br><span class=\"line\">    static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123;</span><br><span class=\"line\">        if (fromIndex &lt; 0)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);</span><br><span class=\"line\">        if (toIndex &gt; size)</span><br><span class=\"line\">            throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);</span><br><span class=\"line\">        if (fromIndex &gt; toIndex)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span><br><span class=\"line\">                    &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // Java8 新加，供函数式编程遍历</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(action);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        final E[] elementData = (E[]) this.elementData;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            action.accept(elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回一个 Spliterator 对象。</span><br><span class=\"line\">     * Spliterator 是 Java8 新加的、可分割的迭代器(splitable iterator)，对于并行处理的能力大大增强。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class=\"line\">        return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Predicate 是Java8 新加的类，可以理解为一个用来断言的类。</span><br><span class=\"line\">     * 该方法应该是为了函数式编程新加的。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean removeIf(Predicate&lt;? super E&gt; filter) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(filter);</span><br><span class=\"line\">        // figure out which elements are to be removed</span><br><span class=\"line\">        // any exception thrown from the filter predicate at this stage</span><br><span class=\"line\">        // will leave the collection unmodified</span><br><span class=\"line\">        int removeCount = 0;</span><br><span class=\"line\">        final BitSet removeSet = new BitSet(size);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            final E element = (E) elementData[i];</span><br><span class=\"line\">            if (filter.test(element)) &#123;</span><br><span class=\"line\">                removeSet.set(i);</span><br><span class=\"line\">                removeCount++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // shift surviving elements left over the spaces left by removed elements</span><br><span class=\"line\">        final boolean anyToRemove = removeCount &gt; 0;</span><br><span class=\"line\">        if (anyToRemove) &#123;</span><br><span class=\"line\">            final int newSize = size - removeCount;</span><br><span class=\"line\">            for (int i=0, j=0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class=\"line\">                i = removeSet.nextClearBit(i);</span><br><span class=\"line\">                elementData[j] = elementData[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int k=newSize; k &lt; size; k++) &#123;</span><br><span class=\"line\">                elementData[k] = null;  // Let gc do its work</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.size = newSize;</span><br><span class=\"line\">            if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">                throw new ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return anyToRemove;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Java8 新加，可以按指定规则替换所有元素。</span><br><span class=\"line\">     * UnaryOperator 实现了 Function 接口，可以接收一个入参，处理后返回。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(operator);</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        final int size = this.size;</span><br><span class=\"line\">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序，Comparator 指定排序规则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class=\"line\">        final int expectedModCount = modCount;</span><br><span class=\"line\">        //调用 Arrays 的排序方法，瞄了一眼，很复杂的样子...</span><br><span class=\"line\">        Arrays.sort((E[]) elementData, 0, size, c);</span><br><span class=\"line\">        if (modCount != expectedModCount) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"writeObject-和-readObject\"><a href=\"#writeObject-和-readObject\" class=\"headerlink\" title=\"writeObject 和 readObject\"></a>writeObject 和 readObject</h3><p>ArrayList 实现了 Serializable 接口，所以对象会被序列化。而存放元素的 elementData 中可能会存在元素数量比数组容量小很多的情况，序列化时就会造成大量的空间浪费，因此通过实现 writeObject 和 readObject 方法，即可重新定义序列化与反序列化的规则。ArrayList 在 elementData 前加上了 transient 取消其默认序列化规则，其他属性则执行默认的规则。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p><code>iterator()</code>方法会返回一个 Iterator 迭代器，遍历时较常见。<br>源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * AbstractList.Itr 的优化版 迭代器</span><br><span class=\"line\"> */</span><br><span class=\"line\">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class=\"line\">    // 当前下标</span><br><span class=\"line\">    int cursor;       // index of next element to return</span><br><span class=\"line\">    // 上一个元素的下标，-1 表示还没有上一个元素</span><br><span class=\"line\">    int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class=\"line\">    int expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    Itr() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasNext() &#123;</span><br><span class=\"line\">        return cursor != size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public E next() &#123;</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        int i = cursor;</span><br><span class=\"line\">        if (i &gt;= size)</span><br><span class=\"line\">            throw new NoSuchElementException();</span><br><span class=\"line\">        Object[] elementData = ArrayList.this.elementData;</span><br><span class=\"line\">        if (i &gt;= elementData.length)</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        cursor = i + 1;</span><br><span class=\"line\">        return (E) elementData[lastRet = i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void remove() &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">        if (lastRet &lt; 0)</span><br><span class=\"line\">            throw new IllegalStateException();</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ArrayList.this.remove(lastRet);</span><br><span class=\"line\">            cursor = lastRet;</span><br><span class=\"line\">            lastRet = -1;</span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">        &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //Java8 新加的 遍历方法，供函数式编程使用</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(consumer);</span><br><span class=\"line\">        final int size = ArrayList.this.size;</span><br><span class=\"line\">        int i = cursor;</span><br><span class=\"line\">        if (i &gt;= size) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final Object[] elementData = ArrayList.this.elementData;</span><br><span class=\"line\">        if (i &gt;= elementData.length) &#123;</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class=\"line\">            consumer.accept((E) elementData[i++]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // update once at end of iteration to reduce heap write traffic</span><br><span class=\"line\">        cursor = i;</span><br><span class=\"line\">        lastRet = i - 1;</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 检查是否被修改过</span><br><span class=\"line\">    final void checkForComodification() &#123;</span><br><span class=\"line\">        if (modCount != expectedModCount)</span><br><span class=\"line\">            throw new ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>listIterator(int index)</code>、<code>listIterator()</code>这两个方法返回的是 ListIterator 迭代器，与 Iterator 相比，它支持反向遍历和 add() 方法，比较容易理解，不再赘述。</p>\n<p>此外，还有一个 <code>spliterator()</code>方法，它返回的是一个 Java8 新加的 Spliterator 迭代器。Spliterator 是一个可分割迭代器(splitable iterator)，为了并行遍历元素而设计。如果有机会我们再分析它。</p>\n<h3 id=\"sublist\"><a href=\"#sublist\" class=\"headerlink\" title=\"sublist\"></a>sublist</h3><p>ArrayList 提供的<code>public List&lt;E&gt; subList(int fromIndex, int toIndex)</code>方法允许返回一个子list。<br>根据注释得知：</p>\n<ol>\n<li>该方法返回的是父list的一个视图，从fromIndex（包含），到toIndex（不包含）。fromIndex=toIndex 表示子list为空</li>\n<li>父子list做的非结构性修改（non-structural changes）都会影响到彼此：所谓的“非结构性修改”，是指不涉及到list的大小改变的修改。相反，结构性修改，指改变了list大小的修改。</li>\n<li>对于结构性修改，子list的所有操作都会反映到父list上。但父list的修改将会导致返回的子list失效。</li>\n<li>tips：删除list中的某段数据的方法：<code>list.subList(from, to).clear();</code></li>\n</ol>\n<hr>\n<p>觉得有点收获的同学可以在手机上点击这个<a href=\"https://m.luckincoffee.com/invited/register?activityNo=NR201801030001&amp;inviteCode=8lB4421fo_6iv_eidD4_Fg%3D%3D&amp;secondfrom=0&amp;title=%E4%BB%8A%E5%A4%A9%E6%98%9F%E6%9C%9F%E4%B8%89%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E6%96%B9%E6%A1%88%E4%B8%80%E7%A8%BF%E8%BF%87&amp;timestamp=1542129222502&amp;from=singlemessage\" target=\"_blank\" rel=\"noopener\">链接</a> 免费领取一杯咖啡（瑞幸咖啡券，使用后我也得一张😃）</p>\n"},{"title":"动物园管理员——ZooKeeper","date":"2018-06-05T02:35:00.000Z","_content":"见链接：https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw","source":"_posts/动物园管理员——ZooKeeper.md","raw":"---\ntitle: 动物园管理员——ZooKeeper\ndate: 2018-06-05 10:35:00\ncategories:\n- 中间件\ntags:\n- 公众号文章\n- ZooKeeper\n---\n见链接：https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw","slug":"动物园管理员——ZooKeeper","published":1,"updated":"2018-09-22T02:52:12.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwty001jayqcq4mnc83s","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/hnfWq1sHD8qxKoXHKwJhiw</a></p>\n"},{"title":"克拉丝的面试","date":"2018-05-13T02:39:39.000Z","_content":"\n\n见链接：https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA","source":"_posts/克拉丝的面试.md","raw":"---\ntitle: 克拉丝的面试\ndate: 2018-05-13 10:39:39\ncategories:\n- Java\ntags:\n- 公众号文章\n- JVM\n- 类加载\n---\n\n\n见链接：https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA","slug":"克拉丝的面试","published":1,"updated":"2018-09-22T02:52:46.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwtz001mayqcb4weyxc2","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/boQUsfwjf0pPtcU_mAUWbA</a></p>\n"},{"title":"园丁与盆栽（JVM 垃圾回收）","date":"2018-05-01T02:38:55.000Z","_content":"见链接：https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg","source":"_posts/园丁与盆栽.md","raw":"---\ntitle: 园丁与盆栽（JVM 垃圾回收）\ndate: 2018-05-01 10:38:55\ncategories:\n- Java\ntags:\n- 公众号文章\n- JVM\n- GC\n---\n见链接：https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg","slug":"园丁与盆栽","published":1,"updated":"2018-09-22T02:52:12.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwu0001rayqc9jnkppz5","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/2GO3Sc4mD8BVN3PnfJQixg</a></p>\n"},{"title":"工厂模式、简单工厂模式与抽象工厂模式","date":"2018-05-10T02:39:16.000Z","_content":"见链接：https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA","source":"_posts/工厂模式、简单工厂模式与抽象工厂模式.md","raw":"---\ntitle: 工厂模式、简单工厂模式与抽象工厂模式\ndate: 2018-05-10 10:39:16\ncategories:\n- 设计模式\ntags:\n- 公众号文章\n- 设计模式\n---\n见链接：https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA","slug":"工厂模式、简单工厂模式与抽象工厂模式","published":1,"updated":"2018-09-22T02:52:12.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjovkdwu1001tayqclt0yfnyq","content":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>见链接：<a href=\"https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/ccNz_veqyb4UYBpH-UpZfA</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/170924/devkit-inst.png","slug":"devkit-inst.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/idea2.png","slug":"idea2.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/171022/cfstats.png","slug":"cfstats.png","post":"cjovkdwsw0007ayqcdddsqgad","modified":0,"renderable":0},{"_id":"source/_posts/171022/tpstats.png","slug":"tpstats.png","post":"cjovkdwsw0007ayqcdddsqgad","modified":0,"renderable":0},{"_id":"source/_posts/171108/19_14_27.png","slug":"19_14_27.png","post":"cjovkdwt5000cayqcrcayzxzy","modified":0,"renderable":0},{"_id":"source/_posts/171108/19_29_20.png","slug":"19_29_20.png","post":"cjovkdwt5000cayqcrcayzxzy","modified":0,"renderable":0},{"_id":"source/_posts/171210/kairosdb_metric_count.png","slug":"kairosdb_metric_count.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171210/统计局_query_row_count.png","slug":"统计局_query_row_count.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171022/count_tombstone.png","slug":"count_tombstone.png","post":"cjovkdwsw0007ayqcdddsqgad","modified":0,"renderable":0},{"_id":"source/_posts/171108/19_23_5.png","slug":"19_23_5.png","post":"cjovkdwt5000cayqcrcayzxzy","modified":0,"renderable":0},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/bitset-mem.png","slug":"bitset-mem.png","post":"cjovkdwtl000payqcvk1scw25","modified":0,"renderable":0},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/concurrent包.png","slug":"concurrent包.png","post":"cjovkdwtu0017ayqcf3x1yc4c","modified":0,"renderable":0},{"_id":"source/_posts/171022/compaction.png","slug":"compaction.png","post":"cjovkdwsw0007ayqcdddsqgad","modified":0,"renderable":0},{"_id":"source/_posts/171210/统计局_query_row_count2.png","slug":"统计局_query_row_count2.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/180521/database_rank.png","slug":"database_rank.png","post":"cjovkdwt7000dayqc4vowtzbm","modified":0,"renderable":0},{"_id":"source/_posts/Java-8-HashMap-上-——-红黑树/20180923214733.png","slug":"20180923214733.png","post":"cjovkdwtn000uayqce1ffzfw0","modified":0,"renderable":0},{"_id":"source/_posts/Java-8-HashMap-上-——-红黑树/IMG_1756.GIF","slug":"IMG_1756.GIF","post":"cjovkdwtn000uayqce1ffzfw0","modified":0,"renderable":0},{"_id":"source/_posts/Java-8-HashMap（下）—— compute/IMG_0007.JPG","slug":"IMG_0007.JPG","post":"cjovkdwto000wayqc56sekyr7","modified":0,"renderable":0},{"_id":"source/_posts/Java-8-HashMap（下）—— compute/IMG_0011.JPG","slug":"IMG_0011.JPG","post":"cjovkdwto000wayqc56sekyr7","modified":0,"renderable":0},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/IMG_1753.GIF","slug":"IMG_1753.GIF","post":"cjovkdwtl000payqcvk1scw25","modified":0,"renderable":0},{"_id":"source/_posts/BitMap、BitSet与Bloom Filter/bloom_filter.jpeg","slug":"bloom_filter.jpeg","post":"cjovkdwtl000payqcvk1scw25","modified":0,"renderable":0},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/synchronized.png","slug":"synchronized.png","post":"cjovkdwtu0017ayqcf3x1yc4c","modified":0,"renderable":0},{"_id":"source/_posts/171023/invoke.png","slug":"invoke.png","post":"cjovkdwsz0008ayqcld96gzxc","modified":0,"renderable":0},{"_id":"source/_posts/171023/login.png","slug":"login.png","post":"cjovkdwsz0008ayqcld96gzxc","modified":0,"renderable":0},{"_id":"source/_posts/171023/ps&ls.png","slug":"ps&ls.png","post":"cjovkdwsz0008ayqcld96gzxc","modified":0,"renderable":0},{"_id":"source/_posts/171023/trace.png","slug":"trace.png","post":"cjovkdwsz0008ayqcld96gzxc","modified":0,"renderable":0},{"_id":"source/_posts/171108/19_28_49.png","slug":"19_28_49.png","post":"cjovkdwt5000cayqcrcayzxzy","modified":0,"renderable":0},{"_id":"source/_posts/171022/logIn_showVersion.png","slug":"logIn_showVersion.png","post":"cjovkdwsw0007ayqcdddsqgad","modified":0,"renderable":0},{"_id":"source/_posts/170928/cassandra1.png","slug":"cassandra1.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/cassandra2.png","slug":"cassandra2.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/compactionstats.png","slug":"compactionstats.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/free -h.png","slug":"free -h.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/load_time.png","slug":"load_time.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/system.cpu.idle 2-3 .png","slug":"system.cpu.idle 2-3 .png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/170928/system.cpu.idle 2-3 no agg.png","slug":"system.cpu.idle 2-3 no agg.png","post":"cjovkdwss0003ayqcdxdvup8w","modified":0,"renderable":0},{"_id":"source/_posts/171210/image2017-12-8_11_24_9.png","slug":"image2017-12-8_11_24_9.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171210/kairosdb.datastore.queries_waiting.png","slug":"kairosdb.datastore.queries_waiting.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171210/kairosdb_metric_count_70W_75W.png","slug":"kairosdb_metric_count_70W_75W.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171210/metric_count100W .png","slug":"metric_count100W .png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/171210/统计局_query_sample_size.png","slug":"统计局_query_sample_size.png","post":"cjovkdwt20009ayqc2nue4a9k","modified":0,"renderable":0},{"_id":"source/_posts/170924/aftgit1.png","slug":"aftgit1.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/aftgit2.png","slug":"aftgit2.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/idea1.png","slug":"idea1.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/idea3.png","slug":"idea3.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/idea4.png","slug":"idea4.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/newgit1.png","slug":"newgit1.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/newgit2.png","slug":"newgit2.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/newgit3.png","slug":"newgit3.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/newgit4.png","slug":"newgit4.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/newgit5.png","slug":"newgit5.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/170924/ruby-install.png","slug":"ruby-install.png","post":"cjovkdwsp0001ayqcalmfr45m","modified":0,"renderable":0},{"_id":"source/_posts/volatile、CAS、synchronized、ReentrantLock-简介/img-6806f.gif","slug":"img-6806f.gif","post":"cjovkdwtu0017ayqcf3x1yc4c","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjovkdwsp0001ayqcalmfr45m","category_id":"cjovkdwsu0004ayqc0z4kx5v5","_id":"cjovkdwt8000eayqchmlc0vhc"},{"post_id":"cjovkdwss0003ayqcdxdvup8w","category_id":"cjovkdwt3000aayqc02cnz9r0","_id":"cjovkdwtg000kayqc6r5c5jg9"},{"post_id":"cjovkdwt7000dayqc4vowtzbm","category_id":"cjovkdwt3000aayqc02cnz9r0","_id":"cjovkdwtj000nayqcvklf0xgw"},{"post_id":"cjovkdwsw0007ayqcdddsqgad","category_id":"cjovkdwt3000aayqc02cnz9r0","_id":"cjovkdwtn000qayqcqeo1xj3t"},{"post_id":"cjovkdwsz0008ayqcld96gzxc","category_id":"cjovkdwtg000jayqcoa237zg7","_id":"cjovkdwtp000xayqcvi1wyp83"},{"post_id":"cjovkdwt20009ayqc2nue4a9k","category_id":"cjovkdwtn000sayqcnpy8iy2k","_id":"cjovkdwtr0012ayqcn197fxij"},{"post_id":"cjovkdwtr0011ayqc0xj0h05u","category_id":"cjovkdwtq000yayqczienuyv9","_id":"cjovkdwtu0018ayqc7gzpuho2"},{"post_id":"cjovkdwt5000cayqcrcayzxzy","category_id":"cjovkdwtq000yayqczienuyv9","_id":"cjovkdwtw001cayqcfmydblil"},{"post_id":"cjovkdwts0013ayqcgzmbwr2j","category_id":"cjovkdwt3000aayqc02cnz9r0","_id":"cjovkdwtx001fayqcupkw48sj"},{"post_id":"cjovkdwtb000hayqcya2g2q4f","category_id":"cjovkdwts0014ayqc0syrzz5g","_id":"cjovkdwtz001kayqc4frstr05"},{"post_id":"cjovkdwtf000iayqc4i6z8x0k","category_id":"cjovkdwtg000jayqcoa237zg7","_id":"cjovkdwu0001nayqca5wmpd4x"},{"post_id":"cjovkdwty001jayqcq4mnc83s","category_id":"cjovkdwtg000jayqcoa237zg7","_id":"cjovkdwu2001uayqcst1ut5vr"},{"post_id":"cjovkdwti000mayqcujt5r3ph","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu2001xayqckqg6l0x3"},{"post_id":"cjovkdwtz001mayqcb4weyxc2","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu30020ayqcih9airs0"},{"post_id":"cjovkdwu0001rayqc9jnkppz5","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu30022ayqcrmvxw06v"},{"post_id":"cjovkdwtl000payqcvk1scw25","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu40024ayqclj5cvn2l"},{"post_id":"cjovkdwtn000uayqce1ffzfw0","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu40026ayqcwdzx2vkt"},{"post_id":"cjovkdwto000wayqc56sekyr7","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu50029ayqc74raxn9s"},{"post_id":"cjovkdwtq000zayqckpoxokvn","category_id":"cjovkdwtq000yayqczienuyv9","_id":"cjovkdwu5002cayqc4yr49mvg"},{"post_id":"cjovkdwtt0016ayqcfpzl3ack","category_id":"cjovkdwu40028ayqcfy8a2mib","_id":"cjovkdwu6002iayqcm89htdul"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu6002mayqclfgwqsn6"},{"post_id":"cjovkdwtv001bayqcaqi84hb8","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu7002qayqca2etdd0e"},{"post_id":"cjovkdwtx001eayqcmpyvour4","category_id":"cjovkdwty001gayqcdgsu4ilk","_id":"cjovkdwu7002sayqcpv54v2k6"},{"post_id":"cjovkdwu1001tayqclt0yfnyq","category_id":"cjovkdwu7002payqc6nzax0zv","_id":"cjovkdwu8002wayqcb4ysqmd8"}],"PostTag":[{"post_id":"cjovkdwsp0001ayqcalmfr45m","tag_id":"cjovkdwsv0005ayqcl4lcpyzb","_id":"cjovkdwtj000oayqcui90od7t"},{"post_id":"cjovkdwsp0001ayqcalmfr45m","tag_id":"cjovkdwt3000bayqciv0pn3qz","_id":"cjovkdwtn000rayqcqt0l0ouc"},{"post_id":"cjovkdwsp0001ayqcalmfr45m","tag_id":"cjovkdwt8000gayqccai49ki4","_id":"cjovkdwto000vayqcjd4ddw3q"},{"post_id":"cjovkdwss0003ayqcdxdvup8w","tag_id":"cjovkdwth000layqcpcmxv9yf","_id":"cjovkdwtw001dayqcaxef4kga"},{"post_id":"cjovkdwss0003ayqcdxdvup8w","tag_id":"cjovkdwtn000tayqci9lba2st","_id":"cjovkdwty001hayqcfdyk0zgv"},{"post_id":"cjovkdwss0003ayqcdxdvup8w","tag_id":"cjovkdwtq0010ayqccwd6nnqj","_id":"cjovkdwtz001layqcnuuirmhe"},{"post_id":"cjovkdwss0003ayqcdxdvup8w","tag_id":"cjovkdwts0015ayqcxiknragp","_id":"cjovkdwu0001oayqcxd3pi3u8"},{"post_id":"cjovkdwsw0007ayqcdddsqgad","tag_id":"cjovkdwth000layqcpcmxv9yf","_id":"cjovkdwu1001sayqcsvh59hdj"},{"post_id":"cjovkdwsw0007ayqcdddsqgad","tag_id":"cjovkdwty001iayqcr6jjp733","_id":"cjovkdwu2001wayqc17h5pqgu"},{"post_id":"cjovkdwsz0008ayqcld96gzxc","tag_id":"cjovkdwu0001qayqcnuae6t01","_id":"cjovkdwu3001zayqciagzz6gw"},{"post_id":"cjovkdwt20009ayqc2nue4a9k","tag_id":"cjovkdwtn000tayqci9lba2st","_id":"cjovkdwu5002bayqcs3yg0f2b"},{"post_id":"cjovkdwt20009ayqc2nue4a9k","tag_id":"cjovkdwth000layqcpcmxv9yf","_id":"cjovkdwu5002eayqcwei6f0mz"},{"post_id":"cjovkdwt20009ayqc2nue4a9k","tag_id":"cjovkdwu40027ayqcoulw5xse","_id":"cjovkdwu5002gayqc18w3631t"},{"post_id":"cjovkdwt5000cayqcrcayzxzy","tag_id":"cjovkdwu5002aayqcc3xc1w26","_id":"cjovkdwu6002kayqcoxvvsx4b"},{"post_id":"cjovkdwt5000cayqcrcayzxzy","tag_id":"cjovkdwu5002fayqcehovoydh","_id":"cjovkdwu7002nayqcu7apmos0"},{"post_id":"cjovkdwt7000dayqc4vowtzbm","tag_id":"cjovkdwth000layqcpcmxv9yf","_id":"cjovkdwu7002tayqc23nkwxd9"},{"post_id":"cjovkdwt7000dayqc4vowtzbm","tag_id":"cjovkdwu7002oayqcvzdy5tu1","_id":"cjovkdwu8002uayqc7zyhwgb3"},{"post_id":"cjovkdwtb000hayqcya2g2q4f","tag_id":"cjovkdwu7002rayqc02vq67e5","_id":"cjovkdwu8002yayqcx4d4qe4l"},{"post_id":"cjovkdwtb000hayqcya2g2q4f","tag_id":"cjovkdwu7002oayqcvzdy5tu1","_id":"cjovkdwu8002zayqcu0kggy2n"},{"post_id":"cjovkdwtf000iayqc4i6z8x0k","tag_id":"cjovkdwu8002xayqc6qzmtfek","_id":"cjovkdwu90032ayqc3q8cl85a"},{"post_id":"cjovkdwtf000iayqc4i6z8x0k","tag_id":"cjovkdwu5002fayqcehovoydh","_id":"cjovkdwu90033ayqcpccbyjb8"},{"post_id":"cjovkdwti000mayqcujt5r3ph","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwua0037ayqcltpwriy1"},{"post_id":"cjovkdwti000mayqcujt5r3ph","tag_id":"cjovkdwu90034ayqcexqeanck","_id":"cjovkdwua0038ayqc21yh9rij"},{"post_id":"cjovkdwti000mayqcujt5r3ph","tag_id":"cjovkdwu90035ayqceitz17hl","_id":"cjovkdwua003aayqcq0b7os0n"},{"post_id":"cjovkdwtl000payqcvk1scw25","tag_id":"cjovkdwu90034ayqcexqeanck","_id":"cjovkdwub003fayqcnc855juy"},{"post_id":"cjovkdwtl000payqcvk1scw25","tag_id":"cjovkdwua0039ayqc4g7v5axa","_id":"cjovkdwub003gayqcs3hmt24s"},{"post_id":"cjovkdwtl000payqcvk1scw25","tag_id":"cjovkdwua003bayqc4wamhbpe","_id":"cjovkdwub003iayqcxvxi10j4"},{"post_id":"cjovkdwtl000payqcvk1scw25","tag_id":"cjovkdwua003cayqc0ylw9iim","_id":"cjovkdwub003jayqcqfgforsi"},{"post_id":"cjovkdwtl000payqcvk1scw25","tag_id":"cjovkdwua003dayqcjhg54kuv","_id":"cjovkdwuc003layqcnaix7o6l"},{"post_id":"cjovkdwtn000uayqce1ffzfw0","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwuc003oayqcr4xrzxl3"},{"post_id":"cjovkdwtn000uayqce1ffzfw0","tag_id":"cjovkdwu90034ayqcexqeanck","_id":"cjovkdwuc003payqced5l4s9o"},{"post_id":"cjovkdwtn000uayqce1ffzfw0","tag_id":"cjovkdwu90035ayqceitz17hl","_id":"cjovkdwud003rayqcdikp007w"},{"post_id":"cjovkdwtn000uayqce1ffzfw0","tag_id":"cjovkdwuc003mayqcfiehv2f9","_id":"cjovkdwud003sayqch0in8kdn"},{"post_id":"cjovkdwto000wayqc56sekyr7","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwue003vayqc3io4a7j6"},{"post_id":"cjovkdwto000wayqc56sekyr7","tag_id":"cjovkdwu90034ayqcexqeanck","_id":"cjovkdwue003wayqcpopj6h5g"},{"post_id":"cjovkdwto000wayqc56sekyr7","tag_id":"cjovkdwu90035ayqceitz17hl","_id":"cjovkdwue003yayqcy2s771bw"},{"post_id":"cjovkdwtq000zayqckpoxokvn","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwue0040ayqcva37oyvs"},{"post_id":"cjovkdwtq000zayqckpoxokvn","tag_id":"cjovkdwue003xayqc95z5lsfk","_id":"cjovkdwue0041ayqc39dgz9vz"},{"post_id":"cjovkdwtr0011ayqc0xj0h05u","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwuf0044ayqcqt0x6zh8"},{"post_id":"cjovkdwtr0011ayqc0xj0h05u","tag_id":"cjovkdwue003xayqc95z5lsfk","_id":"cjovkdwuf0045ayqcnl7c2p54"},{"post_id":"cjovkdwts0013ayqcgzmbwr2j","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwug0048ayqc435sqs1g"},{"post_id":"cjovkdwts0013ayqcgzmbwr2j","tag_id":"cjovkdwuf0046ayqciigekgpf","_id":"cjovkdwug0049ayqcxiik6j26"},{"post_id":"cjovkdwtt0016ayqcfpzl3ack","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwuj004cayqc3izcudqq"},{"post_id":"cjovkdwtt0016ayqcfpzl3ack","tag_id":"cjovkdwug004aayqczu864d5f","_id":"cjovkdwuj004dayqcliz8ex00"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","tag_id":"cjovkdwuh004bayqcgzmw3nk1","_id":"cjovkdwuk004jayqc5lws8fsq"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","tag_id":"cjovkdwuj004eayqcsgfy8ip7","_id":"cjovkdwuk004kayqcihfdge7g"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","tag_id":"cjovkdwuj004fayqcuq7gs9qg","_id":"cjovkdwul004mayqcqknfy29a"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","tag_id":"cjovkdwuk004gayqctak38pry","_id":"cjovkdwul004nayqcacrriw3y"},{"post_id":"cjovkdwtu0017ayqcf3x1yc4c","tag_id":"cjovkdwuk004hayqch9tjsen7","_id":"cjovkdwul004payqcfp3trx64"},{"post_id":"cjovkdwtv001bayqcaqi84hb8","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwul004rayqcw7ptvvbw"},{"post_id":"cjovkdwtv001bayqcaqi84hb8","tag_id":"cjovkdwul004layqch2thjarb","_id":"cjovkdwul004sayqctgz0rki2"},{"post_id":"cjovkdwtv001bayqcaqi84hb8","tag_id":"cjovkdwul004oayqcd9a4b1sz","_id":"cjovkdwum004uayqc4h2rqf19"},{"post_id":"cjovkdwtx001eayqcmpyvour4","tag_id":"cjovkdwu90034ayqcexqeanck","_id":"cjovkdwum004wayqcank56pg0"},{"post_id":"cjovkdwtx001eayqcmpyvour4","tag_id":"cjovkdwum004tayqc8uea21yy","_id":"cjovkdwum004xayqc18p2ooxt"},{"post_id":"cjovkdwty001jayqcq4mnc83s","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwun0050ayqcbamqu1s4"},{"post_id":"cjovkdwty001jayqcq4mnc83s","tag_id":"cjovkdwum004yayqc56y66skp","_id":"cjovkdwun0051ayqcv01f4qju"},{"post_id":"cjovkdwtz001mayqcb4weyxc2","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwuo0055ayqcgjzl84lk"},{"post_id":"cjovkdwtz001mayqcb4weyxc2","tag_id":"cjovkdwul004layqch2thjarb","_id":"cjovkdwuo0056ayqc3r16vag5"},{"post_id":"cjovkdwtz001mayqcb4weyxc2","tag_id":"cjovkdwul004oayqcd9a4b1sz","_id":"cjovkdwuo0058ayqcq7xbg91u"},{"post_id":"cjovkdwu0001rayqc9jnkppz5","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwup005bayqczj76h1wq"},{"post_id":"cjovkdwu0001rayqc9jnkppz5","tag_id":"cjovkdwul004layqch2thjarb","_id":"cjovkdwup005cayqcvhr4yog0"},{"post_id":"cjovkdwu0001rayqc9jnkppz5","tag_id":"cjovkdwuo0059ayqchnvu9a44","_id":"cjovkdwup005eayqcbzglw6v0"},{"post_id":"cjovkdwu1001tayqclt0yfnyq","tag_id":"cjovkdwu90031ayqcoiktrr0s","_id":"cjovkdwup005fayqci1ayxzjy"},{"post_id":"cjovkdwu1001tayqclt0yfnyq","tag_id":"cjovkdwup005dayqcrdtzmy6h","_id":"cjovkdwup005gayqcxwbg84jg"}],"Tag":[{"name":"jekyll","_id":"cjovkdwsv0005ayqcl4lcpyzb"},{"name":"github","_id":"cjovkdwt3000bayqciv0pn3qz"},{"name":"gitgub page","_id":"cjovkdwt8000gayqccai49ki4"},{"name":"cassandra","_id":"cjovkdwth000layqcpcmxv9yf"},{"name":"kairosdb","_id":"cjovkdwtn000tayqci9lba2st"},{"name":"TScached","_id":"cjovkdwtq0010ayqccwd6nnqj"},{"name":"linux","_id":"cjovkdwts0015ayqcxiknragp"},{"name":"cql","_id":"cjovkdwty001iayqcr6jjp733"},{"name":"dubbo","_id":"cjovkdwu0001qayqcnuae6t01"},{"name":"jmeter","_id":"cjovkdwu40027ayqcoulw5xse"},{"name":"踩坑记","_id":"cjovkdwu5002aayqcc3xc1w26"},{"name":"java","_id":"cjovkdwu5002fayqcehovoydh"},{"name":"大数据","_id":"cjovkdwu7002oayqcvzdy5tu1"},{"name":"spark","_id":"cjovkdwu7002rayqc02vq67e5"},{"name":"Metric","_id":"cjovkdwu8002xayqc6qzmtfek"},{"name":"公众号文章","_id":"cjovkdwu90031ayqcoiktrr0s"},{"name":"Java","_id":"cjovkdwu90034ayqcexqeanck"},{"name":"HashMap","_id":"cjovkdwu90035ayqceitz17hl"},{"name":"BitMap","_id":"cjovkdwua0039ayqc4g7v5axa"},{"name":"BitSet","_id":"cjovkdwua003bayqc4wamhbpe"},{"name":"布隆过滤器","_id":"cjovkdwua003cayqc0ylw9iim"},{"name":"Bloom Filter","_id":"cjovkdwua003dayqcjhg54kuv"},{"name":"红黑树","_id":"cjovkdwuc003mayqcfiehv2f9"},{"name":"Linux","_id":"cjovkdwue003xayqc95z5lsfk"},{"name":"mysql","_id":"cjovkdwuf0046ayqciigekgpf"},{"name":"React","_id":"cjovkdwug004aayqczu864d5f"},{"name":"多线程","_id":"cjovkdwuh004bayqcgzmw3nk1"},{"name":"volatile","_id":"cjovkdwuj004eayqcsgfy8ip7"},{"name":"CAS","_id":"cjovkdwuj004fayqcuq7gs9qg"},{"name":"synchronized","_id":"cjovkdwuk004gayqctak38pry"},{"name":"ReentrantLock","_id":"cjovkdwuk004hayqch9tjsen7"},{"name":"JVM","_id":"cjovkdwul004layqch2thjarb"},{"name":"类加载","_id":"cjovkdwul004oayqcd9a4b1sz"},{"name":"ArrayList","_id":"cjovkdwum004tayqc8uea21yy"},{"name":"ZooKeeper","_id":"cjovkdwum004yayqc56y66skp"},{"name":"GC","_id":"cjovkdwuo0059ayqchnvu9a44"},{"name":"设计模式","_id":"cjovkdwup005dayqcrdtzmy6h"}]}}